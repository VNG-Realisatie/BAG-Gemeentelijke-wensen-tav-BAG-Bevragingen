{
	"info": {
		"_postman_id": "6eb1e081-a336-45c9-8dd2-094112d1a6b1",
		"name": "BAG",
		"description": "Deze API levert actuele gegevens over adressen, adresseerbaar objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6707821"
	},
	"item": [
		{
			"name": "API",
			"item": [
				{
					"name": "adressen",
					"item": [
						{
							"name": "vindt adressen",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-0dd1a92983f4676b7a3b68eabe571600",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adressen"
									],
									"query": [
										{
											"key": "pandIdentificatie",
											"value": "<string>",
											"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
											"disabled": true
										},
										{
											"key": "adresseerbaarObjectIdentificatie",
											"value": "<string>",
											"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
											"disabled": true
										},
										{
											"key": "zoekresultaatIdentificatie",
											"value": "adr-0dd1a92983f4676b7a3b68eabe571600",
											"description": "De identificatie van een zoekresultaat van het endpoint get /adressen/zoek"
										},
										{
											"key": "expand",
											"value": "<string>",
											"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"description": "Pagina nummer",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "20",
											"disabled": true
										}
									]
								},
								"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandidentificatie of de adresseerbaarobjectidentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature)."
							},
							"response": [
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"first\": {\n   \"href\": \"/resourcenaam?page=1\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Eerste pagina\"\n  },\n  \"previous\": {\n   \"href\": \"/resourcenaam?page=3\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Vorige pagina\"\n  },\n  \"next\": {\n   \"href\": \"/resourcenaam?page=5\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Volgende pagina\"\n  },\n  \"last\": {\n   \"href\": \"/resourcenaam?page=8\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Laatste pagina\"\n  }\n },\n \"_embedded\": {\n  \"adressen\": [\n   {\n    \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n    \"huisnummer\": 1,\n    \"huisletter\": \"A\",\n    \"huisnummertoevoeging\": \"bis\",\n    \"postcode\": \"6922KZ\",\n    \"woonplaats\": \"Duiven\",\n    \"korteNaam\": \"Ln vd l D-Westervoort\",\n    \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n    \"openbareRuimteIdentificatie\": \"0226300000136166\",\n    \"woonplaatsIdentificatie\": \"2096\",\n    \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n    \"pandIdentificaties\": [\n     \"0226100000008856\",\n     \"0226100000008856\"\n    ],\n    \"isNevenadres\": \"<boolean>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"mogelijkOnjuist\": {\n     \"korteNaam\": \"<boolean>\",\n     \"straat\": \"<boolean>\",\n     \"huisnummer\": \"<boolean>\",\n     \"huisletter\": \"<boolean>\",\n     \"huisnummertoevoeging\": \"<boolean>\",\n     \"postcode\": \"<boolean>\",\n     \"woonplaats\": \"<boolean>\",\n     \"nummeraanduidingIdentificatie\": \"<boolean>\",\n     \"openbareRuimteIdentificatie\": \"<boolean>\",\n     \"woonplaatsIdentificatie\": \"<boolean>\",\n     \"toelichting\": [\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"openbareRuimte\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"nummeraanduiding\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"woonplaats\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adresseerbaarObject\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"panden\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    },\n    \"_embedded\": {\n     \"openbareRuimte\": {\n      \"identificatie\": \"<string>\",\n      \"domein\": \"<string>\",\n      \"naam\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n      \"type\": \"<string>\",\n      \"status\": \"<string>\",\n      \"korteNaam\": \"Ln vd l D-Westervoort\",\n      \"geconstateerd\": \"<boolean>\",\n      \"documentdatum\": {},\n      \"documentnummer\": \"BAG-21\",\n      \"woonplaatsIdentificatie\": \"2096\",\n      \"mogelijkOnjuist\": {\n       \"naam\": \"<boolean>\",\n       \"korteNaam\": \"<boolean>\",\n       \"type\": \"<boolean>\",\n       \"status\": \"<boolean>\",\n       \"woonplaatsIdentificatie\": \"<boolean>\",\n       \"toelichting\": [\n        \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\",\n        \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\"\n       ]\n      },\n      \"_links\": {\n       \"self\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"woonplaats\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       }\n      }\n     },\n     \"nummeraanduiding\": {\n      \"identificatie\": \"<string>\",\n      \"domein\": \"<string>\",\n      \"huisnummer\": 1,\n      \"huisletter\": \"A\",\n      \"huisnummertoevoeging\": \"bis\",\n      \"postcode\": \"6922KZ\",\n      \"status\": \"<string>\",\n      \"geconstateerd\": \"<boolean>\",\n      \"documentdatum\": {},\n      \"documentnummer\": \"Duiven 25112019\",\n      \"woonplaatsIdentificatie\": \"2096\",\n      \"openbareRuimteIdentificatie\": \"0226300000136166\",\n      \"mogelijkOnjuist\": {\n       \"huisnummer\": \"<boolean>\",\n       \"huisletter\": \"<boolean>\",\n       \"huisnummertoevoeging\": \"<boolean>\",\n       \"postcode\": \"<boolean>\",\n       \"status\": \"<boolean>\",\n       \"woonplaatsIdentificatie\": \"<boolean>\",\n       \"openbareRuimteIdentificatie\": \"<boolean>\",\n       \"toelichting\": [\n        \"Woonplaats bestaat mogelijk niet.\",\n        \"Woonplaats bestaat mogelijk niet.\"\n       ]\n      },\n      \"_links\": {\n       \"self\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"adres\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"openbareRuimte\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"woonplaats\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       }\n      }\n     },\n     \"woonplaats\": {\n      \"identificatie\": \"<string>\",\n      \"domein\": \"<string>\",\n      \"naam\": \"Duiven\",\n      \"status\": \"<string>\",\n      \"geconstateerd\": \"<boolean>\",\n      \"documentdatum\": {},\n      \"documentnummer\": \"09.0898\",\n      \"mogelijkOnjuist\": {\n       \"naam\": \"<boolean>\",\n       \"geometrie\": \"<boolean>\",\n       \"status\": \"<boolean>\",\n       \"toelichting\": [\n        \"Woonplaats bestaat mogelijk niet.\",\n        \"Woonplaats bestaat mogelijk niet.\"\n       ]\n      },\n      \"_links\": {\n       \"self\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       }\n      }\n     }\n    }\n   },\n   {\n    \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n    \"huisnummer\": 1,\n    \"huisletter\": \"A\",\n    \"huisnummertoevoeging\": \"bis\",\n    \"postcode\": \"6922KZ\",\n    \"woonplaats\": \"Duiven\",\n    \"korteNaam\": \"Ln vd l D-Westervoort\",\n    \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n    \"openbareRuimteIdentificatie\": \"0226300000136166\",\n    \"woonplaatsIdentificatie\": \"2096\",\n    \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n    \"pandIdentificaties\": [\n     \"0226100000008856\",\n     \"0226100000008856\"\n    ],\n    \"isNevenadres\": \"<boolean>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"mogelijkOnjuist\": {\n     \"korteNaam\": \"<boolean>\",\n     \"straat\": \"<boolean>\",\n     \"huisnummer\": \"<boolean>\",\n     \"huisletter\": \"<boolean>\",\n     \"huisnummertoevoeging\": \"<boolean>\",\n     \"postcode\": \"<boolean>\",\n     \"woonplaats\": \"<boolean>\",\n     \"nummeraanduidingIdentificatie\": \"<boolean>\",\n     \"openbareRuimteIdentificatie\": \"<boolean>\",\n     \"woonplaatsIdentificatie\": \"<boolean>\",\n     \"toelichting\": [\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"openbareRuimte\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"nummeraanduiding\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"woonplaats\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adresseerbaarObject\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"panden\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    },\n    \"_embedded\": {\n     \"openbareRuimte\": {\n      \"identificatie\": \"<string>\",\n      \"domein\": \"<string>\",\n      \"naam\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n      \"type\": \"<string>\",\n      \"status\": \"<string>\",\n      \"korteNaam\": \"Ln vd l D-Westervoort\",\n      \"geconstateerd\": \"<boolean>\",\n      \"documentdatum\": {},\n      \"documentnummer\": \"BAG-21\",\n      \"woonplaatsIdentificatie\": \"2096\",\n      \"mogelijkOnjuist\": {\n       \"naam\": \"<boolean>\",\n       \"korteNaam\": \"<boolean>\",\n       \"type\": \"<boolean>\",\n       \"status\": \"<boolean>\",\n       \"woonplaatsIdentificatie\": \"<boolean>\",\n       \"toelichting\": [\n        \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\",\n        \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\"\n       ]\n      },\n      \"_links\": {\n       \"self\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"woonplaats\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       }\n      }\n     },\n     \"nummeraanduiding\": {\n      \"identificatie\": \"<string>\",\n      \"domein\": \"<string>\",\n      \"huisnummer\": 1,\n      \"huisletter\": \"A\",\n      \"huisnummertoevoeging\": \"bis\",\n      \"postcode\": \"6922KZ\",\n      \"status\": \"<string>\",\n      \"geconstateerd\": \"<boolean>\",\n      \"documentdatum\": {},\n      \"documentnummer\": \"Duiven 25112019\",\n      \"woonplaatsIdentificatie\": \"2096\",\n      \"openbareRuimteIdentificatie\": \"0226300000136166\",\n      \"mogelijkOnjuist\": {\n       \"huisnummer\": \"<boolean>\",\n       \"huisletter\": \"<boolean>\",\n       \"huisnummertoevoeging\": \"<boolean>\",\n       \"postcode\": \"<boolean>\",\n       \"status\": \"<boolean>\",\n       \"woonplaatsIdentificatie\": \"<boolean>\",\n       \"openbareRuimteIdentificatie\": \"<boolean>\",\n       \"toelichting\": [\n        \"Woonplaats bestaat mogelijk niet.\",\n        \"Woonplaats bestaat mogelijk niet.\"\n       ]\n      },\n      \"_links\": {\n       \"self\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"adres\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"openbareRuimte\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       },\n       \"woonplaats\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       }\n      }\n     },\n     \"woonplaats\": {\n      \"identificatie\": \"<string>\",\n      \"domein\": \"<string>\",\n      \"naam\": \"Duiven\",\n      \"status\": \"<string>\",\n      \"geconstateerd\": \"<boolean>\",\n      \"documentdatum\": {},\n      \"documentnummer\": \"09.0898\",\n      \"mogelijkOnjuist\": {\n       \"naam\": \"<boolean>\",\n       \"geometrie\": \"<boolean>\",\n       \"status\": \"<boolean>\",\n       \"toelichting\": [\n        \"Woonplaats bestaat mogelijk niet.\",\n        \"Woonplaats bestaat mogelijk niet.\"\n       ]\n      },\n      \"_links\": {\n       \"self\": {\n        \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n        \"templated\": \"<boolean>\",\n        \"title\": \"<string>\"\n       }\n      }\n     }\n    }\n   }\n  ]\n }\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0226100000008856&adresseerbaarObjectIdentificatie=0226010000038820&zoekresultaatIdentificatie=<string>&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "<string>"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "\"fuzzy\" zoeken van adressen",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adressen/zoek?zoek=vinkeloord 1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adressen",
										"zoek"
									],
									"query": [
										{
											"key": "zoek",
											"value": "vinkeloord 1",
											"description": "(Required) Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
										},
										{
											"key": "page",
											"value": "1",
											"description": "Pagina nummer",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "10",
											"disabled": true
										}
									]
								},
								"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatidentificatie uit het antwoord te gebruiken in get/adressen"
							},
							"response": [
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"first\": {\n   \"href\": \"/resourcenaam?page=1\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Eerste pagina\"\n  },\n  \"previous\": {\n   \"href\": \"/resourcenaam?page=3\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Vorige pagina\"\n  },\n  \"next\": {\n   \"href\": \"/resourcenaam?page=5\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Volgende pagina\"\n  },\n  \"last\": {\n   \"href\": \"/resourcenaam?page=8\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Laatste pagina\"\n  }\n },\n \"_embedded\": {\n  \"zoekresultaten\": [\n   {\n    \"omschrijving\": \"<string>\",\n    \"identificatie\": \"<string>\",\n    \"_links\": {\n     \"adres\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     }\n    }\n   },\n   {\n    \"omschrijving\": \"<string>\",\n    \"identificatie\": \"<string>\",\n    \"_links\": {\n     \"adres\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     }\n    }\n   }\n  ]\n }\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								}
							]
						},
						{
							"name": "levert een adres",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adressen",
										":nummeraanduidingidentificatie"
									],
									"query": [
										{
											"key": "expand",
											"value": "<string>",
											"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "nummeraanduidingidentificatie",
											"value": "0014200010793696",
											"description": "(Required) Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
										}
									]
								},
								"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature)."
							},
							"response": [
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n \"huisnummer\": 1,\n \"huisletter\": \"A\",\n \"huisnummertoevoeging\": \"bis\",\n \"postcode\": \"6922KZ\",\n \"woonplaats\": \"Duiven\",\n \"korteNaam\": \"Ln vd l D-Westervoort\",\n \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n \"openbareRuimteIdentificatie\": \"0226300000136166\",\n \"woonplaatsIdentificatie\": \"2096\",\n \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n \"pandIdentificaties\": [\n  \"0226100000008856\",\n  \"0226100000008856\"\n ],\n \"isNevenadres\": \"<boolean>\",\n \"geconstateerd\": \"<boolean>\",\n \"mogelijkOnjuist\": {\n  \"korteNaam\": \"<boolean>\",\n  \"straat\": \"<boolean>\",\n  \"huisnummer\": \"<boolean>\",\n  \"huisletter\": \"<boolean>\",\n  \"huisnummertoevoeging\": \"<boolean>\",\n  \"postcode\": \"<boolean>\",\n  \"woonplaats\": \"<boolean>\",\n  \"nummeraanduidingIdentificatie\": \"<boolean>\",\n  \"openbareRuimteIdentificatie\": \"<boolean>\",\n  \"woonplaatsIdentificatie\": \"<boolean>\",\n  \"toelichting\": [\n   \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n   \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"openbareRuimte\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"nummeraanduiding\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"woonplaats\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"adresseerbaarObject\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"panden\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ]\n },\n \"_embedded\": {\n  \"openbareRuimte\": {\n   \"identificatie\": \"<string>\",\n   \"domein\": \"<string>\",\n   \"naam\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n   \"type\": \"<string>\",\n   \"status\": \"<string>\",\n   \"korteNaam\": \"Ln vd l D-Westervoort\",\n   \"geconstateerd\": \"<boolean>\",\n   \"documentdatum\": {},\n   \"documentnummer\": \"BAG-21\",\n   \"woonplaatsIdentificatie\": \"2096\",\n   \"mogelijkOnjuist\": {\n    \"naam\": \"<boolean>\",\n    \"korteNaam\": \"<boolean>\",\n    \"type\": \"<boolean>\",\n    \"status\": \"<boolean>\",\n    \"woonplaatsIdentificatie\": \"<boolean>\",\n    \"toelichting\": [\n     \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\",\n     \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\"\n    ]\n   },\n   \"_links\": {\n    \"self\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"woonplaats\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    }\n   }\n  },\n  \"nummeraanduiding\": {\n   \"identificatie\": \"<string>\",\n   \"domein\": \"<string>\",\n   \"huisnummer\": 1,\n   \"huisletter\": \"A\",\n   \"huisnummertoevoeging\": \"bis\",\n   \"postcode\": \"6922KZ\",\n   \"status\": \"<string>\",\n   \"geconstateerd\": \"<boolean>\",\n   \"documentdatum\": {},\n   \"documentnummer\": \"Duiven 25112019\",\n   \"woonplaatsIdentificatie\": \"2096\",\n   \"openbareRuimteIdentificatie\": \"0226300000136166\",\n   \"mogelijkOnjuist\": {\n    \"huisnummer\": \"<boolean>\",\n    \"huisletter\": \"<boolean>\",\n    \"huisnummertoevoeging\": \"<boolean>\",\n    \"postcode\": \"<boolean>\",\n    \"status\": \"<boolean>\",\n    \"woonplaatsIdentificatie\": \"<boolean>\",\n    \"openbareRuimteIdentificatie\": \"<boolean>\",\n    \"toelichting\": [\n     \"Woonplaats bestaat mogelijk niet.\",\n     \"Woonplaats bestaat mogelijk niet.\"\n    ]\n   },\n   \"_links\": {\n    \"self\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"adres\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"openbareRuimte\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"woonplaats\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    }\n   }\n  },\n  \"woonplaats\": {\n   \"identificatie\": \"<string>\",\n   \"domein\": \"<string>\",\n   \"naam\": \"Duiven\",\n   \"status\": \"<string>\",\n   \"geconstateerd\": \"<boolean>\",\n   \"documentdatum\": {},\n   \"documentnummer\": \"09.0898\",\n   \"mogelijkOnjuist\": {\n    \"naam\": \"<boolean>\",\n    \"geometrie\": \"<boolean>\",\n    \"status\": \"<boolean>\",\n    \"toelichting\": [\n     \"Woonplaats bestaat mogelijk niet.\",\n     \"Woonplaats bestaat mogelijk niet.\"\n    ]\n   },\n   \"_links\": {\n    \"self\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    }\n   }\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								}
							]
						},
						{
							"name": "levert een adres - ACC<>PROD",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adressen",
										":nummeraanduidingidentificatie"
									],
									"query": [
										{
											"key": "expand",
											"value": "<string>",
											"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "nummeraanduidingidentificatie",
											"value": "0014200010896726",
											"description": "(Required) Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
										}
									]
								},
								"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature)."
							},
							"response": [
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n \"huisnummer\": 1,\n \"huisletter\": \"A\",\n \"huisnummertoevoeging\": \"bis\",\n \"postcode\": \"6922KZ\",\n \"woonplaats\": \"Duiven\",\n \"korteNaam\": \"Ln vd l D-Westervoort\",\n \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n \"openbareRuimteIdentificatie\": \"0226300000136166\",\n \"woonplaatsIdentificatie\": \"2096\",\n \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n \"pandIdentificaties\": [\n  \"0226100000008856\",\n  \"0226100000008856\"\n ],\n \"isNevenadres\": \"<boolean>\",\n \"geconstateerd\": \"<boolean>\",\n \"mogelijkOnjuist\": {\n  \"korteNaam\": \"<boolean>\",\n  \"straat\": \"<boolean>\",\n  \"huisnummer\": \"<boolean>\",\n  \"huisletter\": \"<boolean>\",\n  \"huisnummertoevoeging\": \"<boolean>\",\n  \"postcode\": \"<boolean>\",\n  \"woonplaats\": \"<boolean>\",\n  \"nummeraanduidingIdentificatie\": \"<boolean>\",\n  \"openbareRuimteIdentificatie\": \"<boolean>\",\n  \"woonplaatsIdentificatie\": \"<boolean>\",\n  \"toelichting\": [\n   \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n   \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"openbareRuimte\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"nummeraanduiding\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"woonplaats\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"adresseerbaarObject\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"panden\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ]\n },\n \"_embedded\": {\n  \"openbareRuimte\": {\n   \"identificatie\": \"<string>\",\n   \"domein\": \"<string>\",\n   \"naam\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n   \"type\": \"<string>\",\n   \"status\": \"<string>\",\n   \"korteNaam\": \"Ln vd l D-Westervoort\",\n   \"geconstateerd\": \"<boolean>\",\n   \"documentdatum\": {},\n   \"documentnummer\": \"BAG-21\",\n   \"woonplaatsIdentificatie\": \"2096\",\n   \"mogelijkOnjuist\": {\n    \"naam\": \"<boolean>\",\n    \"korteNaam\": \"<boolean>\",\n    \"type\": \"<boolean>\",\n    \"status\": \"<boolean>\",\n    \"woonplaatsIdentificatie\": \"<boolean>\",\n    \"toelichting\": [\n     \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\",\n     \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\"\n    ]\n   },\n   \"_links\": {\n    \"self\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"woonplaats\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    }\n   }\n  },\n  \"nummeraanduiding\": {\n   \"identificatie\": \"<string>\",\n   \"domein\": \"<string>\",\n   \"huisnummer\": 1,\n   \"huisletter\": \"A\",\n   \"huisnummertoevoeging\": \"bis\",\n   \"postcode\": \"6922KZ\",\n   \"status\": \"<string>\",\n   \"geconstateerd\": \"<boolean>\",\n   \"documentdatum\": {},\n   \"documentnummer\": \"Duiven 25112019\",\n   \"woonplaatsIdentificatie\": \"2096\",\n   \"openbareRuimteIdentificatie\": \"0226300000136166\",\n   \"mogelijkOnjuist\": {\n    \"huisnummer\": \"<boolean>\",\n    \"huisletter\": \"<boolean>\",\n    \"huisnummertoevoeging\": \"<boolean>\",\n    \"postcode\": \"<boolean>\",\n    \"status\": \"<boolean>\",\n    \"woonplaatsIdentificatie\": \"<boolean>\",\n    \"openbareRuimteIdentificatie\": \"<boolean>\",\n    \"toelichting\": [\n     \"Woonplaats bestaat mogelijk niet.\",\n     \"Woonplaats bestaat mogelijk niet.\"\n    ]\n   },\n   \"_links\": {\n    \"self\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"adres\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"openbareRuimte\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    },\n    \"woonplaats\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    }\n   }\n  },\n  \"woonplaats\": {\n   \"identificatie\": \"<string>\",\n   \"domein\": \"<string>\",\n   \"naam\": \"Duiven\",\n   \"status\": \"<string>\",\n   \"geconstateerd\": \"<boolean>\",\n   \"documentdatum\": {},\n   \"documentnummer\": \"09.0898\",\n   \"mogelijkOnjuist\": {\n    \"naam\": \"<boolean>\",\n    \"geometrie\": \"<boolean>\",\n    \"status\": \"<boolean>\",\n    \"toelichting\": [\n     \"Woonplaats bestaat mogelijk niet.\",\n     \"Woonplaats bestaat mogelijk niet.\"\n    ]\n   },\n   \"_links\": {\n    \"self\": {\n     \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n     \"templated\": \"<boolean>\",\n     \"title\": \"<string>\"\n    }\n   }\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "adresseerbareobjecten",
					"item": [
						{
							"name": "vindt verblijfsobjecten, ligplaatsen, standplaatsen",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									},
									{
										"key": "Accept-Crs",
										"value": "epsg:28992",
										"description": "Gewenste CRS van de coördinaten in de response."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0014100022188747",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adresseerbareobjecten"
									],
									"query": [
										{
											"key": "nummeraanduidingIdentificatie",
											"value": "<string>",
											"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
											"disabled": true
										},
										{
											"key": "pandIdentificatie",
											"value": "0014100022188747",
											"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
										},
										{
											"key": "expand",
											"value": "<string>",
											"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"description": "Pagina nummer",
											"disabled": true
										},
										{
											"key": "pageSize",
											"value": "20",
											"disabled": true
										}
									]
								},
								"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature)."
							},
							"response": [
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"_embedded\": {\n  \"adresseerbareObjecten\": [\n   {\n    \"identificatie\": \"0226010000038820\",\n    \"domein\": \"<string>\",\n    \"type\": \"<string>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"19SZ2048\",\n    \"gebruiksdoelen\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"geconstateerd\": \"<boolean>\",\n    \"geometrie\": {\n     \"punt\": {\n      \"coordinates\": [\n       \"<number>\",\n       \"<number>\"\n      ],\n      \"type\": \"<string>\"\n     },\n     \"vlak\": {\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ],\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ],\n      \"type\": \"<string>\"\n     }\n    },\n    \"pandIdentificaties\": [\n     \"0226100000008856\",\n     \"0226100000008856\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"oppervlakte\": \"<integer>\",\n    \"status\": \"<string>\",\n    \"mogelijkOnjuist\": {\n     \"gebruiksdoelen\": \"<boolean>\",\n     \"geometrie\": \"<boolean>\",\n     \"nummeraanduidingIdentificaties\": \"<boolean>\",\n     \"pandIdentificaties\": \"<boolean>\",\n     \"oppervlakte\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Locatie/contour mogelijk onjuist.\",\n      \"Locatie/contour mogelijk onjuist.\"\n     ]\n    },\n    \"_links\": {\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"panden\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     }\n    },\n    \"_embedded\": {\n     \"adressen\": [\n      {\n       \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n       \"huisnummer\": 1,\n       \"huisletter\": \"A\",\n       \"huisnummertoevoeging\": \"bis\",\n       \"postcode\": \"6922KZ\",\n       \"woonplaats\": \"Duiven\",\n       \"korteNaam\": \"Ln vd l D-Westervoort\",\n       \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n       \"openbareRuimteIdentificatie\": \"0226300000136166\",\n       \"woonplaatsIdentificatie\": \"2096\",\n       \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n       \"pandIdentificaties\": [\n        \"0226100000008856\",\n        \"0226100000008856\"\n       ],\n       \"isNevenadres\": \"<boolean>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"mogelijkOnjuist\": {\n        \"korteNaam\": \"<boolean>\",\n        \"straat\": \"<boolean>\",\n        \"huisnummer\": \"<boolean>\",\n        \"huisletter\": \"<boolean>\",\n        \"huisnummertoevoeging\": \"<boolean>\",\n        \"postcode\": \"<boolean>\",\n        \"woonplaats\": \"<boolean>\",\n        \"nummeraanduidingIdentificatie\": \"<boolean>\",\n        \"openbareRuimteIdentificatie\": \"<boolean>\",\n        \"woonplaatsIdentificatie\": \"<boolean>\",\n        \"toelichting\": [\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"openbareRuimte\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"nummeraanduiding\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"woonplaats\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adresseerbaarObject\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"panden\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      },\n      {\n       \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n       \"huisnummer\": 1,\n       \"huisletter\": \"A\",\n       \"huisnummertoevoeging\": \"bis\",\n       \"postcode\": \"6922KZ\",\n       \"woonplaats\": \"Duiven\",\n       \"korteNaam\": \"Ln vd l D-Westervoort\",\n       \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n       \"openbareRuimteIdentificatie\": \"0226300000136166\",\n       \"woonplaatsIdentificatie\": \"2096\",\n       \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n       \"pandIdentificaties\": [\n        \"0226100000008856\",\n        \"0226100000008856\"\n       ],\n       \"isNevenadres\": \"<boolean>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"mogelijkOnjuist\": {\n        \"korteNaam\": \"<boolean>\",\n        \"straat\": \"<boolean>\",\n        \"huisnummer\": \"<boolean>\",\n        \"huisletter\": \"<boolean>\",\n        \"huisnummertoevoeging\": \"<boolean>\",\n        \"postcode\": \"<boolean>\",\n        \"woonplaats\": \"<boolean>\",\n        \"nummeraanduidingIdentificatie\": \"<boolean>\",\n        \"openbareRuimteIdentificatie\": \"<boolean>\",\n        \"woonplaatsIdentificatie\": \"<boolean>\",\n        \"toelichting\": [\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"openbareRuimte\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"nummeraanduiding\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"woonplaats\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adresseerbaarObject\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"panden\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      }\n     ],\n     \"panden\": [\n      {\n       \"identificatie\": \"<string>\",\n       \"domein\": \"<string>\",\n       \"geometrie\": {\n        \"coordinates\": [\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ],\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ]\n        ],\n        \"type\": \"<string>\"\n       },\n       \"oorspronkelijkBouwjaar\": 1991,\n       \"status\": \"<string>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"documentdatum\": {},\n       \"documentnummer\": \"09.BW.0273\",\n       \"adresseerbaarObjectIdentificaties\": [\n        \"0226010000038820\",\n        \"0226010000038820\"\n       ],\n       \"nummeraanduidingIdentificaties\": [\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        },\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        }\n       ],\n       \"mogelijkOnjuist\": {\n        \"geometrie\": \"<boolean>\",\n        \"oorspronkelijkBouwjaar\": \"<boolean>\",\n        \"status\": \"<boolean>\",\n        \"toelichting\": [\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adressen\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ],\n        \"adresseerbareObjecten\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      },\n      {\n       \"identificatie\": \"<string>\",\n       \"domein\": \"<string>\",\n       \"geometrie\": {\n        \"coordinates\": [\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ],\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ]\n        ],\n        \"type\": \"<string>\"\n       },\n       \"oorspronkelijkBouwjaar\": 1991,\n       \"status\": \"<string>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"documentdatum\": {},\n       \"documentnummer\": \"09.BW.0273\",\n       \"adresseerbaarObjectIdentificaties\": [\n        \"0226010000038820\",\n        \"0226010000038820\"\n       ],\n       \"nummeraanduidingIdentificaties\": [\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        },\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        }\n       ],\n       \"mogelijkOnjuist\": {\n        \"geometrie\": \"<boolean>\",\n        \"oorspronkelijkBouwjaar\": \"<boolean>\",\n        \"status\": \"<boolean>\",\n        \"toelichting\": [\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adressen\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ],\n        \"adresseerbareObjecten\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      }\n     ]\n    }\n   },\n   {\n    \"identificatie\": \"0226010000038820\",\n    \"domein\": \"<string>\",\n    \"type\": \"<string>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"19SZ2048\",\n    \"gebruiksdoelen\": [\n     \"<string>\",\n     \"<string>\"\n    ],\n    \"geconstateerd\": \"<boolean>\",\n    \"geometrie\": {\n     \"punt\": {\n      \"coordinates\": [\n       \"<number>\",\n       \"<number>\"\n      ],\n      \"type\": \"<string>\"\n     },\n     \"vlak\": {\n      \"coordinates\": [\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ],\n       [\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ],\n        [\n         \"<number>\",\n         \"<number>\"\n        ]\n       ]\n      ],\n      \"type\": \"<string>\"\n     }\n    },\n    \"pandIdentificaties\": [\n     \"0226100000008856\",\n     \"0226100000008856\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"oppervlakte\": \"<integer>\",\n    \"status\": \"<string>\",\n    \"mogelijkOnjuist\": {\n     \"gebruiksdoelen\": \"<boolean>\",\n     \"geometrie\": \"<boolean>\",\n     \"nummeraanduidingIdentificaties\": \"<boolean>\",\n     \"pandIdentificaties\": \"<boolean>\",\n     \"oppervlakte\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Locatie/contour mogelijk onjuist.\",\n      \"Locatie/contour mogelijk onjuist.\"\n     ]\n    },\n    \"_links\": {\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"panden\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     }\n    },\n    \"_embedded\": {\n     \"adressen\": [\n      {\n       \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n       \"huisnummer\": 1,\n       \"huisletter\": \"A\",\n       \"huisnummertoevoeging\": \"bis\",\n       \"postcode\": \"6922KZ\",\n       \"woonplaats\": \"Duiven\",\n       \"korteNaam\": \"Ln vd l D-Westervoort\",\n       \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n       \"openbareRuimteIdentificatie\": \"0226300000136166\",\n       \"woonplaatsIdentificatie\": \"2096\",\n       \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n       \"pandIdentificaties\": [\n        \"0226100000008856\",\n        \"0226100000008856\"\n       ],\n       \"isNevenadres\": \"<boolean>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"mogelijkOnjuist\": {\n        \"korteNaam\": \"<boolean>\",\n        \"straat\": \"<boolean>\",\n        \"huisnummer\": \"<boolean>\",\n        \"huisletter\": \"<boolean>\",\n        \"huisnummertoevoeging\": \"<boolean>\",\n        \"postcode\": \"<boolean>\",\n        \"woonplaats\": \"<boolean>\",\n        \"nummeraanduidingIdentificatie\": \"<boolean>\",\n        \"openbareRuimteIdentificatie\": \"<boolean>\",\n        \"woonplaatsIdentificatie\": \"<boolean>\",\n        \"toelichting\": [\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"openbareRuimte\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"nummeraanduiding\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"woonplaats\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adresseerbaarObject\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"panden\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      },\n      {\n       \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n       \"huisnummer\": 1,\n       \"huisletter\": \"A\",\n       \"huisnummertoevoeging\": \"bis\",\n       \"postcode\": \"6922KZ\",\n       \"woonplaats\": \"Duiven\",\n       \"korteNaam\": \"Ln vd l D-Westervoort\",\n       \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n       \"openbareRuimteIdentificatie\": \"0226300000136166\",\n       \"woonplaatsIdentificatie\": \"2096\",\n       \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n       \"pandIdentificaties\": [\n        \"0226100000008856\",\n        \"0226100000008856\"\n       ],\n       \"isNevenadres\": \"<boolean>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"mogelijkOnjuist\": {\n        \"korteNaam\": \"<boolean>\",\n        \"straat\": \"<boolean>\",\n        \"huisnummer\": \"<boolean>\",\n        \"huisletter\": \"<boolean>\",\n        \"huisnummertoevoeging\": \"<boolean>\",\n        \"postcode\": \"<boolean>\",\n        \"woonplaats\": \"<boolean>\",\n        \"nummeraanduidingIdentificatie\": \"<boolean>\",\n        \"openbareRuimteIdentificatie\": \"<boolean>\",\n        \"woonplaatsIdentificatie\": \"<boolean>\",\n        \"toelichting\": [\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n         \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"openbareRuimte\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"nummeraanduiding\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"woonplaats\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adresseerbaarObject\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"panden\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      }\n     ],\n     \"panden\": [\n      {\n       \"identificatie\": \"<string>\",\n       \"domein\": \"<string>\",\n       \"geometrie\": {\n        \"coordinates\": [\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ],\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ]\n        ],\n        \"type\": \"<string>\"\n       },\n       \"oorspronkelijkBouwjaar\": 1991,\n       \"status\": \"<string>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"documentdatum\": {},\n       \"documentnummer\": \"09.BW.0273\",\n       \"adresseerbaarObjectIdentificaties\": [\n        \"0226010000038820\",\n        \"0226010000038820\"\n       ],\n       \"nummeraanduidingIdentificaties\": [\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        },\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        }\n       ],\n       \"mogelijkOnjuist\": {\n        \"geometrie\": \"<boolean>\",\n        \"oorspronkelijkBouwjaar\": \"<boolean>\",\n        \"status\": \"<boolean>\",\n        \"toelichting\": [\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adressen\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ],\n        \"adresseerbareObjecten\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      },\n      {\n       \"identificatie\": \"<string>\",\n       \"domein\": \"<string>\",\n       \"geometrie\": {\n        \"coordinates\": [\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ],\n         [\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ],\n          [\n           \"<number>\",\n           \"<number>\"\n          ]\n         ]\n        ],\n        \"type\": \"<string>\"\n       },\n       \"oorspronkelijkBouwjaar\": 1991,\n       \"status\": \"<string>\",\n       \"geconstateerd\": \"<boolean>\",\n       \"documentdatum\": {},\n       \"documentnummer\": \"09.BW.0273\",\n       \"adresseerbaarObjectIdentificaties\": [\n        \"0226010000038820\",\n        \"0226010000038820\"\n       ],\n       \"nummeraanduidingIdentificaties\": [\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        },\n        {\n         \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n         \"isNevenadres\": \"<boolean>\"\n        }\n       ],\n       \"mogelijkOnjuist\": {\n        \"geometrie\": \"<boolean>\",\n        \"oorspronkelijkBouwjaar\": \"<boolean>\",\n        \"status\": \"<boolean>\",\n        \"toelichting\": [\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n         \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n        ]\n       },\n       \"_links\": {\n        \"self\": {\n         \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n         \"templated\": \"<boolean>\",\n         \"title\": \"<string>\"\n        },\n        \"adressen\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ],\n        \"adresseerbareObjecten\": [\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         },\n         {\n          \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n          \"templated\": \"<boolean>\",\n          \"title\": \"<string>\"\n         }\n        ]\n       }\n      }\n     ]\n    }\n   }\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"first\": {\n   \"href\": \"/resourcenaam?page=1\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Eerste pagina\"\n  },\n  \"previous\": {\n   \"href\": \"/resourcenaam?page=3\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Vorige pagina\"\n  },\n  \"next\": {\n   \"href\": \"/resourcenaam?page=5\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Volgende pagina\"\n  },\n  \"last\": {\n   \"href\": \"/resourcenaam?page=8\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"Laatste pagina\"\n  }\n }\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0226200000038923&pandIdentificatie=0226100000008856&expand=<string>&fields=<string>&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0226200000038923"
												},
												{
													"key": "pandIdentificatie",
													"value": "0226100000008856"
												},
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								}
							]
						},
						{
							"name": "levert een verblijfsobject, standplaats of ligplaats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen.",
										"disabled": true
									},
									{
										"key": "Accept-Crs",
										"value": "epsg:28992",
										"description": "Gewenste CRS van de coördinaten in de response."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adresseerbareobjecten",
										":adresseerbaarobjectidentificatie"
									],
									"query": [
										{
											"key": "expand",
											"value": "<string>",
											"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "adresseerbaarobjectidentificatie",
											"value": "0226010000038820",
											"description": "(Required) De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
										}
									]
								},
								"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature)."
							},
							"response": [
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"0226010000038820\",\n \"domein\": \"<string>\",\n \"type\": \"<string>\",\n \"documentdatum\": {},\n \"documentnummer\": \"19SZ2048\",\n \"gebruiksdoelen\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"geconstateerd\": \"<boolean>\",\n \"geometrie\": {\n  \"punt\": {\n   \"coordinates\": [\n    \"<number>\",\n    \"<number>\"\n   ],\n   \"type\": \"<string>\"\n  },\n  \"vlak\": {\n   \"coordinates\": [\n    [\n     [\n      \"<number>\",\n      \"<number>\"\n     ],\n     [\n      \"<number>\",\n      \"<number>\"\n     ],\n     [\n      \"<number>\",\n      \"<number>\"\n     ],\n     [\n      \"<number>\",\n      \"<number>\"\n     ]\n    ],\n    [\n     [\n      \"<number>\",\n      \"<number>\"\n     ],\n     [\n      \"<number>\",\n      \"<number>\"\n     ],\n     [\n      \"<number>\",\n      \"<number>\"\n     ],\n     [\n      \"<number>\",\n      \"<number>\"\n     ]\n    ]\n   ],\n   \"type\": \"<string>\"\n  }\n },\n \"pandIdentificaties\": [\n  \"0226100000008856\",\n  \"0226100000008856\"\n ],\n \"nummeraanduidingIdentificaties\": [\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  },\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  }\n ],\n \"oppervlakte\": \"<integer>\",\n \"status\": \"<string>\",\n \"mogelijkOnjuist\": {\n  \"gebruiksdoelen\": \"<boolean>\",\n  \"geometrie\": \"<boolean>\",\n  \"nummeraanduidingIdentificaties\": \"<boolean>\",\n  \"pandIdentificaties\": \"<boolean>\",\n  \"oppervlakte\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"toelichting\": [\n   \"Locatie/contour mogelijk onjuist.\",\n   \"Locatie/contour mogelijk onjuist.\"\n  ]\n },\n \"_links\": {\n  \"adressen\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"panden\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n },\n \"_embedded\": {\n  \"adressen\": [\n   {\n    \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n    \"huisnummer\": 1,\n    \"huisletter\": \"A\",\n    \"huisnummertoevoeging\": \"bis\",\n    \"postcode\": \"6922KZ\",\n    \"woonplaats\": \"Duiven\",\n    \"korteNaam\": \"Ln vd l D-Westervoort\",\n    \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n    \"openbareRuimteIdentificatie\": \"0226300000136166\",\n    \"woonplaatsIdentificatie\": \"2096\",\n    \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n    \"pandIdentificaties\": [\n     \"0226100000008856\",\n     \"0226100000008856\"\n    ],\n    \"isNevenadres\": \"<boolean>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"mogelijkOnjuist\": {\n     \"korteNaam\": \"<boolean>\",\n     \"straat\": \"<boolean>\",\n     \"huisnummer\": \"<boolean>\",\n     \"huisletter\": \"<boolean>\",\n     \"huisnummertoevoeging\": \"<boolean>\",\n     \"postcode\": \"<boolean>\",\n     \"woonplaats\": \"<boolean>\",\n     \"nummeraanduidingIdentificatie\": \"<boolean>\",\n     \"openbareRuimteIdentificatie\": \"<boolean>\",\n     \"woonplaatsIdentificatie\": \"<boolean>\",\n     \"toelichting\": [\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"openbareRuimte\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"nummeraanduiding\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"woonplaats\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adresseerbaarObject\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"panden\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   },\n   {\n    \"straat\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n    \"huisnummer\": 1,\n    \"huisletter\": \"A\",\n    \"huisnummertoevoeging\": \"bis\",\n    \"postcode\": \"6922KZ\",\n    \"woonplaats\": \"Duiven\",\n    \"korteNaam\": \"Ln vd l D-Westervoort\",\n    \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n    \"openbareRuimteIdentificatie\": \"0226300000136166\",\n    \"woonplaatsIdentificatie\": \"2096\",\n    \"adresseerbaarObjectIdentificatie\": \"0226010000038820\",\n    \"pandIdentificaties\": [\n     \"0226100000008856\",\n     \"0226100000008856\"\n    ],\n    \"isNevenadres\": \"<boolean>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"mogelijkOnjuist\": {\n     \"korteNaam\": \"<boolean>\",\n     \"straat\": \"<boolean>\",\n     \"huisnummer\": \"<boolean>\",\n     \"huisletter\": \"<boolean>\",\n     \"huisnummertoevoeging\": \"<boolean>\",\n     \"postcode\": \"<boolean>\",\n     \"woonplaats\": \"<boolean>\",\n     \"nummeraanduidingIdentificatie\": \"<boolean>\",\n     \"openbareRuimteIdentificatie\": \"<boolean>\",\n     \"woonplaatsIdentificatie\": \"<boolean>\",\n     \"toelichting\": [\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\",\n      \"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"openbareRuimte\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"nummeraanduiding\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"woonplaats\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adresseerbaarObject\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"panden\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   }\n  ],\n  \"panden\": [\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   },\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   }\n  ]\n }\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarobjectidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarobjectidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarobjectidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "panden",
					"item": [
						{
							"name": "vindt panden",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen.",
										"disabled": true
									},
									{
										"key": "Accept-Crs",
										"value": "<string>",
										"description": "Gewenste CRS van de coördinaten in de response.",
										"disabled": true
									},
									{
										"key": "Content-Crs",
										"value": "<string>",
										"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden?locatie=118324.183,404843.509",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden"
									],
									"query": [
										{
											"key": "adresseerbaarObjectIdentificatie",
											"value": "<string>",
											"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
											"disabled": true
										},
										{
											"key": "locatie",
											"value": "118324.183,404843.509",
											"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									]
								},
								"description": "Zoek actuele panden met de identificatie van een adresseerbaar object of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n },\n \"_embedded\": {\n  \"panden\": [\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   },\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   }\n  ]\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Unsupported Media Type",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.16 415 Unsupported Media Type\",\n \"title\": \"Unsupported Media Type\",\n \"status\": 415,\n \"detail\": \"The server is refusing the request because the entity of the request is in a format not supported by the requested resource for the requested method.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"unsupported\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								}
							]
						},
						{
							"name": "vindt panden Copy",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen.",
										"disabled": true
									},
									{
										"key": "Accept-Crs",
										"value": "<string>",
										"description": "Gewenste CRS van de coördinaten in de response.",
										"disabled": true
									},
									{
										"key": "Content-Crs",
										"value": "<string>",
										"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden?locatie=118315.606,404844.967",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden"
									],
									"query": [
										{
											"key": "adresseerbaarObjectIdentificatie",
											"value": "<string>",
											"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
											"disabled": true
										},
										{
											"key": "locatie",
											"value": "118315.606,404844.967",
											"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									]
								},
								"description": "Zoek actuele panden met de identificatie van een adresseerbaar object of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n },\n \"_embedded\": {\n  \"panden\": [\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   },\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   }\n  ]\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Unsupported Media Type",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.16 415 Unsupported Media Type\",\n \"title\": \"Unsupported Media Type\",\n \"status\": 415,\n \"detail\": \"The server is refusing the request because the entity of the request is in a format not supported by the requested resource for the requested method.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"unsupported\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								}
							]
						},
						{
							"name": "vindt panden met uitsnede binnen geometrie",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen.",
										"disabled": true
									},
									{
										"key": "Accept-Crs",
										"value": "<string>",
										"description": "Gewenste CRS van de coördinaten in de response.",
										"disabled": true
									},
									{
										"key": "Content-Crs",
										"value": "<string>",
										"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden?locatie=90290,446910",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden"
									],
									"query": [
										{
											"key": "adresseerbaarObjectIdentificatie",
											"value": "<string>",
											"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
											"disabled": true
										},
										{
											"key": "locatie",
											"value": "90290,446910",
											"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									]
								},
								"description": "Zoek actuele panden met de identificatie van een adresseerbaar object of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n },\n \"_embedded\": {\n  \"panden\": [\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   },\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   }\n  ]\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Unsupported Media Type",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.16 415 Unsupported Media Type\",\n \"title\": \"Unsupported Media Type\",\n \"status\": 415,\n \"detail\": \"The server is refusing the request because the entity of the request is in a format not supported by the requested resource for the requested method.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"unsupported\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								}
							]
						},
						{
							"name": "vindt GEEN pand met uitsnede binnen uitsnede",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen.",
										"disabled": true
									},
									{
										"key": "Accept-Crs",
										"value": "<string>",
										"description": "Gewenste CRS van de coördinaten in de response.",
										"disabled": true
									},
									{
										"key": "Content-Crs",
										"value": "<string>",
										"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden?locatie=90270,446910",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden"
									],
									"query": [
										{
											"key": "adresseerbaarObjectIdentificatie",
											"value": "<string>",
											"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
											"disabled": true
										},
										{
											"key": "locatie",
											"value": "90270,446910",
											"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
										},
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									]
								},
								"description": "Zoek actuele panden met de identificatie van een adresseerbaar object of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n },\n \"_embedded\": {\n  \"panden\": [\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   },\n   {\n    \"identificatie\": \"<string>\",\n    \"domein\": \"<string>\",\n    \"geometrie\": {\n     \"coordinates\": [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     \"type\": \"<string>\"\n    },\n    \"oorspronkelijkBouwjaar\": 1991,\n    \"status\": \"<string>\",\n    \"geconstateerd\": \"<boolean>\",\n    \"documentdatum\": {},\n    \"documentnummer\": \"09.BW.0273\",\n    \"adresseerbaarObjectIdentificaties\": [\n     \"0226010000038820\",\n     \"0226010000038820\"\n    ],\n    \"nummeraanduidingIdentificaties\": [\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     },\n     {\n      \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n      \"isNevenadres\": \"<boolean>\"\n     }\n    ],\n    \"mogelijkOnjuist\": {\n     \"geometrie\": \"<boolean>\",\n     \"oorspronkelijkBouwjaar\": \"<boolean>\",\n     \"status\": \"<boolean>\",\n     \"toelichting\": [\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n      \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n     ]\n    },\n    \"_links\": {\n     \"self\": {\n      \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n      \"templated\": \"<boolean>\",\n      \"title\": \"<string>\"\n     },\n     \"adressen\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ],\n     \"adresseerbareObjecten\": [\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      },\n      {\n       \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n       \"templated\": \"<boolean>\",\n       \"title\": \"<string>\"\n      }\n     ]\n    }\n   }\n  ]\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Unsupported Media Type",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Unsupported Media Type",
									"code": 415,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.16 415 Unsupported Media Type\",\n \"title\": \"Unsupported Media Type\",\n \"status\": 415,\n \"detail\": \"The server is refusing the request because the entity of the request is in a format not supported by the requested resource for the requested method.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"unsupported\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"key": "Content-Crs",
												"value": "<string>",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0226010000038820&locatie=196733.51,439931.89&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0226010000038820"
												},
												{
													"key": "locatie",
													"value": "196733.51,439931.89"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								}
							]
						},
						{
							"name": "levert een pand",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									},
									{
										"key": "Accept-Crs",
										"value": "epsg:28992",
										"description": "Gewenste CRS van de coördinaten in de response."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden/:pandidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden",
										":pandidentificatie"
									],
									"query": [
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "pandidentificatie",
											"value": "0826100000036344",
											"description": "(Required) Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
										}
									]
								},
								"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"<string>\",\n \"domein\": \"<string>\",\n \"geometrie\": {\n  \"coordinates\": [\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ],\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ]\n  ],\n  \"type\": \"<string>\"\n },\n \"oorspronkelijkBouwjaar\": 1991,\n \"status\": \"<string>\",\n \"geconstateerd\": \"<boolean>\",\n \"documentdatum\": {},\n \"documentnummer\": \"09.BW.0273\",\n \"adresseerbaarObjectIdentificaties\": [\n  \"0226010000038820\",\n  \"0226010000038820\"\n ],\n \"nummeraanduidingIdentificaties\": [\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  },\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  }\n ],\n \"mogelijkOnjuist\": {\n  \"geometrie\": \"<boolean>\",\n  \"oorspronkelijkBouwjaar\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"toelichting\": [\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"adressen\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"adresseerbareObjecten\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ]\n }\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								}
							]
						},
						{
							"name": "levert een pand Copy",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									},
									{
										"key": "Accept-Crs",
										"value": "epsg:28992",
										"description": "Gewenste CRS van de coördinaten in de response."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden/:pandidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden",
										":pandidentificatie"
									],
									"query": [
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "pandidentificatie",
											"value": "0518100000218030",
											"description": "(Required) Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
										}
									]
								},
								"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"<string>\",\n \"domein\": \"<string>\",\n \"geometrie\": {\n  \"coordinates\": [\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ],\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ]\n  ],\n  \"type\": \"<string>\"\n },\n \"oorspronkelijkBouwjaar\": 1991,\n \"status\": \"<string>\",\n \"geconstateerd\": \"<boolean>\",\n \"documentdatum\": {},\n \"documentnummer\": \"09.BW.0273\",\n \"adresseerbaarObjectIdentificaties\": [\n  \"0226010000038820\",\n  \"0226010000038820\"\n ],\n \"nummeraanduidingIdentificaties\": [\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  },\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  }\n ],\n \"mogelijkOnjuist\": {\n  \"geometrie\": \"<boolean>\",\n  \"oorspronkelijkBouwjaar\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"toelichting\": [\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"adressen\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"adresseerbareObjecten\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ]\n }\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								}
							]
						},
						{
							"name": "levert een pand met uitsnede",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									},
									{
										"key": "Accept-Crs",
										"value": "epsg:28992",
										"description": "Gewenste CRS van de coördinaten in de response."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden/:pandidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden",
										":pandidentificatie"
									],
									"query": [
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "pandidentificatie",
											"value": "1926100000495231",
											"description": "(Required) Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
										}
									]
								},
								"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"<string>\",\n \"domein\": \"<string>\",\n \"geometrie\": {\n  \"coordinates\": [\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ],\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ]\n  ],\n  \"type\": \"<string>\"\n },\n \"oorspronkelijkBouwjaar\": 1991,\n \"status\": \"<string>\",\n \"geconstateerd\": \"<boolean>\",\n \"documentdatum\": {},\n \"documentnummer\": \"09.BW.0273\",\n \"adresseerbaarObjectIdentificaties\": [\n  \"0226010000038820\",\n  \"0226010000038820\"\n ],\n \"nummeraanduidingIdentificaties\": [\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  },\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  }\n ],\n \"mogelijkOnjuist\": {\n  \"geometrie\": \"<boolean>\",\n  \"oorspronkelijkBouwjaar\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"toelichting\": [\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"adressen\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"adresseerbareObjecten\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ]\n }\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								}
							]
						},
						{
							"name": "levert een pand Copy 3",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									},
									{
										"key": "Accept-Crs",
										"value": "epsg:28992",
										"description": "Gewenste CRS van de coördinaten in de response."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/panden/:pandidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"panden",
										":pandidentificatie"
									],
									"query": [
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "pandidentificatie",
											"value": "1926100000493892",
											"description": "(Required) Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
										}
									]
								},
								"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)."
							},
							"response": [
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"<string>\",\n \"domein\": \"<string>\",\n \"geometrie\": {\n  \"coordinates\": [\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ],\n   [\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ],\n    [\n     \"<number>\",\n     \"<number>\"\n    ]\n   ]\n  ],\n  \"type\": \"<string>\"\n },\n \"oorspronkelijkBouwjaar\": 1991,\n \"status\": \"<string>\",\n \"geconstateerd\": \"<boolean>\",\n \"documentdatum\": {},\n \"documentnummer\": \"09.BW.0273\",\n \"adresseerbaarObjectIdentificaties\": [\n  \"0226010000038820\",\n  \"0226010000038820\"\n ],\n \"nummeraanduidingIdentificaties\": [\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  },\n  {\n   \"nummeraanduidingIdentificatie\": \"0226200000038923\",\n   \"isNevenadres\": \"<boolean>\"\n  }\n ],\n \"mogelijkOnjuist\": {\n  \"geometrie\": \"<boolean>\",\n  \"oorspronkelijkBouwjaar\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"toelichting\": [\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\",\n   \"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"adressen\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ],\n  \"adresseerbareObjecten\": [\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   },\n   {\n    \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n    \"templated\": \"<boolean>\",\n    \"title\": \"<string>\"\n   }\n  ]\n }\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "pandidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "woonplaatsen",
					"item": [
						{
							"name": "levert BAG details van een woonplaats",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									},
									{
										"key": "Accept-Crs",
										"value": "epsg:28992",
										"description": "Gewenste CRS van de coördinaten in de response."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie&fields=naam",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"woonplaatsen",
										":woonplaatsidentificatie"
									],
									"query": [
										{
											"key": "expand",
											"value": "geometrie",
											"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature)."
										},
										{
											"key": "fields",
											"value": "naam",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)"
										}
									],
									"variable": [
										{
											"key": "woonplaatsidentificatie",
											"value": "2807",
											"description": "(Required) Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
										}
									]
								},
								"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature)."
							},
							"response": [
								{
									"name": "Precondition failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Precondition Failed",
									"code": 412,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.13 412 Precondition Failed\",\n \"title\": \"Precondition Failed\",\n \"status\": 412,\n \"detail\": \"The precondition given in one or more of the request-header fields evaluated to false when it was tested on the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"preconditionFailed\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Crs",
											"value": "<string>",
											"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"<string>\",\n \"domein\": \"<string>\",\n \"naam\": \"Duiven\",\n \"status\": \"<string>\",\n \"geconstateerd\": \"<boolean>\",\n \"documentdatum\": {},\n \"documentnummer\": \"09.0898\",\n \"mogelijkOnjuist\": {\n  \"naam\": \"<boolean>\",\n  \"geometrie\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"toelichting\": [\n   \"Woonplaats bestaat mogelijk niet.\",\n   \"Woonplaats bestaat mogelijk niet.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n },\n \"_embedded\": {\n  \"geometrie\": {\n   \"vlak\": {\n    \"coordinates\": [\n     [\n      [\n       \"<number>\",\n       \"<number>\"\n      ],\n      [\n       \"<number>\",\n       \"<number>\"\n      ],\n      [\n       \"<number>\",\n       \"<number>\"\n      ],\n      [\n       \"<number>\",\n       \"<number>\"\n      ]\n     ],\n     [\n      [\n       \"<number>\",\n       \"<number>\"\n      ],\n      [\n       \"<number>\",\n       \"<number>\"\n      ],\n      [\n       \"<number>\",\n       \"<number>\"\n      ],\n      [\n       \"<number>\",\n       \"<number>\"\n      ]\n     ]\n    ],\n    \"type\": \"<string>\"\n   },\n   \"multivlak\": {\n    \"coordinates\": [\n     [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ],\n     [\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ],\n      [\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ],\n       [\n        \"<number>\",\n        \"<number>\"\n       ]\n      ]\n     ]\n    ],\n    \"type\": \"<string>\"\n   }\n  }\n }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "<string>",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=<string>&fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "<string>"
												},
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "openbareruimten",
					"item": [
						{
							"name": "levert BAG detals van een openbare ruimte",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"openbareruimten",
										":openbareruimteidentificatie"
									],
									"query": [
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "openbareruimteidentificatie",
											"value": "0518300000202456",
											"description": "(Required) Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
										}
									]
								},
								"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)"
							},
							"response": [
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"<string>\",\n \"domein\": \"<string>\",\n \"naam\": \"Laan van de landinrichtingscommissie Duiven-Westervoort\",\n \"type\": \"<string>\",\n \"status\": \"<string>\",\n \"korteNaam\": \"Ln vd l D-Westervoort\",\n \"geconstateerd\": \"<boolean>\",\n \"documentdatum\": {},\n \"documentnummer\": \"BAG-21\",\n \"woonplaatsIdentificatie\": \"2096\",\n \"mogelijkOnjuist\": {\n  \"naam\": \"<boolean>\",\n  \"korteNaam\": \"<boolean>\",\n  \"type\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"woonplaatsIdentificatie\": \"<boolean>\",\n  \"toelichting\": [\n   \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\",\n   \"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"woonplaats\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareruimteidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareruimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "openbareruimteidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "nummeraanduidingen",
					"item": [
						{
							"name": "levert BAG details van een nummeraanduiding",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "De API-key die je hebt gekregen dient bij elke request via de `X-Api-Key` request header meegestuurd te worden. Indien deze niet juist wordt meegestuurd, of het een ongeldige key betreft, zul je de foutmelding `403 Forbidden` terugkrijgen."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"nummeraanduidingen",
										":nummeraanduidingidentificatie"
									],
									"query": [
										{
											"key": "fields",
											"value": "<string>",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "nummeraanduidingidentificatie",
											"value": "0599200000193766",
											"description": "(Required) Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
										}
									]
								},
								"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)"
							},
							"response": [
								{
									"name": "Not Acceptable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.7 406 Not Acceptable\",\n \"title\": \"Gevraagde contenttype wordt niet ondersteund.\",\n \"status\": 406,\n \"detail\": \"The resource identified by the request is only capable of generating response entities which have content characteristics not acceptable according to thr accept headers sent in the request\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAcceptable\"\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.4 403 Forbidden\",\n \"title\": \"U bent niet geautoriseerd voor deze operatie.\",\n \"status\": 403,\n \"detail\": \"The server understood the request, but is refusing to fulfill it.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"autorisation\"\n}"
								},
								{
									"name": "Internal Server Error",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.1 500 Internal server error\",\n \"title\": \"Interne server fout.\",\n \"status\": 500,\n \"detail\": \"The server encountered an unexpected condition which prevented it from fulfilling the request.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"serverError\"\n}"
								},
								{
									"name": "Geslaagd",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "warning",
											"value": "299 https://service.../api/.../v1 \"Deze versie van de API is verouderd en zal uit dienst worden genomen op 2018-02-01. Raadpleeg voor meer informatie hier de documentatie: https://omgevingswet.../api/.../v1\".",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/hal+json"
										}
									],
									"cookie": [],
									"body": "{\n \"identificatie\": \"<string>\",\n \"domein\": \"<string>\",\n \"huisnummer\": 1,\n \"huisletter\": \"A\",\n \"huisnummertoevoeging\": \"bis\",\n \"postcode\": \"6922KZ\",\n \"status\": \"<string>\",\n \"geconstateerd\": \"<boolean>\",\n \"documentdatum\": {},\n \"documentnummer\": \"Duiven 25112019\",\n \"woonplaatsIdentificatie\": \"2096\",\n \"openbareRuimteIdentificatie\": \"0226300000136166\",\n \"mogelijkOnjuist\": {\n  \"huisnummer\": \"<boolean>\",\n  \"huisletter\": \"<boolean>\",\n  \"huisnummertoevoeging\": \"<boolean>\",\n  \"postcode\": \"<boolean>\",\n  \"status\": \"<boolean>\",\n  \"woonplaatsIdentificatie\": \"<boolean>\",\n  \"openbareRuimteIdentificatie\": \"<boolean>\",\n  \"toelichting\": [\n   \"Woonplaats bestaat mogelijk niet.\",\n   \"Woonplaats bestaat mogelijk niet.\"\n  ]\n },\n \"_links\": {\n  \"self\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"adres\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"openbareRuimte\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  },\n  \"woonplaats\": {\n   \"href\": \"https://datapunt.voorbeeldgemeente.nl/api/v{major-versie}/resourcename/{resource-identificatie}\",\n   \"templated\": \"<boolean>\",\n   \"title\": \"<string>\"\n  }\n }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.1 400 Bad Request\",\n \"title\": \"Ten minste één parameter moet worden opgegeven.\",\n \"status\": 400,\n \"detail\": \"The request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modification.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"paramsRequired\",\n \"invalidParams\": [\n  {\n   \"type\": \"https://www.vng.nl/realisatie/api/validaties/integer\",\n   \"name\": \"verblijfplaats__huisnummer\",\n   \"code\": \"integer\",\n   \"reason\": \"Waarde is geen geldige integer.\"\n  }\n ]\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.2 401 Unauthorized\",\n \"title\": \"Niet correct geauthenticeerd.\",\n \"status\": 401,\n \"detail\": \"The request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"authentication\"\n}"
								},
								{
									"name": "Er is een onverwachte fout opgetreden",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"<uri>\",\n \"title\": \"<string>\",\n \"status\": \"<integer>\",\n \"detail\": \"<string>\",\n \"instance\": \"<uri>\",\n \"code\": \"<string>\"\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.4.5 404 Not Found\",\n \"title\": \"Opgevraagde resource bestaat niet.\",\n \"status\": 404,\n \"detail\": \"The server has not found anything matching the Request-URI.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notFound\"\n}"
								},
								{
									"name": "Service Unavailable",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingidentificatie?fields=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingidentificatie"
												}
											]
										}
									},
									"status": "Service Unavailable",
									"code": 503,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "api-version",
											"value": "1.0.0",
											"description": ""
										},
										{
											"key": "Content-Type",
											"value": "application/problem+json"
										}
									],
									"cookie": [],
									"body": "{\n \"type\": \"https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#/10.5.4 503 Service Unavailable\",\n \"title\": \"Bronservice {bron} is tijdelijk niet beschikbaar.\",\n \"status\": 503,\n \"detail\": \"The service is currently unable to handle the request due to a temporary overloading or maintenance of the server.\",\n \"instance\": \"https://datapunt.voorbeeldgemeente.nl/api/v1/resourcenaam?parameter=waarde\",\n \"code\": \"notAvailable\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "testsuites",
			"item": [
				{
					"name": "/adressen/zoek",
					"item": [
						{
							"name": "zoeken",
							"item": [
								{
									"name": "Geen resultaat",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=bestaatniet%20nootdorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"zoekresultaten Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'].zoekresultaten Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=bestaatniet nootdorp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "bestaatniet nootdorp",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "straatnaam + gemeentenaam",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=zorgvlietstraat%20den%20haag\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Zorgvlietstraat 1, 2513RH 's-Gravenhage\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-08421bd3beee83d8453efe1b3223ca46\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[2] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[2].omschrijving).to.eql(\"Zorgvlietstraat 4T, 's-Gravenhage\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=zorgvlietstraat den haag",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "zorgvlietstraat den haag",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "straatnaam + woonplaatsnaam",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Dorpsstraat 1, 2631CR Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-c62f82fd441faf3914195b57425a18a9\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=dorpsstraat nootdorp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "dorpsstraat nootdorp",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "straatnaam + woonplaatsnaam + huisnummer",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(18);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving 15\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Dorpsstraat 15, 2631CR Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-99a435ee2a054b66bb853883a86d1b88\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving 15b\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[1].omschrijving).to.eql(\"Dorpsstraat 15b, 2631CR Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving 15c\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[2].omschrijving).to.eql(\"Dorpsstraat 15c, 2631CR Nootdorp\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=dorpsstraat 15 nootdorp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "dorpsstraat 15 nootdorp",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "straatnaam + woonplaatsnaam + huisnummer + huisletter",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving 15c\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Dorpsstraat 15c, 2631CR Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-89d5a4d96f09c60716c4671fdb9334b8\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=dorpsstraat 15c nootdorp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "dorpsstraat 15c nootdorp",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "woonplaatsnaam + huisnummer + huisletter + straatnaam",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving 15c\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Dorpsstraat 15c, 2631CR Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-89d5a4d96f09c60716c4671fdb9334b8\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=nootdorp 15c dorpsstraat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "nootdorp 15c dorpsstraat",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "postcode",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=\" + pm.variables.get(\"zoek\"));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen/zoek?zoek=\" + pm.variables.get(\"zoek\") + \"&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Zuiderstraat 280, 2611SM Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[19] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[19].omschrijving).to.eql(\"Zuiderstraat 318, 2611SM Delft\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=2611SM",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "2611SM",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "postcode + huisnummer",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=2611SM%20296\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Zuiderstraat 296, 2611SM Delft\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=2611SM 296",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "2611SM 296",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "postcode + huisnummer met veel huisletters en huisnumertoevoegingen",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=2611SM%20296\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Vinkeloord 1, 5382JX Vinkel\");",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[1].omschrijving).to.eql(\"Vinkeloord 1-D42, 5382JX Vinkel\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=5382JX 1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "5382JX 1",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "huisnummer + postcode",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=296%202611SM\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Zuiderstraat 296, 2611SM Delft\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=296 2611SM",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "296 2611SM",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "huisnummer + huisletter + postcode",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=15c%202631CR\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Dorpsstraat 15c, 2631CR Nootdorp\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=15c 2631CR",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "15c 2631CR",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "huisnummer + huisletter + postcode Copy",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=15c%202631CR\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Dorpsstraat 15c, 2631CR Nootdorp\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=15c 2631CR",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "15c 2631CR",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "lange straatnaam",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=Baron%20Schimmelpenninck%20van%20der%20Oyelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[1] omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[1].omschrijving).to.eql(\"Baron Schimmelpenninck van der Oyelaan 3, 2252EA Voorschoten\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=Baron Schimmelpenninck van der Oyelaan",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "Baron Schimmelpenninck van der Oyelaan",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "lange straatnaam gedeeltelijk",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=baron%20schimmel%20oye\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[1].omschrijving).to.eql(\"Baron Schimmelpenninck van der Oyelaan 3, 2252EA Voorschoten\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=baron schimmel oye",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "baron schimmel oye",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "lange straatnaam + woonplaats + huisnummer",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=baron%20schimmelpenninck%20van%20der%20oyelaan%203%20voorschoten\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Baron Schimmelpenninck van der Oyelaan 3, 2252EA Voorschoten\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(8);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=baron schimmelpenninck van der oyelaan 3 voorschoten",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "baron schimmelpenninck van der oyelaan 3 voorschoten",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "verkorte lange straatnaam",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=Baron%20Schimmelpenninck%20van%20der%20Oyelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[1].omschrijving).to.eql(\"Baron Schimmelpenninck van der Oyelaan 3, 2252EA Voorschoten\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=bar vd oyelaan voorschoten",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "bar vd oyelaan voorschoten",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zonder diakriet en huisnummertoevoeging",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=belgie%201a-3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Belgiëlaan 1A-3, 2391PH Hazerswoude-Dorp\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=belgie 1a-3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "belgie 1a-3",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "met diakriet",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=belgi%C3%AB%201a-3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Belgiëlaan 1A-3, 2391PH Hazerswoude-Dorp\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=belgië 1a-3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "belgië 1a-3",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "met hoofdletter diakriet",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=hazerswoude-dorp%20beLgi%C3%8B%201A%203\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Belgiëlaan 1A-3, 2391PH Hazerswoude-Dorp\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=hazerswoude-dorp beLgiË 1A 3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "hazerswoude-dorp beLgiË 1A 3",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "lange straatnaam 2",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [omschrijving]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['zoekresultaten'][0]['omschrijving']).to.eql(\"Laan van de landinrichtingscommissie Duiven-Westervoort 1, 6922KZ Duiven\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=landinrichtingscommissie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "landinrichtingscommissie",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoek zonder zoekwaarde",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"_links.self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"pm.test(\"_links.next existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.last existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"zoekresultaten existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.zoekresultaten).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_embedded is empty object\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded).to.eql({});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=&pageSize=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "5"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoek met extreem lange zoekwaarde",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"_links.self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=Lorem%20ipsum%20dolor%20sit%20amet,%20consectetur%20adipiscing%20elit.%20Cras%20tempor%20eros%20pulvinar%20posuere%20posuere.%20Vivamus%20facilisis%20consequat%20nibh,%20id%20dictum%20mauris%20euismod%20vitae.%20Praesent%20vel%20ante%20placerat,%20malesuada%20velit%20eu,%20iaculis%20felis.%20Vivamus%20a%20ipsum%20sodales%20purus%20pulvinar%20consequat.%20Nunc%20ullamcorper%20interdum%20justo.%20Quisque%20bibendum%20est%20velit,%20vitae%20egestas%20nulla%20ultrices%20vel.%20Maecenas%20sed%20nisl%20mi.%20Suspendisse%20volutpat%20leo%20ac%20ultrices%20imperdiet.%20Vestibulum%20posuere%20congue%20magna%20sed%20hendrerit.%20Sed%20sapien%20tellus,%20pharetra%20id%20mauris%20in,%20viverra%20dapibus%20est.%20Duis%20eget%20condimentum%20urna.%20Suspendisse%20sed%20egestas%20turpis,%20sed%20scelerisque%20arcu.%20Donec%20eu%20neque%20turpis.%20Curabitur%20tristique%20sit%20amet%20nisl%20eget%20efficitur.%20Cras%20eros%20sem,%20molestie%20nec%20ultricies%20ut,%20feugiat%20vitae%20nisl.%20Donec%20eros%20eros,%20fringilla%20nec%20ultricies%20non,%20ultrices%20eget%20enim.%20Curabitur%20vel%20tortor%20eu%20quam%20accumsan%20molestie%20luctus%20pellentesque%20quam.%20Sed%20risus%20felis,%20euismod%20vel%20est%20sed,%20condimentum%20lacinia%20enim.%20Mauris%20luctus%20erat%20quis%20nibh%20eleifend,%20elementum%20fermentum%20ipsum%20suscipit.%20Praesent%20posuere%20vulputate%20erat,%20vitae%20scelerisque%20lectus%20accumsan%20a.%20Ut%20elementum%20cursus%20velit%20ut%20tempor.%20Proin%20fringilla,%20ex%20eu%20ornare%20vestibulum,%20massa%20neque%20sagittis%20lorem,%20vel%20eleifend%20libero%20libero%20a%20enim.%20Donec%20ipsum%20augue,%20euismod%20sed%20nisi%20et,%20lacinia%20suscipit%20tortor.%20Vivamus%20suscipit%20diam%20enim,%20mattis%20sollicitudin%20felis%20elementum%20mollis.%20Aliquam%20rutrum%20lacus%20ac%20dictum%20euismod.%20Lorem%20ipsum%20dolor%20sit%20amet,%20consectetur%20adipiscing%20elit.%20Fusce%20auctor%20at%20enim%20in%20commodo.%20Proin%20dictum,%20est%20vel%20finibus%20posuere,%20lectus%20metus%20rutrum%20mauris,%20a%20pulvinar%20sapien%20dolor%20id%20purus.%20Morbi%20at%20ultricies%20nunc.%20Nullam%20ligula%20odio,%20faucibus%20id%20urna%20sed,%20efficitur%20dignissim%20eros.%20Donec%20fermentum%20odio%20vel%20mauris%20varius%20tempus.%20Fusce%20sodales%20eleifend%20leo,%20et%20commodo%20ex%20consequat%20eu.%20Pellentesque%20habitant%20morbi%20tristique%20senectus%20et%20netus%20et%20malesuada%20fames%20ac%20turpis%20egestas.%20Nullam%20ullamcorper%20nisi%20risus,%20in%20mollis%20ipsum%20commodo%20eget.%20Nunc%20a%20consequat%20purus,%20sit%20amet%20viverra%20sapien.%20Curabitur%20commodo%20nunc%20sit%20amet%20nibh%20maximus%20tincidunt.%20Vestibulum%20hendrerit%20justo%20felis,%20eu%20aliquet%20erat%20semper%20sed.%20Etiam%20vel%20ultrices%20ipsum.%20Maecenas%20quis%20libero%20ac%20dui%20tempus%20cursus.%20Ut%20porta%20semper%20urna%20id%20finibus.%20Nulla%20tincidunt%20tristique%20arcu,%20ac%20sodales%20ex%20pellentesque%20nec.%20Pellentesque%20tincidunt%20metus%20enim,%20sed%20gravida%20metus%20rutrum%20at.%20Nullam%20massa%20erat,%20consequat%20vel%20tristique%20id,%20lacinia%20id%20nibh.%20Aliquam%20tempor%20est%20quis%20quam%20commodo%20vulputate.%20Sed%20interdum,%20mi%20ac%20sollicitudin%20convallis,%20dolor%20erat%20tincidunt%20ex,%20et%20aliquam%20erat%20felis%20congue%20nibh.%20Cras%20posuere%20purus%20quis%20justo%20fermentum,%20in%20auctor%20sem%20egestas.%20Proin%20ullamcorper%20lacus%20eget%20tellus%20euismod,%20sit%20amet%20maximus%20ante%20accumsan.%20Morbi%20sed%20odio%20vel%20ipsum%20aliquam%20sagittis.%20Nulla%20at%20ullamcorper%20massa.%20Sed%20id%20tempor%20urna,%20non%20luctus%20dolor.%20Nulla%20nulla%20mauris,%20lobortis%20at%20odio%20in,%20sollicitudin%20auctor%20elit.%20Praesent%20sollicitudin%20metus%20at%20condimentum%20molestie.%20Integer%20eu%20sapien%20interdum,%20elementum%20mi%20sit%20amet,%20euismod%20neque.%20Praesent%20dui%20lorem,%20sodales%20at%20nisi%20in,%20lobortis%20faucibus%20sem.%20Phasellus%20pharetra%20vitae%20magna%20ultricies%20feugiat.%20Sed%20scelerisque%20consectetur%20facilisis.%20Maecenas%20tristique%20convallis%20mattis.%20Aenean%20suscipit%20id%20eros%20eu%20mattis.%20Nunc%20a%20lectus%20eu%20felis%20lobortis%20malesuada.%20Pellentesque%20imperdiet%20laoreet%20iaculis.%20Vestibulum%20vestibulum%20finibus%20tristique.%20Mauris%20ut%20augue%20metus.%20Lorem%20ipsum%20dolor%20sit%20amet,%20consectetur%20adipiscing%20elit.%20Aliquam%20at%20dui%20nunc.%20Donec%20eu%20odio%20nec%20odio%20placerat%20tempor.%20Nullam%20lorem%20enim,%20efficitur%20non%20enim%20eget,%20tempus%20tincidunt%20dolor.%20Curabitur%20vitae%20libero%20pulvinar,%20maximus%20risus%20vitae,%20tristique%20ligula.%20Donec%20quis%20suscipit%20mauris,%20at%20tempus%20nibh.%20Class%20aptent%20taciti%20sociosqu%20ad%20litora%20torquent%20per%20conubia%20nostra,%20per%20inceptos%20himenaeos.%20Integer%20nec%20vehicula%20nibh.%20Pellentesque%20vel%20eros%20nec%20purus%20mattis%20malesuada%20id%20eget%20dolor.%20Vivamus%20hendrerit%20elit%20ipsum,%20id%20ullamcorper%20est%20vestibulum%20sollicitudin.%20Cras%20sed%20dui%20elementum,%20fermentum%20est%20vel%20sed.&pageSize=5\");",
													"});",
													"",
													"pm.test(\"_links.next existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.last existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"zoekresultaten existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.zoekresultaten).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_embedded is empty object\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded).to.eql({});",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras tempor eros pulvinar posuere posuere. Vivamus facilisis consequat nibh, id dictum mauris euismod vitae. Praesent vel ante placerat, malesuada velit eu, iaculis felis. Vivamus a ipsum sodales purus pulvinar consequat. Nunc ullamcorper interdum justo. Quisque bibendum est velit, vitae egestas nulla ultrices vel. Maecenas sed nisl mi. Suspendisse volutpat leo ac ultrices imperdiet. Vestibulum posuere congue magna sed hendrerit. Sed sapien tellus, pharetra id mauris in, viverra dapibus est. Duis eget condimentum urna. Suspendisse sed egestas turpis, sed scelerisque arcu. Donec eu neque turpis. Curabitur tristique sit amet nisl eget efficitur. Cras eros sem, molestie nec ultricies ut, feugiat vitae nisl. Donec eros eros, fringilla nec ultricies non, ultrices eget enim. Curabitur vel tortor eu quam accumsan molestie luctus pellentesque quam. Sed risus felis, euismod vel est sed, condimentum lacinia enim. Mauris luctus erat quis nibh eleifend, elementum fermentum ipsum suscipit. Praesent posuere vulputate erat, vitae scelerisque lectus accumsan a. Ut elementum cursus velit ut tempor. Proin fringilla, ex eu ornare vestibulum, massa neque sagittis lorem, vel eleifend libero libero a enim. Donec ipsum augue, euismod sed nisi et, lacinia suscipit tortor. Vivamus suscipit diam enim, mattis sollicitudin felis elementum mollis. Aliquam rutrum lacus ac dictum euismod. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce auctor at enim in commodo. Proin dictum, est vel finibus posuere, lectus metus rutrum mauris, a pulvinar sapien dolor id purus. Morbi at ultricies nunc. Nullam ligula odio, faucibus id urna sed, efficitur dignissim eros. Donec fermentum odio vel mauris varius tempus. Fusce sodales eleifend leo, et commodo ex consequat eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam ullamcorper nisi risus, in mollis ipsum commodo eget. Nunc a consequat purus, sit amet viverra sapien. Curabitur commodo nunc sit amet nibh maximus tincidunt. Vestibulum hendrerit justo felis, eu aliquet erat semper sed. Etiam vel ultrices ipsum. Maecenas quis libero ac dui tempus cursus. Ut porta semper urna id finibus. Nulla tincidunt tristique arcu, ac sodales ex pellentesque nec. Pellentesque tincidunt metus enim, sed gravida metus rutrum at. Nullam massa erat, consequat vel tristique id, lacinia id nibh. Aliquam tempor est quis quam commodo vulputate. Sed interdum, mi ac sollicitudin convallis, dolor erat tincidunt ex, et aliquam erat felis congue nibh. Cras posuere purus quis justo fermentum, in auctor sem egestas. Proin ullamcorper lacus eget tellus euismod, sit amet maximus ante accumsan. Morbi sed odio vel ipsum aliquam sagittis. Nulla at ullamcorper massa. Sed id tempor urna, non luctus dolor. Nulla nulla mauris, lobortis at odio in, sollicitudin auctor elit. Praesent sollicitudin metus at condimentum molestie. Integer eu sapien interdum, elementum mi sit amet, euismod neque. Praesent dui lorem, sodales at nisi in, lobortis faucibus sem. Phasellus pharetra vitae magna ultricies feugiat. Sed scelerisque consectetur facilisis. Maecenas tristique convallis mattis. Aenean suscipit id eros eu mattis. Nunc a lectus eu felis lobortis malesuada. Pellentesque imperdiet laoreet iaculis. Vestibulum vestibulum finibus tristique. Mauris ut augue metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam at dui nunc. Donec eu odio nec odio placerat tempor. Nullam lorem enim, efficitur non enim eget, tempus tincidunt dolor. Curabitur vitae libero pulvinar, maximus risus vitae, tristique ligula. Donec quis suscipit mauris, at tempus nibh. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Integer nec vehicula nibh. Pellentesque vel eros nec purus mattis malesuada id eget dolor. Vivamus hendrerit elit ipsum, id ullamcorper est vestibulum sollicitudin. Cras sed dui elementum, fermentum est vel sed.&pageSize=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras tempor eros pulvinar posuere posuere. Vivamus facilisis consequat nibh, id dictum mauris euismod vitae. Praesent vel ante placerat, malesuada velit eu, iaculis felis. Vivamus a ipsum sodales purus pulvinar consequat. Nunc ullamcorper interdum justo. Quisque bibendum est velit, vitae egestas nulla ultrices vel. Maecenas sed nisl mi. Suspendisse volutpat leo ac ultrices imperdiet. Vestibulum posuere congue magna sed hendrerit. Sed sapien tellus, pharetra id mauris in, viverra dapibus est. Duis eget condimentum urna. Suspendisse sed egestas turpis, sed scelerisque arcu. Donec eu neque turpis. Curabitur tristique sit amet nisl eget efficitur. Cras eros sem, molestie nec ultricies ut, feugiat vitae nisl. Donec eros eros, fringilla nec ultricies non, ultrices eget enim. Curabitur vel tortor eu quam accumsan molestie luctus pellentesque quam. Sed risus felis, euismod vel est sed, condimentum lacinia enim. Mauris luctus erat quis nibh eleifend, elementum fermentum ipsum suscipit. Praesent posuere vulputate erat, vitae scelerisque lectus accumsan a. Ut elementum cursus velit ut tempor. Proin fringilla, ex eu ornare vestibulum, massa neque sagittis lorem, vel eleifend libero libero a enim. Donec ipsum augue, euismod sed nisi et, lacinia suscipit tortor. Vivamus suscipit diam enim, mattis sollicitudin felis elementum mollis. Aliquam rutrum lacus ac dictum euismod. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce auctor at enim in commodo. Proin dictum, est vel finibus posuere, lectus metus rutrum mauris, a pulvinar sapien dolor id purus. Morbi at ultricies nunc. Nullam ligula odio, faucibus id urna sed, efficitur dignissim eros. Donec fermentum odio vel mauris varius tempus. Fusce sodales eleifend leo, et commodo ex consequat eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam ullamcorper nisi risus, in mollis ipsum commodo eget. Nunc a consequat purus, sit amet viverra sapien. Curabitur commodo nunc sit amet nibh maximus tincidunt. Vestibulum hendrerit justo felis, eu aliquet erat semper sed. Etiam vel ultrices ipsum. Maecenas quis libero ac dui tempus cursus. Ut porta semper urna id finibus. Nulla tincidunt tristique arcu, ac sodales ex pellentesque nec. Pellentesque tincidunt metus enim, sed gravida metus rutrum at. Nullam massa erat, consequat vel tristique id, lacinia id nibh. Aliquam tempor est quis quam commodo vulputate. Sed interdum, mi ac sollicitudin convallis, dolor erat tincidunt ex, et aliquam erat felis congue nibh. Cras posuere purus quis justo fermentum, in auctor sem egestas. Proin ullamcorper lacus eget tellus euismod, sit amet maximus ante accumsan. Morbi sed odio vel ipsum aliquam sagittis. Nulla at ullamcorper massa. Sed id tempor urna, non luctus dolor. Nulla nulla mauris, lobortis at odio in, sollicitudin auctor elit. Praesent sollicitudin metus at condimentum molestie. Integer eu sapien interdum, elementum mi sit amet, euismod neque. Praesent dui lorem, sodales at nisi in, lobortis faucibus sem. Phasellus pharetra vitae magna ultricies feugiat. Sed scelerisque consectetur facilisis. Maecenas tristique convallis mattis. Aenean suscipit id eros eu mattis. Nunc a lectus eu felis lobortis malesuada. Pellentesque imperdiet laoreet iaculis. Vestibulum vestibulum finibus tristique. Mauris ut augue metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam at dui nunc. Donec eu odio nec odio placerat tempor. Nullam lorem enim, efficitur non enim eget, tempus tincidunt dolor. Curabitur vitae libero pulvinar, maximus risus vitae, tristique ligula. Donec quis suscipit mauris, at tempus nibh. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Integer nec vehicula nibh. Pellentesque vel eros nec purus mattis malesuada id eget dolor. Vivamus hendrerit elit ipsum, id ullamcorper est vestibulum sollicitudin. Cras sed dui elementum, fermentum est vel sed.",
													"description": "257 tekens is te lang"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "5"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "veel huisletters en huisnummertoevoegingen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=5382JX 1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "5382JX 1",
													"description": "257 tekens is te lang"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "5",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "met of zonder huisletter en huisnummertoevoeging en huisnummer 1+11",
									"event": [
										{
											"script": {
												"exec": [
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=2391PH 1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "2391PH 1",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								}
							],
							"description": "test het zoeken van adressen",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "paginering",
							"item": [
								{
									"name": "geen page of pagesize",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Nieuwe Plantage 1, 2611XH Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=8\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"20\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"1\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "page=1",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=1\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Nieuwe Plantage 1, 2611XH Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=8\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"20\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"1\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "page=2",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=2\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Nieuwe Plantage 14, 2611XH Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=8\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "pagesize=5",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(5);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Nieuwe Plantage 1, 2611XH Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-0ccdf9d2ecba66807ed6d405914bd244\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=32\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&pageSize=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "5"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "pagesize=5 page=2",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=2&pageSize=5\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(5);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Nieuwe Plantage 5, 2611XH Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-f18ef70aba20e945d7d493a78a1dfa95\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=32\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=2&pageSize=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "5"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "pagesize=5 page=3",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=4\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=3&pageSize=5\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(5);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Nieuwe Plantage 8, 2611XH Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-c47b65c33bca47db9e843aefc2d856e3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=32\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"5\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"3\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=3&pageSize=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "3",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "5"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "pageSize=5 page=laatste pagina",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=\" + pm.variables.get(\"page\") + \"&pageSize=5\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(3);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=5&page=31\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=32&pageSize=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "32",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "5"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "page=laatste pagina",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=\" + pm.variables.get(\"page\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(18);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Nieuwe Plantage 103, 2611XV Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=7\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "8",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "Geen resultaat",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/zoek?zoek=bestaatniet%20nootdorp\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"zoekresultaten Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=bestaatniet nootdorp",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "bestaatniet nootdorp",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "veel huisletters en huisnummertoevoegingen laatste pagina (23)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=5382JX 1&page=23&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "5382JX 1",
													"description": "257 tekens is te lang"
												},
												{
													"key": "page",
													"value": "23",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								}
							]
						},
						{
							"name": "foutafhandeling",
							"item": [
								{
									"name": "page is geen integer",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=\" + pm.variables.get(\"page\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Ongeldige waarde [1a] opgegeven voor parameter [page]\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"page\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is geen geldige integer.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"integer\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=1a",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "1a",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "page < 1",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=\" + pm.variables.get(\"page\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Bad request.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"page\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is lager dan minimum 1.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"minimum\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "0",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "page > aantal pagina's",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=\" + pm.variables.get(\"page\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"page\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"De opgegeven pagina bestaat niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"page\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=35",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "35",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "pageSize is geen integer",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Ongeldige waarde [10a] opgegeven voor parameter [pageSize]\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"pageSize\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is geen geldige integer.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"integer\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&pageSize=10a",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "10a"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "pageSize > maximum",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"pageSize\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is hoger dan maximum 100.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"maximum\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&pageSize=101",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "101"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "twee fouten",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&page=\" + pm.variables.get(\"page\") + \"&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"page\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is lager dan minimum 1.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"minimum\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].name).to.eql(\"pageSize\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].reason).to.eql(\"Waarde is hoger dan maximum 100.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].code).to.eql(\"maximum\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&page=0&pageSize=101",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "0",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "101"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "pageSize < 1",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?zoek=plantage%20delft&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Bad request.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"pageSize\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is lager dan minimum 1.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"minimum\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=plantage delft&pageSize=-10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "-10"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "geen zoek",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/zoek?pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Ten minste één parameter moet worden opgegeven.\");",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?pageSize=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "5"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "Niet gespecificeerde parameter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Bad request.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"straat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Parameter is niet verwacht.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"unknownParam\");",
													"});",
													"",
													"pm.test(\"invalidParams[1].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].name).to.eql(\"woonplaats\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].reason).to.eql(\"Parameter is niet verwacht.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].code).to.eql(\"unknownParam\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?straat=plantage&woonplaats=delft",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "plantage delft",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1a",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "straat",
													"value": "plantage"
												},
												{
													"key": "woonplaats",
													"value": "delft"
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/adressen/{nummeraanduidingIdentificatie}",
					"item": [
						{
							"name": "mapping",
							"item": [
								{
									"name": "met diakriet",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(9);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"3066VS\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Rotterdam\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"0599300000002397\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"3086\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0599010000165822\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0599100000103376\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adressen\\/0599200000193766$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).to.match(/^.*\\/openbareruimten\\/0599300000002397$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).to.match(/^.*\\/nummeraanduidingen\\/0599200000193766$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).to.match(/^.*\\/woonplaatsen\\/3086$/);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [['_links'].panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].pand\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).to.match(/^.*\\/panden\\/0599100000103376$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"indicatieNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.indicatieNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"indicatieGeconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.indicatieGeconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geen huisletter of huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Annelien Kappeyne van de Coppellostraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(8);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"6049HD\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Herten\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0957200000021241\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0957200000021241",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Geen postcode",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummer']).to.eql(4);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisletter]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisletter']).to.eql(\"T\");",
													"});",
													"",
													"pm.test(\"Match existence of [postcode]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['postcode']).to.be.an(\"undefined\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0518200001661726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Huisletter en een huisnummertoevoeging die begint met een cijfer",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisletter geen huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Blauwkapelseweg\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0344200000004821",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging en geen huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(103);",
													"});",
													"",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"BS\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0344200000075446",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging met cijfer en letter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"5A3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Bornsesteeg\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0289200000017214",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Lange straatnaam",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Burgemeester van Nispen van Sevenaerstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Burg v N v Sevenaerstr\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0417200000000354",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "adres in pand",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Paterserf\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(639);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"4904AM\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Oosterhout\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Paterserf\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0826200000016921\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"0826300000000536\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"3596\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0826010000016712\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['pandIdentificaties'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0826100000000467\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/0826200000016921\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).to.eql(baseUrl + \"/nummeraanduidingen/0826200000016921\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/0826300000000536\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/3596\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0826010000016712\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0826100000000467\");",
													"});",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0826200000016921",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "adres in meerdere panden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[1].href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificaties[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[1]).to.eql(\"0193100000048288\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Koggelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Koggelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(59);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"8017JN\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Zwolle\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"0193300000000613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen/\" + pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/0193300000000613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).to.eql(baseUrl + \"/nummeraanduidingen/\" + pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0193200000096680",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "nevenadres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieNevenadres]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['isNevenadres']).to.eql(true);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200022197986",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geconstateerd",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieGeconstateerd]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geconstateerd']).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [woonplaatsIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['woonplaatsIdentificatie']).to.eql(\"1070\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['woonplaats']['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/woonplaatsen\\/1070$/);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200022188962",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "woonplaats nummeraanduiding anders dan openbare ruimte",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"1818\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/1818\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0118200000264072",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "geen fields",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).not.to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.self exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.openbareRuimte not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.nummeraanduiding not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.adresseerbaarObject not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.panden not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=postcode,openbareRuimteIdentificatie,straat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "postcode,openbareRuimteIdentificatie,straat",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummer",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"self exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimte not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduiding not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObject not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"panden not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=postcode,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "postcode,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=postcode,huisletter",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "postcode,huisletter",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=postcode,huisnummertoevoeging",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "postcode,huisnummertoevoeging",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "links met _links",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).not.to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=_links.panden,_links.self,_links.woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "_links.panden,_links.self,_links.woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "alle _links",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).not.to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=korteNaam,_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "korteNaam,_links",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "veld dat niet bestaat",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams.name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"fields\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=postcode,bestaatNiet,huisnummer,bestaatOokNiet,huisletter",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "postcode,bestaatNiet,huisnummer,bestaatOokNiet,huisletter",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "lege fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"invalidParams.name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"fields\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om veld zonder waarde: geconstateerd",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=geconstateerd",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "geconstateerd",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "expand",
							"item": [
								{
									"name": "geen expand",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"JSONPath Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).to.be.an(\"undefined\");",
													"});"
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand openbareRuimte",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.include(\"/adressen/0484200002040489?expand=openbareRuimte\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).to.include(\"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).to.include(\"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).to.include(\"/woonplaatsen/2852\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).to.include(\"/adresseerbareobjecten/0484010002033603\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).to.include(\"/panden/0484100000045095\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.identificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"domein equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.domein).to.eql(\"NL.IMBAG.Openbareruimte\");",
													"});",
													"",
													"pm.test(\"naam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.naam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.type).to.eql(\"Weg\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.documentdatum).to.eql(\"2012-04-24\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.documentnummer).to.eql(\"CORR DIAKRIETEN\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=openbareRuimte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "openbareRuimte",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand nummeraanduiding",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.identificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentdatum).to.eql(\"2017-10-11\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentnummer).to.eql(\"162189\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].adres).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_embedded']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['nummeraanduiding']['_links']['woonplaats']['href']).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=nummeraanduiding",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "nummeraanduiding",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand woonplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.identificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"naam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.naam).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.status).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.documentdatum).to.eql(\"2013-06-25\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.documentnummer).to.eql(\"-1.733.21int-3569\");",
													"});",
													"",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand adresseerbaar object",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['identificatie']).to.eql(\"0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['type']).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['documentdatum']).to.eql(\"1975-01-01\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['documentnummer']).to.eql(\"B2--1404--92\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of gebruiksdoelen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['gebruiksdoelen'][0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [geometrie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['geometrie']).to.eql({",
													"   \"punt\" : {",
													"      \"type\" : \"Point\",",
													"      \"coordinates\" : [",
													"         98099.56,",
													"         438484.05,",
													"         0.0",
													"      ]",
													"   }",
													"});",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of pandIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['pandIdentificaties'][0]).to.eql(\"0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oppervlakte]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['oppervlakte']).to.eql(291);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['status']).to.eql(\"Verblijfsobject in gebruik\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adresseerbaarObject['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=adresseerbaarObject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand alles",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.identificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"naam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.naam).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.status).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.documentdatum).to.eql(\"2013-06-25\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.documentnummer).to.eql(\"-1.733.21int-3569\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.identificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentdatum).to.eql(\"2017-10-11\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentnummer).to.eql(\"162189\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.identificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"domein equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.domein).to.eql(\"NL.IMBAG.Openbareruimte\");",
													"});",
													"",
													"pm.test(\"naam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.naam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.type).to.eql(\"Weg\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.documentdatum).to.eql(\"2012-04-24\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.documentnummer).to.eql(\"CORR DIAKRIETEN\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"domein equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.domein).to.eql(\"NL.IMBAG.Woonplaats\");",
													"});",
													"",
													"pm.test(\"domein equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.domein).to.eql(\"NL.IMBAG.Nummeraanduiding\");",
													"});",
													"",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimte['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimte['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimte['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_embedded']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].adres).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_embedded']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=woonplaats,nummeraanduiding,openbareRuimte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "woonplaats,nummeraanduiding,openbareRuimte",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand velden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimte['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte['_embedded']).to.be.an(\"undefined\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"naam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.naam).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"domein not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.domein).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"naam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.type).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"domein not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.domein).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"domein not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.domein).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=openbareRuimte.korteNaam,nummeraanduiding.huisnummer,woonplaats.naam",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "openbareRuimte.korteNaam,nummeraanduiding.huisnummer,woonplaats.naam",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "links met _links",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=nummeraanduiding._links.openbareRuimte,nummeraanduiding._links.woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "nummeraanduiding._links.openbareRuimte,nummeraanduiding._links.woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand nummeraanduiding.huisnummer",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduiding.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbaarObject.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].self).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=nummeraanduiding.huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "nummeraanduiding.huisnummer",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "accept",
							"item": [
								{
									"name": "accept: json",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "accept: hal+json",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "foutsituaties",
							"item": [
								{
									"name": "niet gevonden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(404);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Opgevraagde resource bestaat niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"notFound\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/\" + pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"invalid-params Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599201234567890",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "nummeraanduiding pattern",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen/\" + pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"invalid-params Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalid-params.name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"nummeraanduidingidentificatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalid-params.reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "abcd",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "api key onjuist",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([401]);",
													"});",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400,401]);",
													"});",
													"",
													"pm.test(\"error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['error']).to.eql(\"Kadaster - Niet geauthenticeerd.\");",
													"});",
													"",
													"pm.test(\"errorDescription\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['errorDescription']).to.eql(\"Toegang is alleen voor geauthenticeerde gebruikers.\");",
													"});",
													"",
													"pm.test(\"errorDetail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['errorDetail']).to.eql(\"Invalid API Key\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "onjuist",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-api-key",
													"type": "string"
												}
											]
										},
										"method": "get",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geen api key",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400,401]);",
													"});",
													"",
													"pm.test(\"error\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['error']).to.eql(\"Kadaster - Foute aanvraag.\");",
													"});",
													"",
													"pm.test(\"errorDescription\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['errorDescription']).to.eql(\"Het bericht kan niet worden verwerkt.\");",
													"});",
													"",
													"pm.test(\"errorDetail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(pm.response.text()).to.include(\"Missing API Key\");",
													"    pm.expect(jsonData['errorDetail'], 'errorDetail').to.eql(\"Missing API Key\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "get",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "onjuist mimetype xml",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"/*",
													"    TODO: omzetten GroovyScriptAssertion \"Content-Type\"",
													"    assert messageExchange.responseHeaders[\"Content-Type\"][0]==\"application/problem+json\"",
													"*/",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [detail]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['detail']).to.eql(\"Not Acceptable. Je hebt waarschijnlijk een gewenst formaat met de `Accept` header verstuurd welke niet ondersteund wordt.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"notAcceptable\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/adressen/\" + pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde contenttype wordt niet ondersteund.\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type1\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "get",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "huisnummer",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is het verkeerde huisnummer geregistreerd.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010896726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisletter geen waarde wel mogelijkOnjuist",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummer']).to.eql(3);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"Check for existence of [huisletter]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisletter']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisletter toegekend, ontbreekt de huisletter ten onrechte, of is een verkeerde huisletter toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010851244",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummer']).to.eql(9999);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummertoevoeging']).to.eql(\"GA13\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "postcode",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een postcode toegekend, ontbreekt de postcode ten onrechte, of is een verkeerde postcode toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000012325",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "status",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Adres bestaat mogelijk niet (meer), omdat de nummeraanduiding mogelijk niet (meer) bestaat.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010855979",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "openbare ruimte alles",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(4);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[3]).to.eql(\"Straatnaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Korte naam is mogelijk onjuist, omdat de straatnaam mogelijk niet overeen komt met de vermelding in het straatnaambesluit. Dit is geen indicatie dat de straatnaam mogelijk onjuist is verkort.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[2]).to.eql(\"Straat bestaat mogelijk niet (meer).\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Mogelijk verkeerde woonplaats gebruikt. De straat moet verwijzen naar de woonplaats waarin de straat fysiek ligt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0935200000002553",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ligt in woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde woonplaats gebruikt. Het adres moet verwijzen naar de woonplaats waarin het adres fysiek ligt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "_links.woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010793696",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "status woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0846200000007550",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "naam woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0820200000362623",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "woonplaats (alles)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(3);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[2]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Geometrie of woonplaatsgrens is mogelijk onjuist, waardoor gaten of overlappingen ontstaan in de registratie van woonplaatsen. Gevolg kan zijn dat een object in een verkeerde woonplaats, in twee woonplaatsen, of in geen enkele woonplaats ligt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0848200000363584",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ligt aan openbare ruimte",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde straat gebruikt. Het adres moet verwijzen naar de straat waaraan het adres ligt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0018200000152130",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "alle eigenschappen van nummeraanduiding",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(7);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Mogelijk is het verkeerde huisnummer geregistreerd.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[2]).to.eql(\"Mogelijk is ten onrechte een huisletter toegekend, ontbreekt de huisletter ten onrechte, of is een verkeerde huisletter toegekend.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[3]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[4]).to.eql(\"Mogelijk is ten onrechte een postcode toegekend, ontbreekt de postcode ten onrechte, of is een verkeerde postcode toegekend.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Adres bestaat mogelijk niet (meer), omdat de nummeraanduiding mogelijk niet (meer) bestaat.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[6]).to.eql(\"Mogelijk verkeerde woonplaats gebruikt. Het adres moet verwijzen naar de woonplaats waarin het adres fysiek ligt.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[5]).to.eql(\"Mogelijk verkeerde straat gebruikt. Het adres moet verwijzen naar de straat waaraan het adres ligt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019560",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist+fields",
							"item": [
								{
									"name": "veld wel gevraagd",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.eql(true);",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is het verkeerde huisnummer geregistreerd.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=straat,woonplaats,huisnummer,openbareRuimteIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,woonplaats,huisnummer,openbareRuimteIdentificatie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010896726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "veld niet gevraagd",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=straat,woonplaats,openbareRuimteIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,woonplaats,openbareRuimteIdentificatie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010896726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "relatie niet gevraagd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).not.to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=huisnummer,postcode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "huisnummer,postcode",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0018200000152130",
													"type": "string",
													"description": "Hier is de relatie ligt aan openbare ruimte in onderzoek"
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "relatie wel gevraagd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/368",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"_links.openbareRuimte Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde straat gebruikt. Het adres moet verwijzen naar de straat waaraan het adres ligt.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=huisnummer,postcode,_links.openbareRuimte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "huisnummer,postcode,_links.openbareRuimte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0018200000152130",
													"type": "string",
													"description": "Hier is de relatie ligt aan openbare ruimte in onderzoek"
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "veld uit relatie gevraagd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde straat gebruikt. Het adres moet verwijzen naar de straat waaraan het adres ligt.\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=straat,huisnummer,postcode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,postcode",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0018200000152130",
													"type": "string",
													"description": "Relatie ligt aan openbare ruimte in onderzoek"
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "afgeleid veld uit relatie (straat:korteNaam)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde straat gebruikt. Het adres moet verwijzen naar de straat waaraan het adres ligt.\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=korteNaam,huisnummer,postcode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "korteNaam,huisnummer,postcode",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0018200000152130",
													"type": "string",
													"description": "Hier is de relatie ligt aan openbare ruimte in onderzoek"
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "afgeleid veld uit relatie (straat:adresregel1)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.adresregel1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.adresregel1).to.eql(true);",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde straat gebruikt. Het adres moet verwijzen naar de straat waaraan het adres ligt.\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=adresregel1,adresregel2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "adresregel1,adresregel2",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0018200000152130",
													"type": "string",
													"description": "Hier is de relatie ligt aan openbare ruimte in onderzoek"
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "afgeleid veld uit relatie (woonplaats:adresregel2)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.adresregel1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.adresregel1).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.adresregel2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.adresregel2).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde woonplaats gebruikt. Het adres moet verwijzen naar de woonplaats waarin het adres fysiek ligt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=adresregel2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "adresregel2",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010793696",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "afgeleid veld (naam woonplaats:adresregel2)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.adresregel1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.adresregel1).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.adresregel2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.adresregel2).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\")",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=adresregel2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "adresregel2",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0820200000362623",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "gevraagd veld",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is het verkeerde huisnummer geregistreerd.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=straat,huisnummer,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010896726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om huisletter geeft huisnummer",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is het verkeerde huisnummer geregistreerd.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=straat,huisletter,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,huisletter,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010896726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om huisnummer geeft huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummer']).to.eql(3);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"Check for existence of [huisletter]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisletter']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisletter toegekend, ontbreekt de huisletter ten onrechte, of is een verkeerde huisletter toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=straat,huisnummer,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010851244",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om huisnummer geeft huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummer']).to.eql(9999);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummertoevoeging']).to.eql(\"GA13\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=straat,huisnummer,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om afgeleid veld",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.adresregel1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.adresregel1).to.eql(true);",
													"});",
													"",
													"pm.test(\"mogelijkOnjuist.adresregel2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.adresregel2).to.be.an(\"undefined\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=adresregel1,adresregel2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "adresregel1,adresregel2",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "één van de velden uit openbareRuimte gevraagd (ligt aan in onderzoek)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde straat gebruikt. Het adres moet verwijzen naar de straat waaraan het adres ligt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=korteNaam,huisnummer,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "korteNaam,huisnummer,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0018200000152130",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "één van de velden uit openbareRuimte gevraagd (hele openbare ruimte incl. status in onderzoek)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Korte naam is mogelijk onjuist, omdat de straatnaam mogelijk niet overeen komt met de vermelding in het straatnaambesluit. Dit is geen indicatie dat de straatnaam mogelijk onjuist is verkort.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Straat bestaat mogelijk niet (meer).\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=korteNaam,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "korteNaam,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0935200000002553",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om mogelijkOnjuist veld dat niet in onderzoek staat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"//https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/369",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self link Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.self.href).not.to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=woonplaats,mogelijkOnjuist.woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "woonplaats,mogelijkOnjuist.woonplaats",
													"description": "woonplaats is niet in Onderzoek, dus niet mogelijkOnjuist"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010896726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om mogelijkOnjuist veld dat wel in onderzoek staat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is het verkeerde huisnummer geregistreerd.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self link Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._links.self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?fields=woonplaats,mogelijkOnjuist.huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "woonplaats,mogelijkOnjuist.huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010896726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist+expand",
							"item": [
								{
									"name": "status woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.woonplaats.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.woonplaats.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=woonplaats&fields=straat,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0846200000007550",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "status woonplaats niet gevraagd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats.mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=woonplaats.documentnummer,woonplaats.documentdatum&fields=straat,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "woonplaats.documentnummer,woonplaats.documentdatum",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0846200000007550",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "alles (incl geometrie) woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.woonplaats.mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.woonplaats.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.woonplaats.mogelijkOnjuist.toelichting[1]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=woonplaats&fields=straat,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0848200000363584",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "naam woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats.mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.woonplaats.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.woonplaats.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0820200000362623",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisletter geen waarde wel mogelijkOnjuist",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummer']).to.eql(3);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"Check for existence of [huisletter]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisletter']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduiding.mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding.mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.nummeraanduiding.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.nummeraanduiding.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisletter toegekend, ontbreekt de huisletter ten onrechte, of is een verkeerde huisletter toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=nummeraanduiding",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "nummeraanduiding",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010851244",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "openbare ruimte alles",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.mogelijkOnjuist.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.type).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting.length).to.eql(5);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting[3]).to.eql(\"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting[0]).to.eql(\"Korte naam is mogelijk onjuist, omdat de openbare ruimtenaam mogelijk niet overeen komt met de vermelding in het straatnaambesluit. Dit is geen indicatie dat de openbare ruimtenaam mogelijk onjuist is verkort.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting[2]).to.eql(\"Openbare ruimte bestaat mogelijk niet (meer).\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting[1]).to.eql(\"Mogelijk verkeerde woonplaats gebruikt.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting[4]).to.eql(\"Type openbare ruimte mogelijk onjuist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=openbareRuimte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "openbareRuimte",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0935200000002553",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand zonder mogelijkOnjuiste gegeven",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats.mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].woonplaats.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=woonplaats.naam&fields=straat,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "woonplaats.naam",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0846200000007550",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen deel van de velden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaats).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"openbareRuimte.mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"openbareRuimte.mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.mogelijkOnjuist.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.type).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"openbareRuimte.mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].openbareRuimte.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting[0]).to.eql(\"Openbare ruimte bestaat mogelijk niet (meer).\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.openbareRuimte.mogelijkOnjuist.toelichting[1]).to.eql(\"Type openbare ruimte mogelijk onjuist.\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie?expand=openbareRuimte.type,openbareRuimte.status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "openbareRuimte.type,openbareRuimte.status",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0935200000002553",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "adresregels",
							"item": [
								{
									"name": "geen huisnummertoevoeging en geen huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"straat\": \"Annelien Kappeyne van de Coppellostraat\",",
													"            \"huisnummer\": 8,",
													"            \"postcode\": \"6049HD\",",
													"            \"woonplaats\": \"Herten\",",
													"            \"korteNaam\": \"A K vd Coppellostr\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"adresregels\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"adresregel1\": \"A K vd Coppellostr 8\",",
													"            \"adresregel2\": \"6049 HD  HERTEN\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0957200000021241",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisletter en geen huinummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"straat\": \"Blauwkapelseweg\",",
													"            \"huisnummer\": 1,",
													"            \"huisletter\": \"A\",",
													"            \"postcode\": \"3572KA\",",
													"            \"woonplaats\": \"Utrecht\",",
													"            \"korteNaam\": \"Blauwkapelseweg\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"adresregels\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"adresregel1\": \"Blauwkapelseweg 1 A\",",
													"            \"adresregel2\": \"3572 KA  UTRECHT\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0344200000004821",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging die begint met een letter en geen huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"straat\": \"Burgemeester van Nispen van Sevenaerstraat\",",
													"            \"huisnummer\": 1,",
													"            \"huisnummertoevoeging\": \"BEN\",",
													"            \"postcode\": \"1251KD\",",
													"            \"woonplaats\": \"Laren\",",
													"            \"korteNaam\": \"Burg v N v Sevenaerstr\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"adresregels\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"adresregel1\": \"Burg v N v Sevenaerstr 1 BEN\",",
													"            \"adresregel2\": \"1251 KD  LAREN\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0417200000000354",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging die begint met een cijfer en geen huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"straat\": \"Bornsesteeg\",",
													"            \"huisnummer\": 1,",
													"            \"huisnummertoevoeging\": \"5A3\",",
													"            \"postcode\": \"6708GA\",",
													"            \"woonplaats\": \"Wageningen\",",
													"            \"korteNaam\": \"Bornsesteeg\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"adresregels\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"adresregel1\": \"Bornsesteeg 1-5A3\",",
													"            \"adresregel2\": \"6708 GA  WAGENINGEN\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0289200000017214",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisletter en een huisnummertoevoeging die begint met een letter",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"straat\": \"Defensieweg\",",
													"            \"huisnummer\": 16,",
													"            \"huisletter\": \"D\",",
													"            \"huisnummertoevoeging\": \"K\",",
													"            \"postcode\": \"7933TL\",",
													"            \"woonplaats\": \"Pesse\",",
													"            \"korteNaam\": \"Defensieweg\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"adresregels\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"adresregel1\": \"Defensieweg 16 DK\",",
													"            \"adresregel2\": \"7933 TL  PESSE\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0118200000264072",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisletter en een huisnummertoevoeging die begint met een cijfer",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"straat\": \"Belgiëlaan\",",
													"            \"huisnummer\": 1,",
													"            \"huisletter\": \"A\",",
													"            \"huisnummertoevoeging\": \"3\",",
													"            \"postcode\": \"2391PH\",",
													"            \"woonplaats\": \"Hazerswoude-Dorp\",",
													"            \"korteNaam\": \"Belgiëlaan\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"adresregels\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"adresregel1\": \"Belgiëlaan 1 A3\",",
													"            \"adresregel2\": \"2391 PH  HAZERSWOUDE-DORP\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geen postcode",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"straat\": \"Zorgvlietstraat\",",
													"            \"huisnummer\": 4,",
													"            \"huisletter\": \"T\",",
													"            \"woonplaats\": \"'s-Gravenhage\",",
													"            \"korteNaam\": \"Zorgvlietstraat\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"adresregels\", function () {",
													"    var jsonData = pm.response.json();",
													"    var verwacht = ",
													"        {",
													"            \"adresregel1\": \"Zorgvlietstraat 4 T\",",
													"            \"adresregel2\": \"'S-GRAVENHAGE\"",
													"        }",
													"        ;",
													"",
													"    for (const [key, value] of Object.entries(verwacht)) {",
													"        pm.expect(jsonData[key]).to.eql(value); ",
													"    }",
													"});",
													"",
													"pm.test(\"postcode Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0518200001661726",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/adressen",
					"item": [
						{
							"name": "raadplegen op zoekresultaatIdentificatie",
							"item": [
								{
									"name": "zoeken 1",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JsonPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving 15c\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Dorpsstraat 15c, 2631CR Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].identificatie).to.eql(\"adr-89d5a4d96f09c60716c4671fdb9334b8\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=nootdorp 15c dorpsstraat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "nootdorp 15c dorpsstraat",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken 2",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"omschrijving\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Belgiëlaan 1A-3, 2391PH Hazerswoude-Dorp\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=belgie 1a-3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "belgie 1a-3",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken 3",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[1].omschrijving).to.eql(\"Baron Schimmelpenninck van der Oyelaan 3, 2252EA Voorschoten\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=Baron Schimmelpenninck van der Oyelaan",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "Baron Schimmelpenninck van der Oyelaan",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken 4",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Burgemeester van Nispen van Sevenaerstraat 1, 1251KD Laren\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=burgemeester van Nispen van Sevenaerstraat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "burgemeester van Nispen van Sevenaerstraat",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken 5 - standplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[1].omschrijving).to.eql(\"Lau Mazirelweg 2, 2629HW Delft\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=Lau Mazirelweg 2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "Lau Mazirelweg 2",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "ligplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Molenpad 27, 2421BX Nieuwkoop\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=Nieuwkoop, Molenpad 27",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "Nieuwkoop, Molenpad 27",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken 7",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten.find(a => a.identificatie==\"adr-b4e76693f8edb98809fb1a89e9303ee7\").omschrijving).to.eql(\"Koggelaan 59, 8017JN Zwolle\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=8017JN",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "8017JN",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken 8",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[0].omschrijving).to.eql(\"Palmslag 20, 9724CS Groningen\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=palmslag 20 groningen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "palmslag 20 groningen",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken 9",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"JsonPath Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].zoekresultaten[3].omschrijving).to.eql(\"Boterdiep 55-4, 9712LK Groningen\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=9712LK 55",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "9712LK 55",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken op woonplaats mogelijkOnjuist",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=Son en Breugel",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "Son en Breugel",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "locatieserver vindt",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=landinrichtingscommissie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "landinrichtingscommissie",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "zoeken #381",
									"event": [
										{
											"script": {
												"exec": [
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"zoekresultaatIdentificatie381\", jsonData._embedded.zoekresultaten[0].identificatie);",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen/zoek?zoek=Laan van Nieuw-Oost-Indië 210, 2593CC 's-Gravenhage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen",
												"zoek"
											],
											"query": [
												{
													"key": "zoek",
													"value": "Laan van Nieuw-Oost-Indië 210, 2593CC 's-Gravenhage",
													"description": "Zoekterm op postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Free query zoeken van adressen met postcode, woonplaats, straatnaam, huisnummer, huisletter, huisnummertoevoeging. Delen van de adressen in het antwoord matchen exact met jouw invoer. Je vindt een adres door de zoekresultaatIdentificatie uit het antwoord te gebruiken in get/adressen"
									},
									"response": []
								},
								{
									"name": "ophalen zoekresultaat",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Dorpsstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(15);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"c\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2631CR\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/1926200000508011\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1926300000479027\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding.href).to.eql(baseUrl + \"/nummeraanduidingen/1926200000508011\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/1142\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/1926010000508012\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/1926100000485708\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"1926200000508011\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"1926300000479027\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"1142\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"1926010000508012\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"1926100000485708\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"pandIdentificatie Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"indicatieNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].indicatieNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].indicatieGeconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=\" + pm.variables.get(\"zoekresultaatIdentificatie\"));",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-89d5a4d96f09c60716c4671fdb9334b8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-89d5a4d96f09c60716c4671fdb9334b8",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ophalen zoekresultaat 2",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ophalen zoekresultaat 3",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Baron Schimmelpenninck van der Oyelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"verkorteStraatnaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Bar S vd Oyeln\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Voorschoten\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2252EA\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0626200000001220\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-db71679935c62963a22fdb9dbe740a6a",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-db71679935c62963a22fdb9dbe740a6a",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 4 - lange straatnaam",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Burgemeester van Nispen van Sevenaerstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Burg v N v Sevenaerstr\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Laren\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"1251KD\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0417200000000354\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=burgemeester van Nispen van Sevenaerstraat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-40019a9055d1468463ffeb33bcefa1e8",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "burgemeester van Nispen van Sevenaerstraat"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "lange straatnaam 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Laan van de landinrichtingscommissie Duiven-Westervoort\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Ln vd l D-Westervoort\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Duiven\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"6922KZ\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0226200000038923\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-5c01945883b0f0390d7a52f8462b0686",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-5c01945883b0f0390d7a52f8462b0686",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ophalen standplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Lau Mazirelweg\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0503200000103069\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0503030000103069\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-25f082777b854c0d27fd305b8202b287",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-25f082777b854c0d27fd305b8202b287",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ophalen ligplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Molenpad\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Nieuwkoop\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(27);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0569200000153647\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0569020000012435\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-52ce61536068ee2f9260c9c0c123be74",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-52ce61536068ee2f9260c9c0c123be74",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere panden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['pandIdentificaties'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['pandIdentificaties'][0]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['pandIdentificaties'][1]).to.eql(\"0193100000048288\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-b4e76693f8edb98809fb1a89e9303ee7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "nevenadres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieNevenadres]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['isNevenadres']).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].indicatieGeconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0014200022197986\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-801436d761e670910f81f50537a17a9e",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geconstateerd",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieGeconstateerd]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['geconstateerd']).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"isNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].isNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-f8d98319a75a70af37022c75f2947d47",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-f8d98319a75a70af37022c75f2947d47",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "locatieserver vindt, bestaat in acceptatie",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl +\"/adressen?zoekresultaatIdentificatie=adr-5c01945883b0f0390d7a52f8462b0686\");",
													"});",
													"",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Laan van de landinrichtingscommissie Duiven-Westervoort\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"6922KZ\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Duiven\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Ln vd l D-Westervoort\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"0226200000038923\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"0226300000136166\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"2096\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"0226010000038820\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"0226100000008856\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl +\"/adressen/0226200000038923\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/0226300000136166\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding.href).to.eql(baseUrl + \"/nummeraanduidingen/0226200000038923\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/2096\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0226010000038820\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0226100000008856\");",
													"});",
													"",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-5c01945883b0f0390d7a52f8462b0686",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-5c01945883b0f0390d7a52f8462b0686",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoekresultaat bestaat niet",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=\" + pm.variables.get(\"zoekresultaatIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"adressen Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'].adressen Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-bestaatniet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-bestaatniet",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoekresultaat is leeg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
													"});",
													"",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=\");",
													"});",
													"",
													"",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=\");",
													"});",
													"",
													"pm.test.skip(\"['_embedded'] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"adressen Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"content-type Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test.skip(\"['_embedded'].adressen Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"_embedded is empty object\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded).to.eql({});",
													"});",
													"",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoekresultaat met extreem lange waarde",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=Lorem%20ipsum%20dolor%20sit%20amet,%20consectetur%20adipiscing%20elit.%20Cras%20tempor%20eros%20pulvinar%20posuere%20posuere.%20Vivamus%20facilisis%20consequat%20nibh,%20id%20dictum%20mauris%20euismod%20vitae.%20Praesent%20vel%20ante%20placerat,%20malesuada%20velit%20eu,%20iaculis%20felis.%20Vivamus%20a%20ipsum%20sodales%20purus%20pulvinar%20consequat.%20Nunc%20ullamcorper%20interdum%20justo.%20Quisque%20bibendum%20est%20velit,%20vitae%20egestas%20nulla%20ultrices%20vel.%20Maecenas%20sed%20nisl%20mi.%20Suspendisse%20volutpat%20leo%20ac%20ultrices%20imperdiet.%20Vestibulum%20posuere%20congue%20magna%20sed%20hendrerit.%20Sed%20sapien%20tellus,%20pharetra%20id%20mauris%20in,%20viverra%20dapibus%20est.%20Duis%20eget%20condimentum%20urna.%20Suspendisse%20sed%20egestas%20turpis,%20sed%20scelerisque%20arcu.%20Donec%20eu%20neque%20turpis.%20Curabitur%20tristique%20sit%20amet%20nisl%20eget%20efficitur.%20Cras%20eros%20sem,%20molestie%20nec%20ultricies%20ut,%20feugiat%20vitae%20nisl.%20Donec%20eros%20eros,%20fringilla%20nec%20ultricies%20non,%20ultrices%20eget%20enim.%20Curabitur%20vel%20tortor%20eu%20quam%20accumsan%20molestie%20luctus%20pellentesque%20quam.%20Sed%20risus%20felis,%20euismod%20vel%20est%20sed,%20condimentum%20lacinia%20enim.%20Mauris%20luctus%20erat%20quis%20nibh%20eleifend,%20elementum%20fermentum%20ipsum%20suscipit.%20Praesent%20posuere%20vulputate%20erat,%20vitae%20scelerisque%20lectus%20accumsan%20a.%20Ut%20elementum%20cursus%20velit%20ut%20tempor.%20Proin%20fringilla,%20ex%20eu%20ornare%20vestibulum,%20massa%20neque%20sagittis%20lorem,%20vel%20eleifend%20libero%20libero%20a%20enim.%20Donec%20ipsum%20augue,%20euismod%20sed%20nisi%20et,%20lacinia%20suscipit%20tortor.%20Vivamus%20suscipit%20diam%20enim,%20mattis%20sollicitudin%20felis%20elementum%20mollis.%20Aliquam%20rutrum%20lacus%20ac%20dictum%20euismod.%20Lorem%20ipsum%20dolor%20sit%20amet,%20consectetur%20adipiscing%20elit.%20Fusce%20auctor%20at%20enim%20in%20commodo.%20Proin%20dictum,%20est%20vel%20finibus%20posuere,%20lectus%20metus%20rutrum%20mauris,%20a%20pulvinar%20sapien%20dolor%20id%20purus.%20Morbi%20at%20ultricies%20nunc.%20Nullam%20ligula%20odio,%20faucibus%20id%20urna%20sed,%20efficitur%20dignissim%20eros.%20Donec%20fermentum%20odio%20vel%20mauris%20varius%20tempus.%20Fusce%20sodales%20eleifend%20leo,%20et%20commodo%20ex%20consequat%20eu.%20Pellentesque%20habitant%20morbi%20tristique%20senectus%20et%20netus%20et%20malesuada%20fames%20ac%20turpis%20egestas.%20Nullam%20ullamcorper%20nisi%20risus,%20in%20mollis%20ipsum%20commodo%20eget.%20Nunc%20a%20consequat%20purus,%20sit%20amet%20viverra%20sapien.%20Curabitur%20commodo%20nunc%20sit%20amet%20nibh%20maximus%20tincidunt.%20Vestibulum%20hendrerit%20justo%20felis,%20eu%20aliquet%20erat%20semper%20sed.%20Etiam%20vel%20ultrices%20ipsum.%20Maecenas%20quis%20libero%20ac%20dui%20tempus%20cursus.%20Ut%20porta%20semper%20urna%20id%20finibus.%20Nulla%20tincidunt%20tristique%20arcu,%20ac%20sodales%20ex%20pellentesque%20nec.%20Pellentesque%20tincidunt%20metus%20enim,%20sed%20gravida%20metus%20rutrum%20at.%20Nullam%20massa%20erat,%20consequat%20vel%20tristique%20id,%20lacinia%20id%20nibh.%20Aliquam%20tempor%20est%20quis%20quam%20commodo%20vulputate.%20Sed%20interdum,%20mi%20ac%20sollicitudin%20convallis,%20dolor%20erat%20tincidunt%20ex,%20et%20aliquam%20erat%20felis%20congue%20nibh.%20Cras%20posuere%20purus%20quis%20justo%20fermentum,%20in%20auctor%20sem%20egestas.%20Proin%20ullamcorper%20lacus%20eget%20tellus%20euismod,%20sit%20amet%20maximus%20ante%20accumsan.%20Morbi%20sed%20odio%20vel%20ipsum%20aliquam%20sagittis.%20Nulla%20at%20ullamcorper%20massa.%20Sed%20id%20tempor%20urna,%20non%20luctus%20dolor.%20Nulla%20nulla%20mauris,%20lobortis%20at%20odio%20in,%20sollicitudin%20auctor%20elit.%20Praesent%20sollicitudin%20metus%20at%20condimentum%20molestie.%20Integer%20eu%20sapien%20interdum,%20elementum%20mi%20sit%20amet,%20euismod%20neque.%20Praesent%20dui%20lorem,%20sodales%20at%20nisi%20in,%20lobortis%20faucibus%20sem.%20Phasellus%20pharetra%20vitae%20magna%20ultricies%20feugiat.%20Sed%20scelerisque%20consectetur%20facilisis.%20Maecenas%20tristique%20convallis%20mattis.%20Aenean%20suscipit%20id%20eros%20eu%20mattis.%20Nunc%20a%20lectus%20eu%20felis%20lobortis%20malesuada.%20Pellentesque%20imperdiet%20laoreet%20iaculis.%20Vestibulum%20vestibulum%20finibus%20tristique.%20Mauris%20ut%20augue%20metus.%20Lorem%20ipsum%20dolor%20sit%20amet,%20consectetur%20adipiscing%20elit.%20Aliquam%20at%20dui%20nunc.%20Donec%20eu%20odio%20nec%20odio%20placerat%20tempor.%20Nullam%20lorem%20enim,%20efficitur%20non%20enim%20eget,%20tempus%20tincidunt%20dolor.%20Curabitur%20vitae%20libero%20pulvinar,%20maximus%20risus%20vitae,%20tristique%20ligula.%20Donec%20quis%20suscipit%20mauris,%20at%20tempus%20nibh.%20Class%20aptent%20taciti%20sociosqu%20ad%20litora%20torquent%20per%20conubia%20nostra,%20per%20inceptos%20himenaeos.%20Integer%20nec%20vehicula%20nibh.%20Pellentesque%20vel%20eros%20nec%20purus%20mattis%20malesuada%20id%20eget%20dolor.%20Vivamus%20hendrerit%20elit%20ipsum,%20id%20ullamcorper%20est%20vestibulum%20sollicitudin.%20Cras%20sed%20dui%20elementum,%20fermentum%20est%20vel%20sed.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"adressen Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'].adressen Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_embedded is empty object\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded).to.eql({});",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras tempor eros pulvinar posuere posuere. Vivamus facilisis consequat nibh, id dictum mauris euismod vitae. Praesent vel ante placerat, malesuada velit eu, iaculis felis. Vivamus a ipsum sodales purus pulvinar consequat. Nunc ullamcorper interdum justo. Quisque bibendum est velit, vitae egestas nulla ultrices vel. Maecenas sed nisl mi. Suspendisse volutpat leo ac ultrices imperdiet. Vestibulum posuere congue magna sed hendrerit. Sed sapien tellus, pharetra id mauris in, viverra dapibus est. Duis eget condimentum urna. Suspendisse sed egestas turpis, sed scelerisque arcu. Donec eu neque turpis. Curabitur tristique sit amet nisl eget efficitur. Cras eros sem, molestie nec ultricies ut, feugiat vitae nisl. Donec eros eros, fringilla nec ultricies non, ultrices eget enim. Curabitur vel tortor eu quam accumsan molestie luctus pellentesque quam. Sed risus felis, euismod vel est sed, condimentum lacinia enim. Mauris luctus erat quis nibh eleifend, elementum fermentum ipsum suscipit. Praesent posuere vulputate erat, vitae scelerisque lectus accumsan a. Ut elementum cursus velit ut tempor. Proin fringilla, ex eu ornare vestibulum, massa neque sagittis lorem, vel eleifend libero libero a enim. Donec ipsum augue, euismod sed nisi et, lacinia suscipit tortor. Vivamus suscipit diam enim, mattis sollicitudin felis elementum mollis. Aliquam rutrum lacus ac dictum euismod. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce auctor at enim in commodo. Proin dictum, est vel finibus posuere, lectus metus rutrum mauris, a pulvinar sapien dolor id purus. Morbi at ultricies nunc. Nullam ligula odio, faucibus id urna sed, efficitur dignissim eros. Donec fermentum odio vel mauris varius tempus. Fusce sodales eleifend leo, et commodo ex consequat eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam ullamcorper nisi risus, in mollis ipsum commodo eget. Nunc a consequat purus, sit amet viverra sapien. Curabitur commodo nunc sit amet nibh maximus tincidunt. Vestibulum hendrerit justo felis, eu aliquet erat semper sed. Etiam vel ultrices ipsum. Maecenas quis libero ac dui tempus cursus. Ut porta semper urna id finibus. Nulla tincidunt tristique arcu, ac sodales ex pellentesque nec. Pellentesque tincidunt metus enim, sed gravida metus rutrum at. Nullam massa erat, consequat vel tristique id, lacinia id nibh. Aliquam tempor est quis quam commodo vulputate. Sed interdum, mi ac sollicitudin convallis, dolor erat tincidunt ex, et aliquam erat felis congue nibh. Cras posuere purus quis justo fermentum, in auctor sem egestas. Proin ullamcorper lacus eget tellus euismod, sit amet maximus ante accumsan. Morbi sed odio vel ipsum aliquam sagittis. Nulla at ullamcorper massa. Sed id tempor urna, non luctus dolor. Nulla nulla mauris, lobortis at odio in, sollicitudin auctor elit. Praesent sollicitudin metus at condimentum molestie. Integer eu sapien interdum, elementum mi sit amet, euismod neque. Praesent dui lorem, sodales at nisi in, lobortis faucibus sem. Phasellus pharetra vitae magna ultricies feugiat. Sed scelerisque consectetur facilisis. Maecenas tristique convallis mattis. Aenean suscipit id eros eu mattis. Nunc a lectus eu felis lobortis malesuada. Pellentesque imperdiet laoreet iaculis. Vestibulum vestibulum finibus tristique. Mauris ut augue metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam at dui nunc. Donec eu odio nec odio placerat tempor. Nullam lorem enim, efficitur non enim eget, tempus tincidunt dolor. Curabitur vitae libero pulvinar, maximus risus vitae, tristique ligula. Donec quis suscipit mauris, at tempus nibh. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Integer nec vehicula nibh. Pellentesque vel eros nec purus mattis malesuada id eget dolor. Vivamus hendrerit elit ipsum, id ullamcorper est vestibulum sollicitudin. Cras sed dui elementum, fermentum est vel sed.",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras tempor eros pulvinar posuere posuere. Vivamus facilisis consequat nibh, id dictum mauris euismod vitae. Praesent vel ante placerat, malesuada velit eu, iaculis felis. Vivamus a ipsum sodales purus pulvinar consequat. Nunc ullamcorper interdum justo. Quisque bibendum est velit, vitae egestas nulla ultrices vel. Maecenas sed nisl mi. Suspendisse volutpat leo ac ultrices imperdiet. Vestibulum posuere congue magna sed hendrerit. Sed sapien tellus, pharetra id mauris in, viverra dapibus est. Duis eget condimentum urna. Suspendisse sed egestas turpis, sed scelerisque arcu. Donec eu neque turpis. Curabitur tristique sit amet nisl eget efficitur. Cras eros sem, molestie nec ultricies ut, feugiat vitae nisl. Donec eros eros, fringilla nec ultricies non, ultrices eget enim. Curabitur vel tortor eu quam accumsan molestie luctus pellentesque quam. Sed risus felis, euismod vel est sed, condimentum lacinia enim. Mauris luctus erat quis nibh eleifend, elementum fermentum ipsum suscipit. Praesent posuere vulputate erat, vitae scelerisque lectus accumsan a. Ut elementum cursus velit ut tempor. Proin fringilla, ex eu ornare vestibulum, massa neque sagittis lorem, vel eleifend libero libero a enim. Donec ipsum augue, euismod sed nisi et, lacinia suscipit tortor. Vivamus suscipit diam enim, mattis sollicitudin felis elementum mollis. Aliquam rutrum lacus ac dictum euismod. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce auctor at enim in commodo. Proin dictum, est vel finibus posuere, lectus metus rutrum mauris, a pulvinar sapien dolor id purus. Morbi at ultricies nunc. Nullam ligula odio, faucibus id urna sed, efficitur dignissim eros. Donec fermentum odio vel mauris varius tempus. Fusce sodales eleifend leo, et commodo ex consequat eu. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam ullamcorper nisi risus, in mollis ipsum commodo eget. Nunc a consequat purus, sit amet viverra sapien. Curabitur commodo nunc sit amet nibh maximus tincidunt. Vestibulum hendrerit justo felis, eu aliquet erat semper sed. Etiam vel ultrices ipsum. Maecenas quis libero ac dui tempus cursus. Ut porta semper urna id finibus. Nulla tincidunt tristique arcu, ac sodales ex pellentesque nec. Pellentesque tincidunt metus enim, sed gravida metus rutrum at. Nullam massa erat, consequat vel tristique id, lacinia id nibh. Aliquam tempor est quis quam commodo vulputate. Sed interdum, mi ac sollicitudin convallis, dolor erat tincidunt ex, et aliquam erat felis congue nibh. Cras posuere purus quis justo fermentum, in auctor sem egestas. Proin ullamcorper lacus eget tellus euismod, sit amet maximus ante accumsan. Morbi sed odio vel ipsum aliquam sagittis. Nulla at ullamcorper massa. Sed id tempor urna, non luctus dolor. Nulla nulla mauris, lobortis at odio in, sollicitudin auctor elit. Praesent sollicitudin metus at condimentum molestie. Integer eu sapien interdum, elementum mi sit amet, euismod neque. Praesent dui lorem, sodales at nisi in, lobortis faucibus sem. Phasellus pharetra vitae magna ultricies feugiat. Sed scelerisque consectetur facilisis. Maecenas tristique convallis mattis. Aenean suscipit id eros eu mattis. Nunc a lectus eu felis lobortis malesuada. Pellentesque imperdiet laoreet iaculis. Vestibulum vestibulum finibus tristique. Mauris ut augue metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam at dui nunc. Donec eu odio nec odio placerat tempor. Nullam lorem enim, efficitur non enim eget, tempus tincidunt dolor. Curabitur vitae libero pulvinar, maximus risus vitae, tristique ligula. Donec quis suscipit mauris, at tempus nibh. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Integer nec vehicula nibh. Pellentesque vel eros nec purus mattis malesuada id eget dolor. Vivamus hendrerit elit ipsum, id ullamcorper est vestibulum sollicitudin. Cras sed dui elementum, fermentum est vel sed.",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ophalen zoekresultaat #381",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"zoekresultaatIdentificatie = pm.collectionVariables.get(\"zoekresultaatIdentificatie381\");"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie={{zoekresultaatIdentificatie381}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "{{zoekresultaatIdentificatie381}}",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							],
							"description": "Eerst worden adressen gezocht met /zoek, vervolgens worden deze adressen opgehaald op basis van de zoekresultaatIdentificatie uit de antwoorden van /zoek",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "zoeken op pandIdentificatie",
							"item": [
								{
									"name": "veel adressen in pand (flat)",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4].straat).to.eql(\"Paterserf\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0826200000016921').huisnummer).to.eql(639);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4].postcode).to.eql(\"4904AM\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4].woonplaats).to.eql(\"Oosterhout\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4].korteNaam).to.eql(\"Paterserf\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0826200000016921').nummeraanduidingIdentificatie).to.eql(\"0826200000016921\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4].openbareRuimteIdentificatie).to.eql(\"0826300000000536\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4].woonplaatsIdentificatie).to.eql(\"3596\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0826200000016921').adresseerbaarObjectIdentificatie).to.eql(\"0826010000016712\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[1].pandIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4].pandIdentificaties[0]).to.eql(\"0826100000000467\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0826200000016921')['_links'].self.href).to.eql(baseUrl + \"/adressen/0826200000016921\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0826200000016921')['_links'].nummeraanduiding.href).to.eql(baseUrl + \"/nummeraanduidingen/0826200000016921\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4]['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/0826300000000536\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4]['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/3596\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0826200000016921')['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0826010000016712\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4]['_links'].panden.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[4]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0826100000000467\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"(Hal collection links).next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=2\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere panden met zelfde adres (1)",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Koggelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59).huisnummer).to.eql(59);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"8017JN\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Zwolle\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59).nummeraanduidingIdentificatie).to.eql(\"0193200000096680\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"0193300000000613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"1182\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59).adresseerbaarObjectIdentificatie).to.eql(\"0193010000096628\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[1].pandIdentificaties.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59).pandIdentificaties[0]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59).pandIdentificaties[1]).to.eql(\"0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59)['_links'].self.href).to.eql(baseUrl + \"/adressen/0193200000096680\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[1]['_links'].panden.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59)['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==59)['_links'].panden[1].href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[1].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==33).huisnummer).to.eql(33);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[1].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==33).nummeraanduidingIdentificatie).to.eql(\"0193200000050954\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [1].[pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[1].pandIdentificatie[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==33).pandIdentificaties[0]).to.eql(\"0193100000043750\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0193100000043750",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0193100000043750",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere panden met zelfde adres (2)",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Koggelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(59);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"8017JN\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Zwolle\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"0193200000096680\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"0193300000000613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"1182\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"0193010000096628\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[1]).to.eql(\"0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0193200000096680\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[1].href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0193100000048288",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0193100000048288",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "diakriet en huisnummertoevoeging",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0484100000045095\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0484100000045095",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0484100000045095",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "nevenadres",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0014200022197986').nummeraanduidingIdentificatie).to.eql(\"0014200022197986\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"[hoofdadres] isNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0014200010877405').isNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"[hoofdadres] geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].indicatieGeconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"[hoofdadres] mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[nevenadres] nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.nummeraanduidingIdentificatie=='0014200022197986').nummeraanduidingIdentificatie).to.eql(\"0014200022197986\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[nevenadres] Match content of [indicatieNevenadres]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].find(item => item.nummeraanduidingIdentificatie=='0014200022197986')['isNevenadres']).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"[nevenadres] geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[1].indicatieGeconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"[nevenadres] mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[1].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0014100010921152",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0014100010921152",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geconstateerd",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(3);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieGeconstateerd]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['geconstateerd']).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"isNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].isNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0014100010969109",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0014100010969109",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pandIdentificatie niet gevonden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"adressen Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'].adressen Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=1234107890123456",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "1234107890123456",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "zoeken op adresseerebaarobjectidentificatie",
							"item": [
								{
									"name": "diakriet en huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].panden[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0484100000045095\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?adresseerbaarObjectIdentificatie=0484010002033603\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?adresseerbaarObjectIdentificatie=0484010002033603",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "zoeken op postcode, huisnummer en exacteMatch",
							"item": [
								{
									"name": "200 OK",
									"item": [
										{
											"name": "postcode + huisnummer",
											"item": [
												{
													"name": "één adres match criteria",
													"item": [
														{
															"name": "exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=3&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2391PH"
																		},
																		{
																			"key": "huisnummer",
																			"value": "3"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=3&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2391PH"
																		},
																		{
																			"key": "huisnummer",
																			"value": "3"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "meerdere adressen match criteria",
													"item": [
														{
															"name": "exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2391PH"
																		},
																		{
																			"key": "huisnummer",
																			"value": "1"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.be.greaterThan(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2391PH"
																		},
																		{
																			"key": "huisnummer",
																			"value": "1"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "Postcode met spatie",
													"item": [
														{
															"name": "exacteMatch=true spatie in postcode",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			"\r",
																			"\r",
																			"// Let op !!!!!!!!!!\r",
																			"// De derde test gaat fout. Dit is een test die op het niveau van de \"200 OK\" is gedefinieerd.\r",
																			"// Daar worden postcodes uit de response en de query-parameter vergeleken, maar daarin wordt geen rekenineg gehouden met de spatie. \r",
																			"// Dit is een onterechte Fout, maar ik heb niet voldoende kennis van Java script opm dit eigenhandig aan te passten. "
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2391 PH&huisnummer=3&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2391 PH"
																		},
																		{
																			"key": "huisnummer",
																			"value": "3"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "zoeken met lowercase postcode",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check count of [adressen]\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/adressen?postcode=2391ph&huisnummer=1&exacteMatch=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"adressen"
															],
															"query": [
																{
																	"key": "postcode",
																	"value": "2391ph"
																},
																{
																	"key": "huisnummer",
																	"value": "1"
																},
																{
																	"key": "exacteMatch",
																	"value": "true"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "exacteMatch=undefined",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check count of [adressen]\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData['_embedded']['adressen'].length).to.be.greaterThan(1);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"adressen"
															],
															"query": [
																{
																	"key": "postcode",
																	"value": "2391PH"
																},
																{
																	"key": "huisnummer",
																	"value": "1"
																},
																{
																	"key": "exacteMatch",
																	"value": "false",
																	"disabled": true
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "postcode + huisnummer + huisletter",
											"item": [
												{
													"name": "meerdere adressen match criteria",
													"item": [
														{
															"name": "exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2594AN&huisnummer=265&huisletter=A&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2594AN"
																		},
																		{
																			"key": "huisnummer",
																			"value": "265"
																		},
																		{
																			"key": "huisletter",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.be.greaterThan(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2594AN&huisnummer=265&huisletter=A&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2594AN"
																		},
																		{
																			"key": "huisnummer",
																			"value": "265"
																		},
																		{
																			"key": "huisletter",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "één adres match criteria",
													"item": [
														{
															"name": "exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2594AN&huisnummer=265&huisletter=D&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2594AN"
																		},
																		{
																			"key": "huisnummer",
																			"value": "265"
																		},
																		{
																			"key": "huisletter",
																			"value": "D"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2594AN&huisnummer=265&huisletter=D&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2594AN"
																		},
																		{
																			"key": "huisnummer",
																			"value": "265"
																		},
																		{
																			"key": "huisletter",
																			"value": "D"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "huisletter is lowercase in BAG",
													"item": [
														{
															"name": "zoek met uppercase huisletter, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9901JE&huisnummer=2&huisletter=A&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9901JE"
																		},
																		{
																			"key": "huisnummer",
																			"value": "2"
																		},
																		{
																			"key": "huisletter",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met lowercase huisletter, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9901JE&huisnummer=2&huisletter=a&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9901JE"
																		},
																		{
																			"key": "huisnummer",
																			"value": "2"
																		},
																		{
																			"key": "huisletter",
																			"value": "a"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met uppercase huisletter, exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9901JE&huisnummer=2&huisletter=A&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9901JE"
																		},
																		{
																			"key": "huisnummer",
																			"value": "2"
																		},
																		{
																			"key": "huisletter",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met lowercase huisletter, exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9901JE&huisnummer=2&huisletter=a&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9901JE"
																		},
																		{
																			"key": "huisnummer",
																			"value": "2"
																		},
																		{
																			"key": "huisletter",
																			"value": "a"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										},
										{
											"name": "postcode + huisnummer + huisnummertoevoeging",
											"item": [
												{
													"name": "één adres match criteria",
													"item": [
														{
															"name": "huisnummertoevoeging is getal, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9901CC&huisnummer=4&huisnummertoevoeging=01&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9901CC"
																		},
																		{
																			"key": "huisnummer",
																			"value": "4"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "01"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "huisnummertoevoeging is getal, exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9901CC&huisnummer=4&huisnummertoevoeging=01&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9901CC"
																		},
																		{
																			"key": "huisnummer",
																			"value": "4"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "01"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "huisnummertoevoeging is letter, exacteMatch=true",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9902BK&huisnummer=19&huisnummertoevoeging=I&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9902BK"
																		},
																		{
																			"key": "huisnummer",
																			"value": "19"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "I"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "huisnummertoevoeging is letter, exacteMatch=false",
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9902BK&huisnummer=19&huisnummertoevoeging=I&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9902BK"
																		},
																		{
																			"key": "huisnummer",
																			"value": "19"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "I"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "meerdere adressen match criteria",
													"item": [
														{
															"name": "exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.be.greaterThan(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2594AN&huisnummer=265&huisnummertoevoeging=1&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2594AN"
																		},
																		{
																			"key": "huisnummer",
																			"value": "265"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "1"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Geen adressen\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen']).to.be.undefined;\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2594AN&huisnummer=265&huisnummertoevoeging=1&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2594AN"
																		},
																		{
																			"key": "huisnummer",
																			"value": "265"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "1"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "huisnummertoevoeging is lowercase in BAG",
													"item": [
														{
															"name": "zoek met uppercase huisnummertoevoeging, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9711JM&huisnummer=3&huisnummertoevoeging=A&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9711JM"
																		},
																		{
																			"key": "huisnummer",
																			"value": "3"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met lowercase huisnummertoevoeging, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9711JM&huisnummer=3&huisnummertoevoeging=a&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9711JM"
																		},
																		{
																			"key": "huisnummer",
																			"value": "3"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "a"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met uppercase huisnummertoevoeging, exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9711JM&huisnummer=3&huisnummertoevoeging=A&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9711JM"
																		},
																		{
																			"key": "huisnummer",
																			"value": "3"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met lowercase huisnummertoevoeging, exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9711JM&huisnummer=3&huisnummertoevoeging=a&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9711JM"
																		},
																		{
																			"key": "huisnummer",
																			"value": "3"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "a"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "geen filter match",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Check count of [adressen]\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData['_embedded']['adressen']).to.be.undefined;\r",
																	"});\r",
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/adressen?postcode=7437SZ&huisnummer=2&huisnummertoevoeging=A&exacteMatch=true",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"adressen"
															],
															"query": [
																{
																	"key": "postcode",
																	"value": "7437SZ"
																},
																{
																	"key": "huisnummer",
																	"value": "2"
																},
																{
																	"key": "huisnummertoevoeging",
																	"value": "A"
																},
																{
																	"key": "exacteMatch",
																	"value": "true"
																}
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "postcode + huisnummer + huisletter + huisnummertoevoeging",
											"item": [
												{
													"name": "één adres match criteria",
													"item": [
														{
															"name": "exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&huisletter=A&huisnummertoevoeging=6&exacteMatch=false",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2391PH"
																		},
																		{
																			"key": "huisnummer",
																			"value": "1"
																		},
																		{
																			"key": "huisletter",
																			"value": "A"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "6"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "false"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "exacteMatch=false",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&huisletter=A&huisnummertoevoeging=6&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "2391PH"
																		},
																		{
																			"key": "huisnummer",
																			"value": "1"
																		},
																		{
																			"key": "huisletter",
																			"value": "A"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "6"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "huisletter en huisnummer is lowercase in BAG",
													"item": [
														{
															"name": "zoek met huisletter en huisnummertoevoeging in uppercase, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9831RL&huisnummer=13&huisletter=G&huisnummertoevoeging=A&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9831RL"
																		},
																		{
																			"key": "huisnummer",
																			"value": "13"
																		},
																		{
																			"key": "huisletter",
																			"value": "G"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met huisletter en huisnummertoevoeging in lowercase, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9831RL&huisnummer=13&huisletter=g&huisnummertoevoeging=a&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9831RL"
																		},
																		{
																			"key": "huisnummer",
																			"value": "13"
																		},
																		{
																			"key": "huisletter",
																			"value": "g"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "a"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met uppercase huisletter en lowercase huisnummertoevoeging, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9831RL&huisnummer=13&huisletter=g&huisnummertoevoeging=A&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9831RL"
																		},
																		{
																			"key": "huisnummer",
																			"value": "13"
																		},
																		{
																			"key": "huisletter",
																			"value": "g"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "A"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														},
														{
															"name": "zoek met lowercase huisletter en uppercase huisnummertoevoeging, exacteMatch=true",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Check count of [adressen]\", function () {\r",
																			"    var jsonData = pm.response.json();\r",
																			"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(1);\r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/adressen?postcode=9831RL&huisnummer=13&huisletter=G&huisnummertoevoeging=a&exacteMatch=true",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"adressen"
																	],
																	"query": [
																		{
																			"key": "postcode",
																			"value": "9831RL"
																		},
																		{
																			"key": "huisnummer",
																			"value": "13"
																		},
																		{
																			"key": "huisletter",
																			"value": "G"
																		},
																		{
																			"key": "huisnummertoevoeging",
																			"value": "a"
																		},
																		{
																			"key": "exacteMatch",
																			"value": "true"
																		}
																	]
																}
															},
															"response": []
														}
													]
												}
											]
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"let postcode = pm.request.url.query.get(\"postcode\").toUpperCase().split('%20').join(''); //uppercase maken en spatie verwijderen",
													"let huisnummer = pm.request.url.query.get(\"huisnummer\");",
													"let huisletter = pm.request.url.query.get(\"huisletter\");",
													"let huisnummertoevoeging = pm.request.url.query.get(\"huisnummertoevoeging\");",
													"let exactematch = pm.request.url.query.get(\"exacteMatch\");",
													"",
													"let jsonData = pm.response.json();",
													"let adressen = jsonData._embedded.adressen;",
													"",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => {",
													"    console.log(`${p[\"key\"]}: ${decodeURI(p[\"value\"])}`);",
													"    pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"]))",
													" });",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.eq(200);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"_links.self\", function () {",
													"    pm.expect(jsonData._links.self.href).to.eql(pm.request.url.toString());",
													"});",
													"",
													"if(adressen !== undefined) {",
													"    if(huisletter == undefined && huisnummertoevoeging == undefined) {",
													"        pm.test(\"alle adressen hebben postcode en huisnummer combinatie\", function() {",
													"            pm.expect(jsonData._embedded.adressen.find(x => x.postcode !== postcode && x.huisnummer !== huisnummer)).to.be.undefined;",
													"        });",
													"    }",
													"    else if(huisletter != undefined && huisnummertoevoeging == undefined) {",
													"        pm.test(\"alle adressen hebben postcode, huisnummer en huisletter combinatie\", function() {",
													"            pm.expect(jsonData._embedded.adressen.find(x => x.postcode !== postcode && x.huisnummer !== huisnummer",
													"                && x.huisletter !== huisletter)).to.be.undefined;",
													"        });",
													"    }",
													"    else if(huisletter == undefined && huisnummertoevoeging != undefined) {",
													"        pm.test(\"alle adressen hebben postcode, huisnummer en huisnummertoevoeging combinatie\", function() {",
													"            pm.expect(jsonData._embedded.adressen.find(x => x.postcode !== postcode && x.huisnummer !== huisnummer",
													"                && x.huisnummertoevoeging !== huisnummertoevoeging)).to.be.undefined;",
													"        });",
													"    }",
													"    else {",
													"        pm.test(\"alle adressen hebben postcode, huisnummer, huisletter en huisnummertoevoeging combinatie\", function() {",
													"            pm.expect(jsonData._embedded.adressen.find(x => x.postcode !== postcode && x.huisnummer !== huisnummer",
													"                && x.huisletter !== huisletter",
													"                && x.huisnummertoevoeging !== huisnummertoevoeging)).to.be.undefined;",
													"        });",
													"    }",
													"",
													"    if(exactematch && exactematch == \"true\") {",
													"        if(huisletter == undefined) {",
													"            pm.test(\"geen adressen met huisletter\", function() {",
													"                pm.expect(jsonData._embedded.adressen.find(x => x.huisletter !== undefined)).to.be.undefined;",
													"            });",
													"        }",
													"",
													"        if(huisnummertoevoeging == undefined) {",
													"            pm.test(\"geen adressen met huisnummertoevoeging\", function() {",
													"                pm.expect(jsonData._embedded.adressen.find(x => x.huisnummertoevoeging !== undefined)).to.be.undefined;",
													"            });",
													"        }",
													"    }",
													"}",
													""
												]
											}
										}
									]
								},
								{
									"name": "400 Bad Request",
									"item": [
										{
											"name": "alleen postcode",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Minimale combinatie van parameters moet worden opgegeven.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsCombination\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "alleen huisnummer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Minimale combinatie van parameters moet worden opgegeven.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsCombination\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?huisnummer=3",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH",
															"disabled": true
														},
														{
															"key": "huisnummer",
															"value": "3"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "alleen huisletter en huisnummertoevoeging",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    //pm.expect(jsonData.title).to.eql(\"Minimale combinatie van parameters moet worden opgegeven.\");\r",
															"    pm.expect(jsonData.title).to.eql(\"Ten minste één parameter moet worden opgegeven.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsRequired\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?huisletter=a&huisnummertoevoeging=II",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH",
															"disabled": true
														},
														{
															"key": "huisnummer",
															"value": "3",
															"disabled": true
														},
														{
															"key": "huisletter",
															"value": "a"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "II"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig postcode: eerste cijfer 0",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=0391PH&huisnummer=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "0391PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig postcode: suffix",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH%23&huisnummer=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH%23"
														},
														{
															"key": "huisnummer",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig postcode: spatie tussen cijfers en letters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=0391 PH&huisnummer=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "0391 PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "postcode + huisletter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Minimale combinatie van parameters moet worden opgegeven.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsCombination\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisletter=A",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisletter",
															"value": "A"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "postcode + huisnummertoevoeging",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Minimale combinatie van parameters moet worden opgegeven.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsCombination\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummertoevoeging=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldige parameter combinatie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&nummeraanduidingIdentificatie=1672200000008468",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														},
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "1672200000008468"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisnummer: letter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															"\r",
															"pm.test(\"detail\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.detail).to.eql(\"Ongeldige waarde [A] opgegeven voor parameter [huisnummer]\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=A",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "A"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisnummer: < minimum",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=0",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisnummer: > maximum",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=100000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "100000"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisnummertoevoeging: !",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&huisnummertoevoeging=!",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "!"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisnummertoevoeging: bisab",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&huisnummertoevoeging=bisab",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "bisab"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisletter: cijfer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&huisletter=1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														},
														{
															"key": "huisletter",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisletter: meerdere letters",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&huisletter=AA",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														},
														{
															"key": "huisletter",
															"value": "AA"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "alleen exacteMatch",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"detail\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.detail).to.eql(\"Precies 1 parameter van pandIdentificatie, adresseerbaarObjectIdentificatie, zoekresultaatIdentificatie, postcode, huisnummer of q moet worden opgegeven\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Ten minste één parameter moet worden opgegeven.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsRequired\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?exacteMatch=true",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "exacteMatch",
															"value": "true"
														},
														{
															"key": "pandIdentificatie",
															"value": "1672200000008468",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meerdere fouten",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=fout&huisnummer=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "fout"
														},
														{
															"key": "huisnummer",
															"value": "fout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "ongeldig huisletter: leegwaarde",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"let baseUrl = pm.variables.get(\"baseUrl\");\r",
															"// get request query parameters\r",
															"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
															"});\r",
															"\r",
															"// JsonPath Match\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?postcode=2391PH&huisnummer=1&huisletter=",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "postcode",
															"value": "2391PH"
														},
														{
															"key": "huisnummer",
															"value": "1"
														},
														{
															"key": "huisletter",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let jsonData = pm.response.json();",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.eq(400);",
													"});",
													"",
													"pm.test(\"status\", function () {",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"instance\", function () {",
													"    pm.expect(jsonData.instance).to.eql(pm.request.url.toString());",
													"});",
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "fuzzy zoeken",
							"item": [
								{
									"name": "zoeken 1 - woonplaats huisnummer huisletter straat",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Dorpsstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Nootdorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(15);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"c\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2631CR\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/1926200000508011\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1926300000479027\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding.href).to.eql(baseUrl + \"/nummeraanduidingen/1926200000508011\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/1142\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/1926010000508012\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/1926100000485708\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"1926200000508011\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"1926300000479027\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"1142\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"1926010000508012\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"1926100000485708\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"pandIdentificatie Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"indicatieNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].indicatieNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].indicatieGeconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=nootdorp 15c dorpsstraat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-89d5a4d96f09c60716c4671fdb9334b8",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "nootdorp 15c dorpsstraat"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 2 - straat huisnummer huisletter huisnummertoevoeging met streepje ertussen",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=belgie 1a-3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "belgie 1a-3"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 3 - alleen straatnaam",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.length).to.eql(47);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Baron Schimmelpenninck van der Oyelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"verkorteStraatnaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Bar S vd Oyeln\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Voorschoten\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2252EA\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0626200000001220\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pageSize=100&q=Baron Schimmelpenninck van der Oyelaan",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-db71679935c62963a22fdb9dbe740a6a",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "q",
													"value": "Baron Schimmelpenninck van der Oyelaan"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 4 - lange straatnaam",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Burgemeester van Nispen van Sevenaerstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Burg v N v Sevenaerstr\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Laren\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"1251KD\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0417200000000354\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-40019a9055d1468463ffeb33bcefa1e8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-40019a9055d1468463ffeb33bcefa1e8",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 5 -  standplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Lau Mazirelweg\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Delft\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0503200000103069\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0503030000103069\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=Lau Mazirelweg 2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-25f082777b854c0d27fd305b8202b287",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "Lau Mazirelweg 2"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 6 - ligplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Molenpad\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Nieuwkoop\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(27);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0569200000153647\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0569020000012435\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=Nieuwkoop, Molenpad 27",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-25f082777b854c0d27fd305b8202b287",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "Nieuwkoop, Molenpad 27"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 7 - meerdere panden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [pandIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].find(a => a.nummeraanduidingIdentificatie=='0193200000096680')['pandIdentificaties'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].find(a => a.nummeraanduidingIdentificatie=='0193200000096680')['pandIdentificaties'][0]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].find(a => a.nummeraanduidingIdentificatie=='0193200000096680')['pandIdentificaties'][1]).to.eql(\"0193100000048288\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=8017JN",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "8017JN"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 8 - nevenadres",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieNevenadres]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['isNevenadres']).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].indicatieGeconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0014200022197986\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=palmslag 20 groningen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "palmslag 20 groningen"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 9 - geconstateerd",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieGeconstateerd]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['geconstateerd']).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"isNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].isNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=9712LK 55",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-f8d98319a75a70af37022c75f2947d47",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "9712LK 55"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken 10 - meerdere flats - pageSize 100 page 4",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(100);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"isNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].isNevenadres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?page=4&pageSize=100&q=paterserf",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-f8d98319a75a70af37022c75f2947d47",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "4",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "q",
													"value": "paterserf"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "verkorte straatnaam",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Baron Schimmelpenninck van der Oyelaan\");",
													"});",
													"",
													"pm.test(\"huisnummer [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=bar vd oyelaan voorschoten",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "bar vd oyelaan voorschoten"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummer en postcode",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Zuiderstraat\");",
													"});",
													"",
													"pm.test(\"huisnummer [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(296);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=296 2611SM",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "296 2611SM"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met hoofdletter diakriet",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=hazerswoude-dorp beLgiË 1A 3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "hazerswoude-dorp beLgiË 1A 3"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zonder diakriet",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=hazerswoude-dorp BELGIE 1A 3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "hazerswoude-dorp BELGIE 1A 3"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "deel van woonplaatsnaam",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=hazerswoude belgië 1A 3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "hazerswoude belgië 1A 3"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Den Haag",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Spui\");",
													"});",
													"",
													"pm.test(\"huisnummer [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(70);",
													"});",
													"",
													"pm.test(\"woonplaats [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"'s-Gravenhage\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=spui 70 den haag",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-801436d761e670910f81f50537a17a9e",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "spui 70 den haag"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken #381",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['straat']).to.eql(\"Laan van Nieuw-Oost-Indië\");",
													"});",
													"",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['huisnummer']).to.eql(210);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=Laan van Nieuw-Oost-Indië 210, 2593CC 's-Gravenhage",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "{{zoekresultaatIdentificatie381}}",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "Laan van Nieuw-Oost-Indië 210, 2593CC 's-Gravenhage"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met page",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?page=8&q=voorhof",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "8",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "voorhof"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pageSize 100",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    //pm.expect(jsonData['_embedded']['adressen'].length).to.eql(100);",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(88);",
													"    // minder dan pageSize als gevolg van verschil tussen locatieserver (productie) en acceptatiedata",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pageSize=100&q=voorhof",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "8",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "q",
													"value": "voorhof"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "heel veel adressen - pageSize 100 - page 2",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    //pm.expect(jsonData['_embedded']['adressen'].length).to.eql(100);",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(70);",
													"    // minder dan pageSize als gevolg van verschil tussen locatieserver (productie) en acceptatiedata",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?expand=adresseerbaarObject&page=2&pageSize=100&q=vinkeloord 1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "q",
													"value": "vinkeloord 1"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "heel veel adressen - pageSize 100 - page 2 Copy",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    //pm.expect(jsonData['_embedded']['adressen'].length).to.eql(100);",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(99);",
													"    // minder dan pageSize als gevolg van verschil tussen locatieserver (productie) en acceptatiedata",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pageSize=100&q=2583DG 277",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "q",
													"value": "2583DG 277"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "alleen woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"straat [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Rotterdam Airportplein\");",
													"});",
													"",
													"pm.test(\"woonplaats [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Rotterdam\");",
													"});",
													"",
													"pm.test(\"_links.last\", function () {",
													"    var jsonData = pm.response.json();",
													"    let requestUri = pm.request.url.protocol + '://' + pm.request.url.getHost() + pm.request.url.getPathWithQuery();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(requestUri + \"&page=18374\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=rotterdam",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100",
													"disabled": true
												},
												{
													"key": "q",
													"value": "rotterdam"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "alleen cijfers van postcode",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"postcode [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2496HP\");",
													"});",
													"",
													"pm.test(\"_links.last\", function () {",
													"    var jsonData = pm.response.json();",
													"    let requestUri = pm.request.url.protocol + '://' + pm.request.url.getHost() + pm.request.url.getPathWithQuery();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(requestUri + \"&page=239\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=2496",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100",
													"disabled": true
												},
												{
													"key": "q",
													"value": "2496"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pand identificatie (vind niks",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"_embedded\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).to.eql({});",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=0826100000000467",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-b4e76693f8edb98809fb1a89e9303ee7",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100",
													"disabled": true
												},
												{
													"key": "q",
													"value": "0826100000000467"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "zonder fields",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).not.to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "lege fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).not.to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&fields=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met fields",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&fields=straat,huisnummer,woonplaats,isNevenadres,geconstateerd,mogelijkOnjuist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,woonplaats,isNevenadres,geconstateerd,mogelijkOnjuist",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "links met _links",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&fields=_links.openbareRuimte,_links.panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "_links.openbareRuimte,_links.panden",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken op pandIdentificatie met fields",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes1\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"postcode1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0484100000045095&fields=straat,huisnummer,postcode,isNevenadres,geconstateerd,mogelijkOnjuist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0484100000045095",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,postcode,isNevenadres,geconstateerd,mogelijkOnjuist",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met fields en expand",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['identificatie']).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['naam']).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['type']).to.eql(\"Weg\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['status']).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [korteNaam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['korteNaam']).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['documentdatum']).to.eql(\"2012-04-24\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['documentnummer']).to.eql(\"CORR DIAKRIETEN\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [woonplaatsIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['woonplaatsIdentificatie']).to.eql(\"2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['_links']['self']['href']).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['_links']['woonplaats']['href']).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=openbareRuimte&fields=straat,huisnummer,postcode,nummeraanduidingIdentificatie,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "openbareRuimte",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,postcode,nummeraanduidingIdentificatie,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met fields en expand-fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_embedded'].openbareRuimte.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.naam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_embedded'].openbareRuimte.documentnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.documentnummer).to.eql(\"CORR DIAKRIETEN\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_embedded'].openbareRuimte['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte['_links'].self.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'].openbareRuimte.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.type).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'].openbareRuimte.documentdatum\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_embedded'].openbareRuimte['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=openbareRuimte.naam,openbareRuimte.documentnummer&fields=straat,huisnummer,postcode,nummeraanduidingIdentificatie,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "openbareRuimte.naam,openbareRuimte.documentnummer",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,postcode,nummeraanduidingIdentificatie,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "expand",
							"item": [
								{
									"name": "zonder expand",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"JsonPath Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand hele resource openbareRuimte",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['identificatie']).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['naam']).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['type']).to.eql(\"Weg\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['status']).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [korteNaam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['korteNaam']).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['documentdatum']).to.eql(\"2012-04-24\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['documentnummer']).to.eql(\"CORR DIAKRIETEN\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [woonplaatsIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['woonplaatsIdentificatie']).to.eql(\"2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['_links']['self']['href']).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['openbareRuimte']['_links']['woonplaats']['href']).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=openbareRuimte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "openbareRuimte",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand hele resource adresseerbaarObject",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.identificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"domein\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.domein).to.eql(\"NL.IMBAG.Verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.type).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentdatum\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.documentdatum).to.eql(\"2017-09-22\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.documentnummer).to.eql(\"V2017/359\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbareobjecten.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject['gebruiksdoelen'][0]).to.eql(\"industriefunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"geometrie.punt.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.geometrie.punt.type).to.eql(\"Point\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"geometrie.punt.coordinates\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.geometrie.punt.coordinates).to.eql([",
													"    103164.143,",
													"    454823.872,",
													"    0.0",
													"    ]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbareobjecten.pandidentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject['pandIdentificaties'][0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbareobjecten.nummeridentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.oppervlakte).to.eql(173);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.status).to.eql(\"Verblijfsobject gevormd\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['adresseerbaarObject']['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['adresseerbaarObject']['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0484100000045095\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [self]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['adresseerbaarObject']['_links']['self']['href']).to.eql (baseUrl + \"/adresseerbareobjecten/0484010002033603\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=adresseerbaarObject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand hele resource nummeraanduiding",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.identificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.geconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentdatum\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentdatum).to.eql(\"2017-10-11\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentnummer).to.eql(\"162189\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].self.href).to.eql(baseUrl + \"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].adres.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimte Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['identificatie']).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['huisnummer']).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisletter]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['huisletter']).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['huisnummertoevoeging']).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [postcode]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['postcode']).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['status']).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['documentdatum']).to.eql(\"2017-10-11\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['documentnummer']).to.eql(\"162189\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [openbareRuimteIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['openbareRuimteIdentificatie']).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [woonplaatsIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['woonplaatsIdentificatie']).to.eql(\"2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['_links']['self']['href']).to.eql(baseUrl + \"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['_links']['adres']['href']).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [openbareRuimte]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['_links']['openbareRuimte']['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/openbareruimten\\/1672300000000110$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [woonplaats]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['nummeraanduiding']['_links']['woonplaats']['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/woonplaatsen\\/2852$/);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=nummeraanduiding",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "nummeraanduiding",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand hele resource woonplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['woonplaats']['identificatie']).to.eql(\"2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['woonplaats']['naam']).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['woonplaats']['status']).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['woonplaats']['documentdatum']).to.eql(\"2013-06-25\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['woonplaats']['documentnummer']).to.eql(\"-1.733.21int-3569\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['woonplaats']['_links']['self']['href']).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats['_embedded'] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].woonplaats['_embedded']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand meerdere hele resources",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.identificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.geconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentdatum\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentdatum).to.eql(\"2017-10-11\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentnummer).to.eql(\"162189\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].self.href).to.eql(baseUrl + \"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].adres.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.identificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.naam).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.type).to.eql(\"Weg\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"openbareRuimte['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].openbareRuimte['_links'].self.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.identificatie).to.eql(\"0484010002033603\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"domein\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.domein).to.eql(\"NL.IMBAG.Verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.type).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentdatum\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.documentdatum).to.eql(\"2017-09-22\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.documentnummer).to.eql(\"V2017/359\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbareobjecten.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject['gebruiksdoelen'][0]).to.eql(\"industriefunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"geometrie.punt.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.geometrie.punt.type).to.eql(\"Point\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"geometrie.punt.coordinates\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.geometrie.punt.coordinates).to.eql([",
													"    103164.143,",
													"    454823.872,",
													"    0.0",
													"    ]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbareobjecten.pandidentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject['pandIdentificaties'][0]).to.eql(\"0484100000045095\");",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbareobjecten.nummeridentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.oppervlakte).to.eql(173);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.status).to.eql(\"Verblijfsobject gevormd\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['adresseerbaarObject']['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['adresseerbaarObject']['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0484100000045095\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [self]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['adresseerbaarObject']['_links']['self']['href']).to.eql (baseUrl + \"/adresseerbareobjecten/0484010002033603\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=nummeraanduiding,openbareRuimte,adresseerbaarObject",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "nummeraanduiding,openbareRuimte,adresseerbaarObject"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand deel van resource",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.identificatie.lokaalID).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummer).to.eql(\"1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.geconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentdatum\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentdatum).to.eql(\"2017-10-11\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"documentnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentnummer).to.eql(\"162189\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"ligtAan\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding.ligtAan.lokaalID).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].self.href).to.eql(baseUrl + \"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].adres.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"['_links'].ligtAanOpenbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].ligtAanOpenbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"['_links'].ligtInWoonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].nummeraanduiding['_links'].ligtInWoonplaats.href).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"identificatie Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummer Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisletter Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"huisnummertoevoeging Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"postcode Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentifcatie Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].woonplaats Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adresseerbaarobject.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].adresseerbaarObject.oppervlakte).to.eql(173);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [self]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['_embedded']['adresseerbaarObject']['_links']['self']['href']).to.eql (baseUrl + \"/adresseerbareobjecten/0484010002033603\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=nummeraanduiding.status,nummeraanduiding.documentdatum,nummeraanduiding.documentnummer,adresseerbaarObject.oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "nummeraanduiding.status,nummeraanduiding.documentdatum,nummeraanduiding.documentnummer,adresseerbaarObject.oppervlakte"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand link met _links",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.identificatie).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"geconstateerd Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.geconstateerd).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"documentdatum\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentdatum).to.eql(\"2017-10-11\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"documentnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.documentnummer).to.eql(\"162189\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].self.href).to.eql(baseUrl + \"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].adres.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"postcode Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"huisnummer Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"['_links'].adres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].adres).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=nummeraanduiding._links.woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "nummeraanduiding._links.woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand alle links van resource",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding).to.eql(0484200002040489);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].self.href).to.eql(baseUrl + \"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].adres.href).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].nummeraanduiding['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/2852\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=nummeraanduiding._links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "nummeraanduiding._links",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met fields en expand",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"straat\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaats).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"openbareRuimteIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"pandIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbaarObject\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].adresseerbareObject).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_embedded'].woonplaats.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].woonplaats.naam).to.eql(\"Hazerswoude-Dorp\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_embedded'].woonplaats.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_embedded'].woonplaats.status).to.eql(\"Woonplaats aangewezen\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&expand=woonplaats&fields=straat,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "woonplaats",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "paginering",
							"item": [
								{
									"name": "pageSize = 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"['_links'].first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.collectionVariables.set(\"aantal_adressen\", pm.response.json()['_embedded'].adressen.length); // aantal gevonden adressen",
													"pm.collectionVariables.set(\"huisnummer0\", pm.response.json()['_embedded'].adressen[0].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer9\", pm.response.json()['_embedded'].adressen[9].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer14\", pm.response.json()['_embedded'].adressen[14].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer19\", pm.response.json()['_embedded'].adressen[19].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer20\", pm.response.json()['_embedded'].adressen[20].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer39\", pm.response.json()['_embedded'].adressen[39].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer60\", pm.response.json()['_embedded'].adressen[60].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer70\", pm.response.json()['_embedded'].adressen[70].huisnummer);",
													"pm.collectionVariables.set(\"huisnummer71\", pm.response.json()['_embedded'].adressen[71].huisnummer);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&pageSize=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pageSize = aantal",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(pm.variables.get(\"aantal_adressen\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"['_links'].first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&pageSize={{aantal_adressen}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "{{aantal_adressen}}"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geen page of pageSize",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"['_links'].first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][0]['huisnummer']).to.eql(pm.variables.get(\"huisnummer0\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[19].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'][19]['huisnummer']).to.eql(pm.variables.get(\"huisnummer19\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=4\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "page=1",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=1\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"['_links'].first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(pm.variables.get(\"huisnummer0\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[19].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[19].huisnummer).to.eql(pm.variables.get(\"huisnummer19\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=4\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&page=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "page=2",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(pm.variables.get(\"huisnummer20\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[19].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[19].huisnummer).to.eql(pm.variables.get(\"huisnummer39\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=4\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&page=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "laatste pagina",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(12);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=\" + pm.variables.get(\"page\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=3\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(pm.variables.get(\"huisnummer60\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[19].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[11].huisnummer).to.eql(pm.variables.get(\"huisnummer71\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "4",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geen page wel pageSize",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(10);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"['_links'].first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=10&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(pm.variables.get(\"huisnummer0\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[9].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[9].huisnummer).to.eql(pm.variables.get(\"huisnummer9\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=10&page=8\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&pageSize=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "10"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "page=3 en pageSize",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(7);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=\" + pm.variables.get(\"page\") + \"&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=4\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=2\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(pm.variables.get(\"huisnummer14\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[6].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[6].huisnummer).to.eql(pm.variables.get(\"huisnummer20\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=11\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&page=3&pageSize=7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "3",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "7"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "laatste pagina en pageSize",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=\" + pm.variables.get(\"page\") + \"&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=10\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(pm.variables.get(\"huisnummer70\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[1].huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[1].huisnummer).to.eql(pm.variables.get(\"huisnummer71\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&page=11&pageSize=7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "11",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "7"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "op zoekresultaatIdentificatie",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=\" + pm.variables.get(\"zoekresultaatIdentificatie\"));",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"(Hal collection links).first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"(Hal collection links).previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"(Hal collection links).next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"(Hal collection links).last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-89d5a4d96f09c60716c4671fdb9334b8",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-89d5a4d96f09c60716c4671fdb9334b8",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "heel veel adressen in pand",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(20);",
													"});",
													"",
													"pm.test(\"(Hal collection links).self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\"));",
													"});",
													"",
													"pm.test(\"(Hal collection links).first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"['_links'].first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=1\");",
													"});",
													"",
													"pm.test(\"(Hal collection links).previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"['_links'].next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"['_links'].next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=2\");",
													"});",
													"",
													"pm.test.skip(\"['_links'].last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"['_links'].last\", function () {",
													"    // last = round_up(items/pageSize) = 296/20 = 14.8 --> 15",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=15\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0014100022188747",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0014100022188747",
													"description": "dit is een studentenhuis met 296 adressen"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "adresregel1",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "heel veel adressen in pand met pageSize",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(parseInt(pm.variables.get(\"pageSize\")));",
													"});",
													"",
													"pm.test(\"(Hal collection links).first Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"['_links'].first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=1\");",
													"});",
													"",
													"pm.test(\"(Hal collection links).previous Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test.skip(\"['_links'].next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"['_links'].next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=2\");",
													"});",
													"",
													"pm.test.skip(\"['_links'].last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"['_links'].last\", function () {",
													"    // last = round_up(items/pageSize) = 296/50 = 5.92 --> 6",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=6\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0014100022188747&pageSize=50",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0014100022188747",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "12",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "50"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "laatste pagina en pageSize bij heel veel adressen",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    // 296 adressen: aantal_op_pagina = totaal_aantal - pageSize * (page - 1) = 296 - 50*(6-1) = 46",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adressen'].length).to.eql(46);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&page=\" + pm.variables.get(\"page\") + \"&pageSize=\" + pm.variables.get(\"pageSize\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    var prev = pm.variables.get(\"page\") - 1;",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adressen?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=\" + prev);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].next Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].last Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0014100022188747&page=6&pageSize=50",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0014100022188747",
													"description": "dit is een studentenhuis met 296 adressen"
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "6",
													"description": "laatste pagina"
												},
												{
													"key": "pageSize",
													"value": "50"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "foutsituaties",
							"item": [
								{
									"name": "meerdere foute parameters",
									"item": [
										{
											"name": "meerdere foute parameters niet toegestane karakters",
											"event": [
												{
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);",
															"});",
															"",
															"pm.test(\"aantal invalidParams\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.invalidParams.length).to.eql(4);",
															"});",
															""
														],
														"type": "text/javascript"
													},
													"listen": "test"
												}
											],
											"request": {
												"method": "get",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?expand=\"fout\"&fields=\"fout\"&page=fout&pageSize=fout&postcode=\"fout\"&huisnummer=-1&huisletter=0&huisnummertoevoeging=\"fout\"&exacteMatch=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
															"disabled": true
														},
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
															"disabled": true
														},
														{
															"key": "zoekresultaatIdentificatie",
															"value": "fout",
															"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "\"fout\"",
															"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
														},
														{
															"key": "fields",
															"value": "\"fout\"",
															"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
														},
														{
															"key": "page",
															"value": "fout",
															"description": "Pagina nummer"
														},
														{
															"key": "pageSize",
															"value": "fout"
														},
														{
															"key": "postcode",
															"value": "\"fout\""
														},
														{
															"key": "huisnummer",
															"value": "-1"
														},
														{
															"key": "huisletter",
															"value": "0"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "\"fout\""
														},
														{
															"key": "exacteMatch",
															"value": "fout"
														}
													]
												},
												"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
											},
											"response": []
										},
										{
											"name": "meerdere foute parameters type",
											"event": [
												{
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);",
															"});",
															"",
															"pm.test(\"aantal invalidParams\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.invalidParams.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"invalidParams 1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"integer\");",
															"});"
														],
														"type": "text/javascript"
													},
													"listen": "test"
												}
											],
											"request": {
												"method": "get",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?expand=fout&fields=fout&page=fout&pageSize=fout&postcode=fout&huisnummer=fout&huisletter=fout&huisnummertoevoeging=fout&exacteMatch=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
															"disabled": true
														},
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
															"disabled": true
														},
														{
															"key": "zoekresultaatIdentificatie",
															"value": "fout",
															"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "fout",
															"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
														},
														{
															"key": "fields",
															"value": "fout",
															"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
														},
														{
															"key": "page",
															"value": "fout",
															"description": "Pagina nummer"
														},
														{
															"key": "pageSize",
															"value": "fout"
														},
														{
															"key": "postcode",
															"value": "fout"
														},
														{
															"key": "huisnummer",
															"value": "fout"
														},
														{
															"key": "huisletter",
															"value": "fout"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "fout"
														},
														{
															"key": "exacteMatch",
															"value": "fout"
														}
													]
												},
												"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
											},
											"response": []
										},
										{
											"name": "meerdere foute parameters pattern-minimum-maximum",
											"event": [
												{
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);",
															"});",
															"",
															"pm.test(\"aantal invalidParams\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.invalidParams.length).to.eql(8);",
															"});",
															""
														],
														"type": "text/javascript"
													},
													"listen": "test"
												}
											],
											"request": {
												"method": "get",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?expand=fout&fields=fout&page=-1&pageSize=999&postcode=fout&huisnummer=-1&huisletter=0&huisnummertoevoeging=foutje",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
															"disabled": true
														},
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
															"disabled": true
														},
														{
															"key": "zoekresultaatIdentificatie",
															"value": "fout",
															"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "fout",
															"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
														},
														{
															"key": "fields",
															"value": "fout",
															"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
														},
														{
															"key": "page",
															"value": "-1",
															"description": "Pagina nummer"
														},
														{
															"key": "pageSize",
															"value": "999"
														},
														{
															"key": "postcode",
															"value": "fout"
														},
														{
															"key": "huisnummer",
															"value": "-1"
														},
														{
															"key": "huisletter",
															"value": "0"
														},
														{
															"key": "huisnummertoevoeging",
															"value": "foutje"
														},
														{
															"key": "exacteMatch",
															"value": "fout",
															"disabled": true
														}
													]
												},
												"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
											},
											"response": []
										},
										{
											"name": "meerdere foute parameters page bestaat niet - na minimum",
											"event": [
												{
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);",
															"});",
															"",
															"pm.test(\"aantal invalidParams\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.invalidParams.length).to.eql(1);",
															"});",
															"",
															"pm.test(\"invalidParams 1\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"page\");",
															"    pm.expect(jsonData.invalidParams[0].reason, \"reason\").to.eql(\"De opgegeven pagina bestaat niet.\");",
															"});",
															""
														],
														"type": "text/javascript"
													},
													"listen": "test"
												}
											],
											"request": {
												"method": "get",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adressen?page=2&postcode=2496MK&huisnummer=8",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adressen"
													],
													"query": [
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
															"disabled": true
														},
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
															"disabled": true
														},
														{
															"key": "zoekresultaatIdentificatie",
															"value": "fout",
															"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "fout",
															"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "fout",
															"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
															"disabled": true
														},
														{
															"key": "page",
															"value": "2",
															"description": "Pagina nummer"
														},
														{
															"key": "pageSize",
															"value": "999",
															"disabled": true
														},
														{
															"key": "postcode",
															"value": "2496MK"
														},
														{
															"key": "huisnummer",
															"value": "8"
														},
														{
															"key": "huisletter",
															"value": "0",
															"disabled": true
														},
														{
															"key": "huisnummertoevoeging",
															"value": "foutje",
															"disabled": true
														},
														{
															"key": "exacteMatch",
															"value": "fout",
															"disabled": true
														}
													]
												},
												"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
											},
											"response": []
										}
									]
								},
								{
									"name": "geen zoekparameter ingevuld",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Ten minste één parameter moet worden opgegeven.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Precies 1 parameter van pandIdentificatie, adresseerbaarObjectIdentificatie, zoekresultaatIdentificatie, postcode, huisnummer of q moet worden opgegeven\");",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsRequired\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?expand=adresseerbaarObject&fields=straat,huisnummer,woonplaats&page=1&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adresseerbaarObject",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "straat,huisnummer,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "1",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "parameter bestaat niet",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"pm.test(\"invalidParams\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams).to.eql([",
													"        {",
													"            \"name\": \"bestaatniet\",",
													"            \"code\": \"unknownParam\",",
													"            \"reason\": \"Parameter is niet verwacht.\"",
													"        }",
													"    ]);",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0014100010921152&bestaatniet=abcd",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0014100010921152",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "bestaatniet",
													"value": "abcd"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pandIdentificatie pattern",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Bad request.\");",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");",
													"});",
													"",
													"pm.test(\"invalidParams\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams.length, \"aantal invalidParams\").to.eql(1);",
													"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"pandIdentificatie\");",
													"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"pattern\");",
													"    pm.expect(jsonData.invalidParams[0].reason, \"reason\").to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0345100002016017X",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0345100002016017X",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "a",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "3",
													"disabled": true
												},
												{
													"key": "bestaatniet",
													"value": "abcd",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "type van waarde van één parameter is niet correct",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Ongeldige waarde [a] opgegeven voor parameter [page]\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"pm.test(\"invalidParams\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams.length, \"aantal invalidParams\").to.eql(1);",
													"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");",
													"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"integer\");",
													"    pm.expect(jsonData.invalidParams[0].reason, \"reason\").to.eql(\"Waarde is geen geldige integer.\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0345100002016017&page=a&pageSize=3",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0345100002016017",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "a",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "3"
												},
												{
													"key": "bestaatniet",
													"value": "abcd",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "type van waarde van meerdere parameters is niet correct",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Ongeldige waarde [a] opgegeven voor parameter [page]\");",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");",
													"});",
													"",
													"pm.test(\"invalidParams\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams.length, \"aantal invalidParams\").to.eql(1); //zie #503, niet 2 maar 1 fout wordt gemeld",
													"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");",
													"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"integer\");",
													"    pm.expect(jsonData.invalidParams[0].reason, \"reason\").to.eql(\"Waarde is geen geldige integer.\");",
													"",
													"    /*",
													"    pm.expect(jsonData.invalidParams[1].name, \"name\").to.eql(\"pageSize\");",
													"    pm.expect(jsonData.invalidParams[1].code, \"code\").to.eql(\"integer\");",
													"    pm.expect(jsonData.invalidParams[1].reason, \"reason\").to.eql(\"Waarde is geen geldige integer.\");",
													"    */",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0345100002016017&page=a&pageSize=b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0345100002016017",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "a",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "b"
												},
												{
													"key": "bestaatniet",
													"value": "abcd",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "onjuiste api key",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([401]);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"Invalid API Key\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(401);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Niet correct geauthenticeerd.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Geen resultaten gevonden met key adr-bestaatniet\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"authentication\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "onjuist",
													"type": "string"
												},
												{
													"key": "key",
													"value": "x-api-key",
													"type": "string"
												}
											]
										},
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-f6b00930705c1ef12c2624623a797d21",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-f6b00930705c1ef12c2624623a797d21",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "fout in fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"To Do\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=adr-f6b00930705c1ef12c2624623a797d21&fields=postcode,bestaatniet,huisnummer\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"notFound\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-f6b00930705c1ef12c2624623a797d21&fields=postcode,bestaatniet,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-f6b00930705c1ef12c2624623a797d21",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "postcode,bestaatniet,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "fout in expand",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"detail\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Bad request.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=adr-f6b00930705c1ef12c2624623a797d21&expand=resourceBestaatNiet,openbareRuimte.bestaatNiet\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Script Assertion\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Deel van de parameterwaarde is niet correct: openbareRuimte.bestaatNiet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].name).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].code).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].reason).to.eql(\"Deel van de parameterwaarde is niet correct: resourceBestaatNiet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-f6b00930705c1ef12c2624623a797d21&expand=resourceBestaatNiet,openbareRuimte.bestaatNiet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-f6b00930705c1ef12c2624623a797d21",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "resourceBestaatNiet,openbareRuimte.bestaatNiet",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "niet ondersteund formaat",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde contenttype wordt niet ondersteund.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"notAcceptable\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0193100000043750",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0193100000043750",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "contenttype json",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0193100000043750",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0193100000043750",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "contenttype hal+json",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0193100000043750",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0193100000043750",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "page > aantal pagina's",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?pandIdentificatie=0826100000000467&page=12&pageSize=7\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"page\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"De opgegeven pagina bestaat niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"page\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&page=12&pageSize=7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "12",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "7"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "onjuiste fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&fields=straat,bestaatNiet,huisnummer,_links.bestaatNiet\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[0].reason _links.bestaatNiet\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Deel van de parameterwaarde is niet correct: _links.bestaatNiet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams[1].reason bestaatNiet\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[1].reason).to.eql(\"Deel van de parameterwaarde is niet correct: bestaatNiet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b&fields=straat,bestaatNiet,huisnummer,_links.bestaatNiet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "straat,bestaatNiet,huisnummer,_links.bestaatNiet",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?pandIdentificatie=0826100000000467&adresseerbaarObjectIdentificatie=0484010002033603&zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&adresseerbaarObjectIdentificatie=0484010002033603&zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?pandIdentificatie=0826100000000467&zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&zoekresultaatIdentificatie=adr-35eabe366d08b6087fe9cb0d2fe3922b",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"instance\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.instance).to.eql(baseUrl + \"/adressen?pandIdentificatie=0826100000000467&adresseerbaarObjectIdentificatie=0484010002033603\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&adresseerbaarObjectIdentificatie=0484010002033603",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&postcode=4904AM",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "postcode",
													"value": "4904AM",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "huisnummer",
													"value": "633",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0289100000002082&huisnummer=633&huisnummertoevoeging=II&huisletter=a&fields=huisnummer,huisletter,huisnummertoevoeging",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0289100000002082",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "postcode",
													"value": "4904AM",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "huisnummer",
													"value": "633",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "huisnummertoevoeging",
													"value": "II",
													"description": "Pagina nummer"
												},
												{
													"key": "huisletter",
													"value": "a"
												},
												{
													"key": "fields",
													"value": "huisnummer,huisletter,huisnummertoevoeging"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?huisnummer=633&huisnummertoevoeging=II&huisletter=a&q=rotterdam",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0289100000002082",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "postcode",
													"value": "4904AM",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "huisnummer",
													"value": "633"
												},
												{
													"key": "huisnummertoevoeging",
													"value": "II"
												},
												{
													"key": "huisletter",
													"value": "a"
												},
												{
													"key": "fields",
													"value": "huisnummer,huisletter,huisnummertoevoeging",
													"disabled": true
												},
												{
													"key": "q",
													"value": "rotterdam"
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0289100000002082&q=01c",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0289100000002082",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "q",
													"value": "01c"
												},
												{
													"key": "postcode",
													"value": "4904AM",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "huisnummer",
													"value": "633",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "huisnummertoevoeging",
													"value": "II",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "huisletter",
													"value": "a",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "huisnummer,huisletter,huisnummertoevoeging",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "een lege parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0826100000000467&adresseerbaarObjectIdentificatie=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "lege parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Ten minste één parameter moet worden opgegeven.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=&adresseerbaarObjectIdentificatie=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "lege parameter q",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Ten minste één parameter moet worden opgegeven.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": null
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "niet toegestane tekens q",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(400);",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"paramsValidation\");",
													"});",
													"",
													"pm.test(\"invalidParams\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams.length, \"aantal\").to.eql(1);",
													"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"q\");",
													"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"notAllowedCharacter\");",
													"    pm.expect(jsonData.invalidParams[0].reason, \"reason\").to.eql(\"Parameter bevat niet toegestane karakters.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?q=\"spui 70 den haag\"",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-35eabe366d08b6087fe9cb0d2fe3922b",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "q",
													"value": "\"spui 70 den haag\""
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "huisnummertoevoeging - op zoekresultaatIdentificatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(9999);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"GA13\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?zoekresultaatIdentificatie=adr-bd62384330825bb4ec05adc444cca171",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "adr-bd62384330825bb4ec05adc444cca171",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging - op pandIdentificatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').huisnummer).to.eql(9999);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummertoevoeging=='GA13').huisnummertoevoeging).to.eql(\"GA13\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen.find(item => item.huisnummertoevoeging=='GA13').mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0109100000000433",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0109100000000433",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging - op adresseerbaarObjectIdentificatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(9999);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"GA13\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?adresseerbaarObjectIdentificatie=0109010000014763",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0109010000014763",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om huisnummer geeft huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes1\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).huisletter).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.straat Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.straat).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaats Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).huisnummer).to.eql(3);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"Check for existence of [huisletter]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3).huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"nummeraanduiding.mogelijkOnjuist.huisletter\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3)['_embedded'].nummeraanduiding.mogelijkOnjuist.huisletter).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduiding.mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen.find(item => item.huisnummer==3)['_embedded'].nummeraanduiding.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen.find(item => item.huisnummer==3).mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.adressen.find(item => item.huisnummer==3).mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisletter toegekend, ontbreekt de huisletter ten onrechte, of is een verkeerde huisletter toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adressen?pandIdentificatie=0014100010982644&expand=nummeraanduiding&fields=nummeraanduidingIdentificatie,straat,huisnummer,woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adressen"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "0014100010982644",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "zoekresultaatIdentificatie",
													"value": "",
													"description": "De identificatie van een gekozen zoekresultaat uit de zoekResultatenHalCollectie verkregen bij een zoek-operatie",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "nummeraanduiding",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "nummeraanduidingIdentificatie,straat,huisnummer,woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Vind een actueel adres met de identificatie van het zoekresultaat uit de operatie get /adressen/zoek, de pandIdentificatie of de adresseerbaarObjectIdentificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/openbareruimten/{openbareRuimteidentificatie}",
					"item": [
						{
							"name": "mapping",
							"item": [
								{
									"name": "openbare ruimte",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"0599300000002397\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['naam']).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"Weg\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [korteNaam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['korteNaam']).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2016-04-14\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"Corsanr.16/11216\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [woonplaatsIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['woonplaatsIdentificatie']).to.eql(\"3086\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^.*\\/openbareruimten\\/0599300000002397$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of ['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['woonplaats']['href']).to.match(/^.*\\/woonplaatsen\\/3086$/);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0599300000002397",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "lange straatnaam",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"0417300000000018\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['naam']).to.eql(\"Burgemeester van Nispen van Sevenaerstraat\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [korteNaam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['korteNaam']).to.eql(\"Burg v N v Sevenaerstr\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0417300000000018",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "woonplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [woonplaatsIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['woonplaatsIdentificatie']).to.eql(\"3169\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['woonplaats']['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/woonplaatsen\\/3169$/);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "1690300000000207",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Accept",
							"item": [
								{
									"name": "accept json",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0599300000002397",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "accept hal+json",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0599300000002397",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "enkele velden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"naam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.naam).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"pm.test(\"type not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"3086\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie?fields=woonplaatsIdentificatie,naam",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "woonplaatsIdentificatie,naam",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0599300000002397",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "links met _links",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"naam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/3086\");",
													"});",
													"",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie?fields=status,_links.woonplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "status,_links.woonplaats",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0599300000002397",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "naam",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.type Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.type).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Openbare ruimtenaam komt mogelijk niet overeen met de vermelding in het straatnaambesluit.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Korte naam is mogelijk onjuist, omdat de openbare ruimtenaam mogelijk niet overeen komt met de vermelding in het straatnaambesluit. Dit is geen indicatie dat de openbare ruimtenaam mogelijk onjuist is verkort.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "1709300000000432",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "Ligt in gerelateerde woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.type Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.type).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde woonplaats gebruikt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "1931300000000008",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "Ligt in gerelateerde woonplaats vragen om relatie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"//https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/368",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.type Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.type).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk verkeerde woonplaats gebruikt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie?fields=naam,_links.woonplaats,status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "naam,_links.woonplaats,status",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "1931300000000008",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "fields=korteNaam",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.type Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.type).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Korte naam is mogelijk onjuist, omdat de openbare ruimtenaam mogelijk niet overeen komt met de vermelding in het straatnaambesluit. Dit is geen indicatie dat de openbare ruimtenaam mogelijk onjuist is verkort.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie?fields=korteNaam",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "korteNaam",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "1709300000000432",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						},
						{
							"name": "foutsituaties",
							"item": [
								{
									"name": "identificatie bestaat niet (is geen openbare ruimte)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(404);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Opgevraagde resource bestaat niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.4\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [detail]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['detail']).to.eql(\"Geen openbare ruimte gevonden met id 0599200000193766\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.match(/^.*\\/openbareruimten\\/0599200000193766$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"notFound\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0599200000193766",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "onjuiste identificatie (pattern)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [detail]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['detail']).to.eql(\"Bad request.\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.match(/^.*\\/openbareruimten\\/onjuist$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"openbareruimteidentificatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"pattern\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "onjuist",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "onjuiste fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"openbareRuimteidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"api-version Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [detail]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['detail']).to.eql(\"Bad request.\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.match(/^.*\\/openbareruimten\\/0599300000002397\\?fields\\=korteNaam\\,onjuist\\.veld\\,documentnummer\\,bestaatNiet$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: bestaatNiet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1][name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['name']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1][code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['code']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1][reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: onjuist.veld.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/openbareruimten/:openbareRuimteidentificatie?fields=korteNaam,onjuist.veld,documentnummer,bestaatNiet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"openbareruimten",
												":openbareRuimteidentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "korteNaam,onjuist.veld,documentnummer,bestaatNiet",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "openbareRuimteidentificatie",
													"value": "0599300000002397",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele openbare ruimte met de identificatie. Een openbare ruimte is een buitenruimte met een naam die binnen één woonplaats ligt, bijvoorbeeld een straat of een plein. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/woonplaatsen/{woonplaatsidentificatie}",
					"item": [
						{
							"name": "mapping",
							"item": [
								{
									"name": "woonplaats",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^.*\\/woonplaatsen\\/2258$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"2258\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['naam']).to.eql(\"Beekbergen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2012-06-15\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"2012-009613\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "expand",
							"item": [
								{
									"name": "expand geometrie",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^.*\\/woonplaatsen\\/2258\\?expand\\=geometrie$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"2258\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['naam']).to.eql(\"Beekbergen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2012-06-15\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"2012-009613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'][0][0][0]).to.eql(195741.714);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'][0][0][1]).to.eql(465205.995);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie.vlak",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^.*\\/woonplaatsen\\/2258\\?expand\\=geometrie.*$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"2258\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['naam']).to.eql(\"Beekbergen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2012-06-15\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"2012-009613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'][0][0][0]).to.eql(195741.714);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'][0][0][1]).to.eql(465205.995);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie.vlak",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie.vlak",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie.vlak.type",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^.*\\/woonplaatsen\\/2258\\?expand\\=geometrie\\.vlak\\.type$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"2258\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['naam']).to.eql(\"Beekbergen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2012-06-15\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"2012-009613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"geometrie.vlak.coordinates Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie.vlak.type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie.vlak.type",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie.multivlak",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^.*\\/woonplaatsen\\/2258\\?expand\\=geometrie\\.multivlak$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"2258\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [naam]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['naam']).to.eql(\"Beekbergen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2012-06-15\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"2012-009613\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'][0][0][0]).to.eql(195741.714);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of [1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']['vlak']['coordinates'][0][0][1]).to.eql(465205.995);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']).to.eql({ });",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie.multivlak",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie.multivlak",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "Crs",
							"item": [
								{
									"name": "geen Accept-Crs",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Accept-Crs RD",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});"
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie zonder Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Header Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Header Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie met Accept-Crs RD",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"Check for existence of [geometrie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['geometrie']).not.to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie met Accept-Crs WGS84",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde coördinatenstelsel epsg:4326 wordt niet ondersteund.\");",
													"});",
													"",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    let baseUrl = pm.variables.get(\"baseUrl\");",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/woonplaatsen/2258?expand=geometrie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotAcceptable\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.6\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:4326",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "properties",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"naam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"Woonplaats aangewezen\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.eql(\"2012-06-15\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?fields=documentdatum,status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "documentdatum,status",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "self link",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"naam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.naam).to.eql(\"Beekbergen\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?fields=naam,_links.self",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "naam,_links.self",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "mogelijkOnjuist",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"naam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?fields=mogelijkOnjuist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "mogelijkOnjuist",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2258",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "foutsituatie",
							"item": [
								{
									"name": "niet gevonden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Opgevraagde resource bestaat niet.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"Check for existence of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"notFound\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.4\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(404);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "9999",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "onjuiste fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"Check for existence of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: bestaatNiet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['name']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['code']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: dit.bestaat.ook.niet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?fields=bestaatNiet,dit.bestaat.ook.niet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "bestaatNiet,dit.bestaat.ook.niet",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "9999",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "status",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "2787",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "alles maar geen geometrie vragen",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "3520",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(3);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[2]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Geometrie van de woonplaats is mogelijk onjuist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "3520",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand geometrie.multivlak",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"woonplaatsidentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.naam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.naam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.naam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(3);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[2]).to.eql(\"Woonplaatsnaam is mogelijk onjuist geschreven.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Woonplaats bestaat mogelijk niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Geometrie van de woonplaats is mogelijk onjuist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/woonplaatsen/:woonplaatsidentificatie?expand=geometrie.multivlak",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"woonplaatsen",
												":woonplaatsidentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "geometrie.multivlak",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "woonplaatsidentificatie",
													"value": "3520",
													"type": "string",
													"description": "Identificatie van een object uit de BAG. Deze is 4 lang bij een woonplaats en 16 lang bij de andere objecten."
												}
											]
										},
										"description": "Raadpleeg een actuele woonplaats met de identificatie. Een woonplaats is een gedeelte van het grondgebied van de gemeente met een naam. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met de gerelateerde resource geometrie, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/nummeraanduidingen/{nummeraanduidingIdentificatie}",
					"item": [
						{
							"name": "mapping",
							"item": [
								{
									"name": "huisletter en huisnummerToevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummer']).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisletter]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisletter']).to.eql(\"A\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['huisnummertoevoeging']).to.eql(\"3\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [postcode]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['postcode']).to.eql(\"2391PH\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2017-10-11\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"162189\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [openbareRuimteIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['openbareRuimteIdentificatie']).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/nummeraanduidingen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adres']['href']).to.eql(baseUrl + \"/adressen/0484200002040489\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [woonplaatsIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['woonplaatsIdentificatie']).to.eql(\"2852\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [openbareRuimteIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['openbareRuimteIdentificatie']).to.eql(\"1672300000000110\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [openbareRuimte]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['openbareRuimte']['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/openbareruimten\\/1672300000000110$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [woonplaats]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['woonplaats']['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/woonplaatsen\\/2852$/);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "geconstateerd",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [geconstateerd]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geconstateerd']).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"1070\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).to.match(/^.*\\/woonplaatsen\\/1070$/);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200022188962",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "woonplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"woonplaatsIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.woonplaatsIdentificatie).to.eql(\"1818\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/1818\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0118200000264072",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "velden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.eql(\"2391PH\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"Naamgeving uitgegeven\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adres not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimte not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=openbareRuimteIdentificatie,status,postcode",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "openbareRuimteIdentificatie,status,postcode",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "link met _links",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisletter not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.eql(\"1672300000000110\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/1672300000000110\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=openbareRuimteIdentificatie,_links.openbareRuimte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "openbareRuimteIdentificatie,_links.openbareRuimte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "huisnummer",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=huisletter",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "huisletter",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=huisnummertoevoeging",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "huisnummertoevoeging",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "huisnummer + huisletter",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=huisnummer,huisletter",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "huisnummer,huisletter",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "geconstateerd",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [geconstateerd]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geconstateerd']).to.eql(true);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.huisnummertoevoeging).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.eql(\"2603462\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adres).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geconstateerd equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geconstateerd).to.eql(true);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=documentnummer,geconstateerd",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "documentnummer,geconstateerd",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200022188962",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						},
						{
							"name": "foutafhandeling",
							"item": [
								{
									"name": "onjuiste fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.match(/^.*\\/nummeraanduidingen\\/0484200002040489\\?fields\\=postcode\\,bestaatNiet\\,huisletter\\,bestaatOokNiet\\,identificatie$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: bestaatNiet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: bestaatOokNiet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"fields\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=postcode,bestaatNiet,huisletter,bestaatOokNiet,identificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "postcode,bestaatNiet,huisletter,bestaatOokNiet,identificatie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "pattern nummeraanduidingIdentificatie",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.match(/^.*\\/nummeraanduidingen\\/0484$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"nummeraanduidingidentificatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"pattern\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "nummeraanduidingIdentificatie bestaat niet",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Opgevraagde resource bestaat niet.\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.match(/^.*\\/nummeraanduidingen\\/1234567890123456$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"notFound\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "1234567890123456",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "vragen om huisnummer geeft huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=postcode,huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "postcode,huisnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "veld niet gevraagd",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=documentnummer,documentdatum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "documentnummer,documentdatum",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								},
								{
									"name": "vragen om mogelijkOnjuist",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisnummer Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.huisletter Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.huisletter).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.korteNaam Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.postcode Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.woonplaatsIdentificatie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.openbareRuimteIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/nummeraanduidingen/:nummeraanduidingIdentificatie?fields=mogelijkOnjuist",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"nummeraanduidingen",
												":nummeraanduidingIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "mogelijkOnjuist",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"type": "string",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actuele nummeraanduiding met de identificatie. Een nummeraanduiding is een postcode, huisnummer met evt een huisletter en huisnummertoevoeging die hoort bij een verblijfsobject, een standplaats of een ligplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/adresseerbareobjecten/{adresseerbaarObjectIdentificatie}",
					"item": [
						{
							"name": "mapping",
							"item": [
								{
									"name": "verblijfsobject",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"1975-01-01\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"B2--1404--92\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of gebruiksdoelen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['gebruiksdoelen'][0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [geometrie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']).to.eql({",
													"   \"punt\" : {",
													"      \"type\" : \"Point\",",
													"      \"coordinates\" : [",
													"         98099.56,",
													"         438484.05,",
													"         0.0",
													"      ]",
													"   }",
													"});",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of pandIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['pandIdentificaties'][0]).to.eql(\"0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oppervlakte]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['oppervlakte']).to.eql(291);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Verblijfsobject in gebruik\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "school",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of gebruiksdoelen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['gebruiksdoelen'][0]).to.eql(\"onderwijsfunctie\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0518010000419718",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere panden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of gebruiksdoelen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['gebruiksdoelen'][0]).to.eql(\"kantoorfunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['gebruiksdoelen'][0]).to.eql(\"kantoorfunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['pandIdentificaties'][0]).to.eql(\"0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['pandIdentificaties'][1]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'][1]['href']).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "standplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"standplaats\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['vlak']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['vlak']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['vlak']['coordinates'][0][0]).to.eql([\n   85973.804,\n   443847.333,\n   0.0\n]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Plaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0503200000103062\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2010-08-25\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"1098450\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0503030000103062",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ligplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"ligplaats\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of geometrie [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['vlak']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['vlak']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of geometrie [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['vlak']['coordinates'][0][0]).to.eql([\n   113849.156,\n   462519.41,\n   0.0\n]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Plaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0569200000153647\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2010-09-10\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"10.08528\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0569020000012435",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "verblijfsobject ingetrokken",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"HTTP Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-type\")).to.eql(\"application/problem+json\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0518010000781839",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere gebruiksdoelen",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"gebruiksdoelen[] industriefunctie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.gebruiksdoelen.find(item => item=='industriefunctie')).to.eql(\"industriefunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"gebruiksdoelen[] kantoorfunctie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.gebruiksdoelen.find(item => item=='kantoorfunctie')).to.eql(\"kantoorfunctie\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0626019900006674",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met nevenadres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificaties]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties']).to.eql([\n   {\n      \"nummeraanduidingIdentificatie\" : \"0014200010877405\"\n   },\n   {\n      \"nummeraanduidingIdentificatie\" : \"0014200022197986\",\n      \"isNevenadres\" : true\n   }\n]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0014200010877405\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][1]['nummeraanduidingIdentificatie']).to.eql(\"0014200022197986\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [indicatieNevenadres]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][1]['isNevenadres']).to.eql(true);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/adressen\\/0014200010877405$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][1]['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/adressen\\/0014200022197986$/);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0014010011067299",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geconstateerd",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Match content of [geconstateerd]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geconstateerd']).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0014010022188227",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "Crs",
							"item": [
								{
									"name": "zonder Accept-Crs (verblijfsobject)",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"geometrie.punt.coordinates count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.punt.coordinates.length).to.eql(3);",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zonder Accept-Crs (standplaats)",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"geometrie.vlak.coordinates count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.vlak.coordinates.length).to.eql(1);",
													"    pm.expect(jsonData.geometrie.vlak.coordinates[0].length).to.eql(9);",
													"    pm.expect(jsonData.geometrie.vlak.coordinates[0][0].length).to.eql(3);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0503030000103062",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met Accept-Crs RD",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Accept-Crs WGS84",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"pm.test(\"title\", () => {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"Gevraagde coördinatenstelsel EPSG:4326 wordt niet ondersteund.\");",
													"});",
													"",
													"pm.test(\"code\", () => {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"crsNotAcceptable\");",
													"});",
													"",
													"pm.test.skip(\"description\", () => {",
													"    var jsonData = pm.response.json();",
													"    //niet in specificaties bepaald, maar nu staat in detail \"Bad request.\" wat niks toevoegt",
													"    pm.expect(jsonData.detail).to.eql(\"Ondersteunde CRS is epsg:28992\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "EPSG:4326",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zonder Accept-Crs met fields zonder geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.eql(\"0599010000165822\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.gebruiksdoelen[0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"pm.test(\"oppervlakte equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oppervlakte).to.eql(291);",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000165822?fields=identificatie,type,gebruiksdoelen,oppervlakte\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=identificatie,type,gebruiksdoelen,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "identificatie,type,gebruiksdoelen,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zonder Accept-Crs met fields inclusief geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"geometrie.punt.coordinates count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.punt.coordinates.length).to.eql(3);",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=identificatie,type,gebruiksdoelen,geometrie,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "identificatie,type,gebruiksdoelen,geometrie,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met Accept-Crs RD en fields inclusief geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"geometrie.punt.coordinates count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.punt.coordinates.length).to.eql(3);",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=identificatie,type,gebruiksdoelen,geometrie,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "identificatie,type,gebruiksdoelen,geometrie,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zonder Accept-Crs met fields zonder geometrie expand zonder geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=adressen.postcode,panden.identificatie,adressen.huisnummer,panden.oorspronkelijkBouwjaar&fields=identificatie,type,gebruiksdoelen,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "adressen.postcode,panden.identificatie,adressen.huisnummer,panden.oorspronkelijkBouwjaar",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "identificatie,type,gebruiksdoelen,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zonder Accept-Crs met fields zonder geometrie en expand met geometrie (volledige panden)",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"_embedded.panden[0].geometrie.coordinates count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.panden[0].geometrie.coordinates.length).to.eql(1);",
													"    pm.expect(jsonData._embedded.panden[0].geometrie.coordinates[0].length).to.eql(21);",
													"    pm.expect(jsonData._embedded.panden[0].geometrie.coordinates[0][0].length).to.eql(3);",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=adressen.huisnummer,panden,adressen.postcode&fields=identificatie,type,gebruiksdoelen,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "adressen.huisnummer,panden,adressen.postcode",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "identificatie,type,gebruiksdoelen,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "zonder Accept-Crs met fields zonder geometrie en expand met geometrie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"_embedded.panden[0].geometrie.coordinates count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData._embedded.panden[0].geometrie.coordinates.length).to.eql(1);",
													"    pm.expect(jsonData._embedded.panden[0].geometrie.coordinates[0].length).to.eql(21);",
													"    pm.expect(jsonData._embedded.panden[0].geometrie.coordinates[0][0].length).to.eql(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=adressen.postcode,panden.identificatie,adressen.huisnummer,panden.geometrie,panden.oorspronkelijkBouwjaar&fields=identificatie,type,gebruiksdoelen,geometrie,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "adressen.postcode,panden.identificatie,adressen.huisnummer,panden.geometrie,panden.oorspronkelijkBouwjaar",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "identificatie,type,gebruiksdoelen,geometrie,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met Accept-Crs met fields zonder geometrie en expand met geometrie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"panden geometrie exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates).not.to.be.an(\"undefined\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=adressen.postcode,panden.identificatie,adressen.huisnummer,panden.geometrie,panden.oorspronkelijkBouwjaar&fields=identificatie,type,gebruiksdoelen,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "adressen.postcode,panden.identificatie,adressen.huisnummer,panden.geometrie,panden.oorspronkelijkBouwjaar",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "identificatie,type,gebruiksdoelen,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "velden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.eql(\"B2--1404--92\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.gebruiksdoelen[0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie).to.eql(\"0599200000193766\");",
													"});",
													"",
													"pm.test(\"oppervlakte equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oppervlakte).to.eql(291);",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduidingen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=nummeraanduidingIdentificaties,documentnummer,oppervlakte,gebruiksdoelen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "nummeraanduidingIdentificaties,documentnummer,oppervlakte,gebruiksdoelen",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "links met _links",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.type).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oppervlakte not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oppervlakte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].nummeraanduidingen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=_links.panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "_links.panden",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "expand",
							"item": [
								{
									"name": "meerdere panden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_links'].[panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_embedded'].[panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(2);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).to.eql(\"0193100000048288\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][0]).to.eql(202949.047);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][1]).to.eql(501902.473);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][0]).to.eql(202950.875);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][1]).to.eql(501902.544);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][2][0]).to.eql(202952.697);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][2][1]).to.eql(501902.722);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][2][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][3][0]).to.eql(202954.504);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][3][1]).to.eql(501903.046);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][3][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][4][0]).to.eql(202955.392);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][4][1]).to.eql(501903.27);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][4][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][5][0]).to.eql(202956.28);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][5][1]).to.eql(501903.494);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][5][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][6][0]).to.eql(202957.156);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][6][1]).to.eql(501903.768);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][6][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][7][0]).to.eql(202958.018);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][7][1]).to.eql(501904.083);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][7][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][8][0]).to.eql(202958.879);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][8][1]).to.eql(501904.452);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][8][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][9][0]).to.eql(202959.712);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][9][1]).to.eql(501904.88);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][9][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][10][0]).to.eql(202960.477);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][10][1]).to.eql(501905.367);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][10][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][11][0]).to.eql(202961.181);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][11][1]).to.eql(501905.938);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][11][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][12][0]).to.eql(202961.877);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][12][1]).to.eql(501906.576);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][12][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][13][0]).to.eql(202962.518);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][13][1]).to.eql(501907.269);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][13][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][14][0]).to.eql(202963.097);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][14][1]).to.eql(501908.005);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][14][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][15][0]).to.eql(202963.611);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][15][1]).to.eql(501908.789);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][15][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][16][0]).to.eql(202964.027);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][16][1]).to.eql(501909.577);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][16][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][17][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][17][0]).to.eql(202964.371);",
													"});",
													"",
													"pm.test(\"coordinates[0][17][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][17][1]).to.eql(501910.399);",
													"});",
													"",
													"pm.test(\"coordinates[0][17][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][17][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][18][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][18][0]).to.eql(202954.176);",
													"});",
													"",
													"pm.test(\"coordinates[0][18][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][18][1]).to.eql(501914.219);",
													"});",
													"",
													"pm.test(\"coordinates[0][18][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][18][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][19][0]).to.eql(202950.538);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][19][1]).to.eql(501915.54);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][19][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][0]).to.eql(202948.838);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][1]).to.eql(501916.111);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][21][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][21][0]).to.eql(202945.292);",
													"});",
													"",
													"pm.test(\"coordinates[0][21][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][21][1]).to.eql(501917.306);",
													"});",
													"",
													"pm.test(\"coordinates[0][21][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][21][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][22][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][22][0]).to.eql(202943.446);",
													"});",
													"",
													"pm.test(\"coordinates[0][22][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][22][1]).to.eql(501917.93);",
													"});",
													"",
													"pm.test(\"coordinates[0][22][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][22][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][23][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][23][0]).to.eql(202940.264);",
													"});",
													"",
													"pm.test(\"coordinates[0][23][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][23][1]).to.eql(501918.964);",
													"});",
													"",
													"pm.test(\"coordinates[0][23][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][23][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][24][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][24][0]).to.eql(202936.844);",
													"});",
													"",
													"pm.test(\"coordinates[0][24][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][24][1]).to.eql(501920.074);",
													"});",
													"",
													"pm.test(\"coordinates[0][24][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][24][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][25][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][25][0]).to.eql(202934.268);",
													"});",
													"",
													"pm.test(\"coordinates[0][25][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][25][1]).to.eql(501920.881);",
													"});",
													"",
													"pm.test(\"coordinates[0][25][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][25][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][26][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][26][0]).to.eql(202931.692);",
													"});",
													"",
													"pm.test(\"coordinates[0][26][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][26][1]).to.eql(501921.687);",
													"});",
													"",
													"pm.test(\"coordinates[0][26][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][26][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][27][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][27][0]).to.eql(202929.102);",
													"});",
													"",
													"pm.test(\"coordinates[0][27][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][27][1]).to.eql(501922.447);",
													"});",
													"",
													"pm.test(\"coordinates[0][27][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][27][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][28][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][28][0]).to.eql(202925.471);",
													"});",
													"",
													"pm.test(\"coordinates[0][28][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][28][1]).to.eql(501923.558);",
													"});",
													"",
													"pm.test(\"coordinates[0][28][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][28][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][29][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][29][0]).to.eql(202920.789);",
													"});",
													"",
													"pm.test(\"coordinates[0][29][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][29][1]).to.eql(501924.813);",
													"});",
													"",
													"pm.test(\"coordinates[0][29][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][29][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][30][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][30][0]).to.eql(202916.107);",
													"});",
													"",
													"pm.test(\"coordinates[0][30][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][30][1]).to.eql(501926.068);",
													"});",
													"",
													"pm.test(\"coordinates[0][30][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][30][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][31][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][31][0]).to.eql(202914.003);",
													"});",
													"",
													"pm.test(\"coordinates[0][31][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][31][1]).to.eql(501926.433);",
													"});",
													"",
													"pm.test(\"coordinates[0][31][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][31][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][32][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][32][0]).to.eql(202911.082);",
													"});",
													"",
													"pm.test(\"coordinates[0][32][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][32][1]).to.eql(501927.15);",
													"});",
													"",
													"pm.test(\"coordinates[0][32][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][32][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][33][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][33][0]).to.eql(202906.846);",
													"});",
													"",
													"pm.test(\"coordinates[0][33][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][33][1]).to.eql(501928.19);",
													"});",
													"",
													"pm.test(\"coordinates[0][33][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][33][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][34][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][34][0]).to.eql(202903.177);",
													"});",
													"",
													"pm.test(\"coordinates[0][34][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][34][1]).to.eql(501929.024);",
													"});",
													"",
													"pm.test(\"coordinates[0][34][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][34][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][35][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][35][0]).to.eql(202899.508);",
													"});",
													"",
													"pm.test(\"coordinates[0][35][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][35][1]).to.eql(501929.857);",
													"});",
													"",
													"pm.test(\"coordinates[0][35][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][35][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][36][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][36][0]).to.eql(202899.393);",
													"});",
													"",
													"pm.test(\"coordinates[0][36][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][36][1]).to.eql(501929.347);",
													"});",
													"",
													"pm.test(\"coordinates[0][36][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][36][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][37][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][37][0]).to.eql(202899.719);",
													"});",
													"",
													"pm.test(\"coordinates[0][37][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][37][1]).to.eql(501929.273);",
													"});",
													"",
													"pm.test(\"coordinates[0][37][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][37][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][38][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][38][0]).to.eql(202898.027);",
													"});",
													"",
													"pm.test(\"coordinates[0][38][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][38][1]).to.eql(501921.559);",
													"});",
													"",
													"pm.test(\"coordinates[0][38][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][38][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][39][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][39][0]).to.eql(202891.36);",
													"});",
													"",
													"pm.test(\"coordinates[0][39][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][39][1]).to.eql(501922.088);",
													"});",
													"",
													"pm.test(\"coordinates[0][39][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][39][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][40][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][40][0]).to.eql(202890.257);",
													"});",
													"",
													"pm.test(\"coordinates[0][40][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][40][1]).to.eql(501910.218);",
													"});",
													"",
													"pm.test(\"coordinates[0][40][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][40][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][41][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][41][0]).to.eql(202889.789);",
													"});",
													"",
													"pm.test(\"coordinates[0][41][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][41][1]).to.eql(501910.255);",
													"});",
													"",
													"pm.test(\"coordinates[0][41][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][41][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][42][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][42][0]).to.eql(202889.599);",
													"});",
													"",
													"pm.test(\"coordinates[0][42][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][42][1]).to.eql(501907.847);",
													"});",
													"",
													"pm.test(\"coordinates[0][42][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][42][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][43][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][43][0]).to.eql(202889.137);",
													"});",
													"",
													"pm.test(\"coordinates[0][43][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][43][1]).to.eql(501907.887);",
													"});",
													"",
													"pm.test(\"coordinates[0][43][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][43][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][44][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][44][0]).to.eql(202889.062);",
													"});",
													"",
													"pm.test(\"coordinates[0][44][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][44][1]).to.eql(501907.17);",
													"});",
													"",
													"pm.test(\"coordinates[0][44][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][44][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][45][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][45][0]).to.eql(202940.048);",
													"});",
													"",
													"pm.test(\"coordinates[0][45][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][45][1]).to.eql(501903.112);",
													"});",
													"",
													"pm.test(\"coordinates[0][45][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][45][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][46][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][46][0]).to.eql(202949.047);",
													"});",
													"",
													"pm.test(\"coordinates[0][46][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][46][1]).to.eql(501902.473);",
													"});",
													"",
													"pm.test(\"coordinates[0][46][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][46][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.eql(2002);",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.eql(\"2014-09-22\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentnummer).to.eql(\"PU1409-0503HAF\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].identificatie).to.eql(\"0193100000043750\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][0][0]).to.eql(202888.022);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][0][1]).to.eql(501907.269);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][1][0]).to.eql(202888.101);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][1][1]).to.eql(501908.103);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][1][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][2][0]).to.eql(202887.632);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][2][1]).to.eql(501908.144);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][2][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][3][0]).to.eql(202887.827);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][3][1]).to.eql(501910.41);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][3][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][4][0]).to.eql(202889.789);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][4][1]).to.eql(501910.255);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][4][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][5][0]).to.eql(202890.257);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][5][1]).to.eql(501910.218);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][5][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][6][0]).to.eql(202891.36);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][6][1]).to.eql(501922.088);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][6][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][7][0]).to.eql(202825.993);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][7][1]).to.eql(501927.3);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][7][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][8][0]).to.eql(202822.102);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][8][1]).to.eql(501927.628);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][8][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][9][0]).to.eql(202822.043);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][9][1]).to.eql(501927.04);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][9][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][10][0]).to.eql(202818.983);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][10][1]).to.eql(501927.332);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][10][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][11][0]).to.eql(202818.085);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][11][1]).to.eql(501915.95);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][11][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][12][0]).to.eql(202820.557);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][12][1]).to.eql(501915.743);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][12][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][13][0]).to.eql(202820.392);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][13][1]).to.eql(501913.479);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][13][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][14][0]).to.eql(202819.028);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][14][1]).to.eql(501913.584);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][14][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][15][0]).to.eql(202818.937);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][15][1]).to.eql(501912.762);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][15][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][16][0]).to.eql(202888.022);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][16][1]).to.eql(501907.269);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][16][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].oorspronkelijkBouwjaar).to.eql(2002);",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].status).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentdatum).to.eql(\"2014-09-22\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentnummer).to.eql(\"PU1409-0503HAF\");",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[0]['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden.find(item => item.identificatie=='0193100000048288')['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0]['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0]['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0].nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].nummeraanduidingIdentificaties).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0].adresseerbaarObjectIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].adresseerbaarObjectIdentificaties).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[1]['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden.find(item => item.identificatie=='0193100000043750')['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1]['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adressen).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1]['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adresseerbareObjecten).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1].nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].nummeraanduidingIdentificaties).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1].adresseerbaarObjectIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].adresseerbaarObjectIdentificaties).not.to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=panden&fields=_links.panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "panden",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "_links.panden",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pand en adres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].straat).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(9);",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"3066VS\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaats).to.eql(\"Rotterdam\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"0599200000193766\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"0599300000002397\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"3086\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"0599010000165822\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).to.eql(\"0599100000103376\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][19][0]).to.eql(98089.66);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][19][1]).to.eql(438501.26);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][19][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.eql(\"2015-04-17\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentnummer).to.eql(\"Corsanr.15/34392\");",
													"});",
													"",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"adressen['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.match(/^.*\\/adressen\\/0599200000193766$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"adressen['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].openbareRuimte.href).to.match(/^.*\\/openbareruimten\\/0599300000002397$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"adressen['_links'].nummeraanduiding\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].nummeraanduiding.href).to.match(/^.*\\/nummeraanduidingen\\/0599200000193766$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"adressen['_links'].woonplaats\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].woonplaats.href).to.match(/^.*\\/woonplaatsen\\/3086$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"adressen['_links'].pand\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.match(/^.*\\/panden\\/0599100000103376$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[0]['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[0]['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen[0].href).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[0]['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten[0].href).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=panden,adressen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "panden,adressen",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "velden in een resource",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_links'].[panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_embedded'].[panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(2);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"_links.self exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.eql(2002);",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"[1].geometrie] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].oorspronkelijkBouwjaar).to.eql(2002);",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].status).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[0]['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0]['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0]['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0].nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0].adresseerbaarObjectIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].adresseerbaarObjectIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[1]['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1]['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1]['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1].nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1].adresseerbaarObjectIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].adresseerbaarObjectIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].pandIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0].pandIdentificaties[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[1]).to.eql(\"0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"adressen[0]['_links'].panden[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"korteNaam\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].korteNaam).to.eql(\"Koggelaan\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"huisnummer\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].huisnummer).to.eql(59);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"postcode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].postcode).to.eql(\"8017JN\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0193200000096680\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/0193300000000613\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=panden.status,panden.oorspronkelijkBouwjaar,adressen.postcode,adressen.huisnummer,adressen.pandIdentificaties,adressen.korteNaam&fields=_links.panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "panden.status,panden.oorspronkelijkBouwjaar,adressen.postcode,adressen.huisnummer,adressen.pandIdentificaties,adressen.korteNaam",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "_links.panden",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "links templated (incl waarden) en niet-templated",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_links'].[panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['panden'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_embedded'].[panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(2);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"[1].geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[0]['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0]['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0]['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[0].nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"panden[0].adresseerbaarObjectIdentificaties count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].adresseerbaarObjectIdentificaties.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"panden[1]['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1]['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1]['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adresseerbareObjecten).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"panden[1].nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													"pm.test(\"panden[1].adresseerbaarObjectIdentificaties count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].adresseerbaarObjectIdentificaties.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"adressen[0].pandIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"adressen[0].pandIdentificaties[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0].pandIdentificaties[1]).to.eql(\"0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0]['_links'].panden[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen[0]['_links'].panden[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].panden[1].href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl + \"/adressen/0193200000096680\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"['_links'].openbareRuimte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/0193300000000613\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=panden._links.adresseerbareObjecten,adressen._links.panden&fields=_links.panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "panden._links.adresseerbareObjecten,adressen._links.panden",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "_links.panden",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "foutafhandeling",
							"item": [
								{
									"name": "niet gevonden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Opgevraagde resource bestaat niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/adresseerbareobjecten/1234567890123456\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"notFound\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "1234567890123456",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "identificatie pattern",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/adresseerbareobjecten/123456789012345\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"adresseerbaarobjectidentificatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"pattern\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "123456789012345",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "alles",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(7);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[3]).to.eql(\"Locatie/contour mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[2]).to.eql(\"Het gebruiksdoel is mogelijk onjuist. In de BAG wordt het vergunde gebruik geregistreerd. Het gebruiksdoel moet overeenkomen met het gebruik zoals beschreven in de vergunning.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"De oppervlakte is mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[6]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"AdresseerbaarObject heeft mogelijk een verkeerd adres. Het gerelateerde hoofdadres(ID) mag niet worden gewijzigd want is onlosmakelijk met het adresseerbaar object verbonden. Kan alleen opgelost worden door de gegevens van het adres te veranderen, zodat een ander adres ontstaat.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[5]).to.eql(\"Mogelijk is ten onrechte een nevenadres toegekend of ontbreekt de relatie met een nevenadres.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[4]).to.eql(\"Mogelijk is het verblijfsobject nog niet in gebruik, is het verblijfsobject al ingetrokken of is er een vergunning tot verbouw verleend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0005018888889105",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Ligplaats Heeft als nevenadres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0301020000024211",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "oppervlakte",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.oppervlakte Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"De oppervlakte is mogelijk onjuist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0010010000059452",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"De oppervlakte is mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[1]).to.eql(\"Mogelijk is het verblijfsobject nog niet in gebruik, is het verblijfsobject al ingetrokken of is er een vergunning tot verbouw verleend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=documentnummer,oppervlakte,documentdatum,status",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "documentnummer,oppervlakte,documentdatum,status",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0005018888889105",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "fields zonder status",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"De oppervlakte is mogelijk onjuist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=documentnummer,oppervlakte,documentdatum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "documentnummer,oppervlakte,documentdatum",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0005018888889105",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "fields vraagt om relatie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"//https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/368",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?fields=_links.panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "_links.panden",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0005018888889105",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand vraagt om relatie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"//https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/368",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=panden&fields=documentnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "panden",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "documentnummer",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0005018888889105",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand vraagt om veld in relatie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"//https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/368",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=panden.oorspronkelijkBouwjaar&fields=identificatie,type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "panden.oorspronkelijkBouwjaar",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "identificatie,type",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0005018888889105",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand relatie in onderzoek",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"adresseerbaarObjectIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"//https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/368",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oppervlakte).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten/:adresseerbaarObjectIdentificatie?expand=panden.oorspronkelijkBouwjaar&fields=type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten",
												":adresseerbaarObjectIdentificatie"
											],
											"query": [
												{
													"key": "expand",
													"value": "panden.oorspronkelijkBouwjaar",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "type",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0005018888889105",
													"type": "string",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												}
											]
										},
										"description": "Raadpleeg een actueel adresseerbaar object met de identificatie. Dit is de identificatie van een verblijfsobject, ligplaats of standplaats. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/adresseerbareobjecten",
					"item": [
						{
							"name": "op nummeraanduidingIdentificatie",
							"item": [
								{
									"name": "verblijfsobject",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['type']).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['documentdatum']).to.eql(\"1975-01-01\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['documentnummer']).to.eql(\"B2--1404--92\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of gebruiksdoelen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['gebruiksdoelen'][0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [geometrie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['geometrie']).to.eql({",
													"   \"punt\" : {",
													"      \"type\" : \"Point\",",
													"      \"coordinates\" : [",
													"         98099.56,",
													"         438484.05,",
													"         0.0",
													"      ]",
													"   }",
													"});",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of pandIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['pandIdentificaties'][0]).to.eql(\"0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oppervlakte]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['oppervlakte']).to.eql(291);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['status']).to.eql(\"Verblijfsobject in gebruik\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "ligplaats",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['type']).to.eql(\"ligplaats\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of geometrie [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['geometrie']['vlak']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['geometrie']['vlak']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of geometrie [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['geometrie']['vlak']['coordinates'][0][0]).to.eql([\n   113849.156,\n   462519.41,\n   0.0\n]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['status']).to.eql(\"Plaats aangewezen\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0569200000153647\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['documentdatum']).to.eql(\"2010-09-10\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['documentnummer']).to.eql(\"10.08528\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0569200000153647",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0569200000153647",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "op nevenadres",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0014010011067299\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0014200010877405",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200010877405",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "nummeraanduiding bestaat niet",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/adresseerbareobjecten\\?nummeraanduidingIdentificatie\\=1234567890123456$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [['_embedded']]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).to.eql({ });",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=1234567890123456",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "1234567890123456",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "op pandIdentificatie",
							"item": [
								{
									"name": "verblijfsobject",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['type']).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['documentdatum']).to.eql(\"1975-01-01\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['documentnummer']).to.eql(\"B2--1404--92\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of gebruiksdoelen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['gebruiksdoelen'][0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [geometrie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['geometrie']).to.eql({",
													"   \"punt\" : {",
													"      \"type\" : \"Point\",",
													"      \"coordinates\" : [",
													"         98099.56,",
													"         438484.05,",
													"         0.0",
													"      ]",
													"   }",
													"});",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of pandIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['pandIdentificaties'][0]).to.eql(\"0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oppervlakte]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['oppervlakte']).to.eql(291);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['status']).to.eql(\"Verblijfsobject in gebruik\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000165822')['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"content-type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"version Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['type']).to.eql(\"verblijfsobject\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['documentdatum']).to.eql(\"1975-01-01\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['documentnummer']).to.eql(\"B2--1404--92\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of gebruiksdoelen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['gebruiksdoelen'][0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of [geometrie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['geometrie']).to.eql({",
													"   \"punt\" : {",
													"      \"type\" : \"Point\",",
													"      \"coordinates\" : [",
													"         98096.28,",
													"         438497.09,",
													"         0.0",
													"      ]",
													"   }",
													"});",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0599200000193765\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of [oppervlakte]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['oppervlakte']).to.eql(291);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"[0] Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(item => item.identificatie=='0599010000103376')['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000103376\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0599100000103376",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "eerste pand van verblijfsobject",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0193010000096628\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0193100000048288",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0193100000048288",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "tweede pand van verblijfsobject",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0193010000096628\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0193100000043750",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0193100000043750",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "veel verblijfsobjecten in pand",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(20);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pandIdentificatie met gebruiksdoelen",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"title\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0014100022188747&fields=gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie&gebruiksdoelen=overige gebruiksfunctie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0014100022188747",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "gebruiksdoelen",
													"value": "overige gebruiksfunctie"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere panden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(20);",
													"});",
													"",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData._links.last.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificaties=\" + pm.collectionVariables.get(\"pandIdentificaties\") + \"&page=3\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificaties=0503100000032487,0503100000011931,0503100000011659",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.adresregel1",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "pandIdentificaties",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "pandIdentificaties",
													"value": "0503100000032487,0503100000011931,0503100000011659"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere panden last",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(3);",
													"});",
													"",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData._links.last).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData._links.next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData._links.first.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificaties=\" + pm.collectionVariables.get(\"pandIdentificaties\") + \"&page=1\");",
													"});",
													"",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData._links.previous.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificaties=\" + pm.collectionVariables.get(\"pandIdentificaties\") + \"&page=2\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?page=3&pandIdentificaties=0503100000032487,0503100000011931,0503100000011659",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.adresregel1",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "pandIdentificaties",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "3",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "pandIdentificaties",
													"value": "0503100000032487,0503100000011931,0503100000011659"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere panden waarvan 1 niet bestaat",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(20);",
													"});",
													"",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData._links.last.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificaties=\" + pm.collectionVariables.get(\"pandIdentificaties\") + \"&page=3\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificaties=0503100000032487,0503100000011931,1234107890123456,0503100000011659",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.adresregel1",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "pandIdentificaties",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "pandIdentificaties",
													"value": "0503100000032487,0503100000011931,1234107890123456,0503100000011659"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pandIdentificatie bestaat niet",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificatie=1234567890123456\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [['_embedded']]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).to.eql({ });",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=1234567890123456",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "1234567890123456",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "op Bounding Box",
							"item": [
								{
									"name": "zoeknauwkeurigheid",
									"item": [
										{
											"name": "bbox coördinaat is geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.not.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196000.000,440000.000,196733.427,439931.991",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196000.000,440000.000,196733.427,439931.991"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox coördinaat ligt 1mm van geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196000.000,440000.000,196733.427,439931.992",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196000.000,440000.000,196733.427,439931.992"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox verbindingslijn ligt 1mm van geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196000.000,440000.000,196800.000,439931.992",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196000.000,440000.000,196800.000,439931.992"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox verbindingslijn ligt 0,4mm van geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.not.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196000.0000,440000.0000,196800.0000,439931.9914",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196000.0000,440000.0000,196800.0000,439931.9914"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox verbindingslijn ligt 0,6mm van geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196000.0000,440000.0000,196800.0000,439931.9916",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196000.0000,440000.0000,196800.0000,439931.9916"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in centimeters valt buiten geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    //pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.be.an(\"undefined\");\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten']).to.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196720.00,439932.00,196733.42,439930.00",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196720.00,439932.00,196733.42,439930.00"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in centimeters valt binnen geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.not.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196733.42,439932.00,196735.00,439930.00",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196733.42,439932.00,196735.00,439930.00"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in meters valt buiten geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196000,440000,196733,439931",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196000,440000,196733,439931"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in meters valt binnen geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"zoekresultaat\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].find(p => p.identificatie==\"0226010000038820\")).to.not.be.an(\"undefined\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196733,439931,197000,440000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "bbox",
															"value": "196733,439931,197000,440000"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Alleen BB",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"collection self link\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten?bbox=135228,457502,135246,457457\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0344010000065956\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['geometrie']['punt']['type']).to.eql(\"Point\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [coordinates]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['geometrie']['punt']['coordinates'].length).to.eql(3);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of adresseerbareObject[1] coordinates\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][1]['geometrie']['punt']['coordinates']).to.eql([\r",
													"    135229.459,\r",
													"    457493.918,\r",
													"    0.0\r",
													"]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['type']).to.eql(\"verblijfsobject\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentdateum]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['documentdatum']).to.eql(\"2010-06-10\");\r",
													"});\r",
													"\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentnummer]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['documentnummer']).to.eql(\"SO.10.04.70.82\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].self\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_links']['self']['href']).to.eql(baseUrl + \"/adresseerbareobjecten/0344010000065956\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/0344200000074243\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].panden[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_links']['panden'][0]['href']).to.eql(baseUrl + \"/panden/0344100000042853\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of adresseerbareObjectIdentificaties[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['pandIdentificaties'][0]).to.eql(\"0344100000042853\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[1]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0344200000074243\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "op de bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0344010000065956\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135228.463,457492.485,135229,457493",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228.463,457492.485,135229,457493"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox raakt contour",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0503030000103062\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85973.804,443847.333,85974,443850",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85973.804,443847.333,85974,443850"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "overige gebruiksfunctie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=118078,404308,118145,404359&gebruiksdoelen=overige gebruiksfunctie&geconstateerd=false&fields=gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie&pageSize=100&type=verblijfsobject&oppervlakte[min]=24&oppervlakte[max]=91",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "118078,404308,118145,404359"
												},
												{
													"key": "gebruiksdoelen",
													"value": "overige gebruiksfunctie"
												},
												{
													"key": "page",
													"value": "18",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "false"
												},
												{
													"key": "fields",
													"value": "gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "type",
													"value": "verblijfsobject"
												},
												{
													"key": "oppervlakte[min]",
													"value": "24"
												},
												{
													"key": "oppervlakte[max]",
													"value": "91"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "geconstateerd",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=233610,582600,233665,582620&gebruiksdoelen=woonfunctie&geconstateerd=true&fields=gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie&oppervlakte[min]=30&oppervlakte[max]=40",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "233610,582600,233665,582620"
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie"
												},
												{
													"key": "page",
													"value": "18",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "true"
												},
												{
													"key": "fields",
													"value": "gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie"
												},
												{
													"key": "pageSize",
													"value": "100",
													"disabled": true
												},
												{
													"key": "type",
													"value": "verblijfsobject",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "30"
												},
												{
													"key": "oppervlakte[max]",
													"value": "40"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "alleen minimum oppervlakte",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=233610,582600,233665,582620&gebruiksdoelen=winkelfunctie&fields=gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie&oppervlakte[min]=400",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "233610,582600,233665,582620"
												},
												{
													"key": "gebruiksdoelen",
													"value": "winkelfunctie"
												},
												{
													"key": "page",
													"value": "18",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "true",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie"
												},
												{
													"key": "pageSize",
													"value": "100",
													"disabled": true
												},
												{
													"key": "type",
													"value": "verblijfsobject",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "400"
												},
												{
													"key": "oppervlakte[max]",
													"value": "40",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "standplaats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85900,443800,85990,443890&type=standplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85900,443800,85990,443890"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "type",
													"value": "standplaats"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ligplaats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85900,443800,85990,443890&type=ligplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85900,443800,85990,443890"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "type",
													"value": "ligplaats"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "geen standplaats of ligplaats bij oppervlakte",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													"\r",
													"pm.test(\"geen standplaats\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"standplaats\");\r",
													"});\r",
													"\r",
													"pm.test(\"geen ligplaats\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ligplaats\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85900,443800,85990,443890&oppervlakte[max]=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85900,443800,85990,443890"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "type",
													"value": "standplaats",
													"disabled": true
												},
												{
													"key": "oppervlakte[max]",
													"value": "100"
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "geen standplaats of ligplaats bij gebruiksdoelen",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													"\r",
													"pm.test(\"geen standplaats\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"standplaats\");\r",
													"});\r",
													"\r",
													"pm.test(\"geen ligplaats\", function () {\r",
													"    pm.expect(pm.response.text()).to.not.include(\"ligplaats\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85900,443800,85990,443890&gebruiksdoelen=woonfunctie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85900,443800,85990,443890"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "type",
													"value": "standplaats",
													"disabled": true
												},
												{
													"key": "oppervlakte[max]",
													"value": "100",
													"disabled": true
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "type standplaats en oppervlakte leeg",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"minimaal 1 resultaat\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.be.gte(1);\r",
													"});\r",
													"\r",
													"pm.test(\"wel standplaats\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"standplaats\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85900,443800,85990,443890&type=standplaats&oppervlakte[max]=",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85900,443800,85990,443890"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "type",
													"value": "standplaats"
												},
												{
													"key": "oppervlakte[max]",
													"value": ""
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "pageSize 50 geen page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [7]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][7]['identificatie']).to.eql(\"0344010000079416\");\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [14]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][14]['identificatie']).to.eql(\"0344010000073781\");\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [15]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][15]['identificatie']).to.eql(\"0344010000152274\");\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [20]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][20]['identificatie']).to.eql(\"0344010000073955\");\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [21]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][21]['identificatie']).to.eql(\"0344010000153527\");\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [27]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][27]['identificatie']).to.eql(\"0344010000081459\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&pageSize=50",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "50"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "pagesize 7 page 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0344010000073781\");\r",
													"});\r",
													"\r",
													"pm.test(\"adresseerbaarObjectIdentificaties [6]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][6]['identificatie']).to.eql(\"0344010000073955\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&page=3&pageSize=7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie",
													"disabled": true
												},
												{
													"key": "page",
													"value": "3"
												},
												{
													"key": "pageSize",
													"value": "7"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"bbox\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData['_embedded']['adresseerbareObjecten']===undefined) {",
											"        return;",
											"    }",
											"",
											"    let bbox = pm.collectionVariables.get('bbox').split(',');",
											"    pm.expect(bbox.length).to.eql(4);",
											"    if (bbox[0]<bbox[2]) {",
											"        var links = parseFloat(bbox[0]);",
											"        var rechts = parseFloat(bbox[2]);",
											"    } else {",
											"        var links = parseFloat(bbox[2]);",
											"        var rechts = parseFloat(bbox[0]);",
											"    }",
											"",
											"    if (bbox[1]<bbox[3]) {",
											"        var boven = parseFloat(bbox[1]);",
											"        var onder = parseFloat(bbox[3]);",
											"    } else {",
											"        var boven = parseFloat(bbox[3]);",
											"        var onder = parseFloat(bbox[1]);",
											"    }",
											"",
											"    jsonData['_embedded']['adresseerbareObjecten'].forEach(function(ado) {",
											"        if (ado.type=='verblijfsobject') {",
											"            pm.expect(ado.geometrie.punt.coordinates[0], 'links').to.be.gte(links-0.0005);",
											"            pm.expect(ado.geometrie.punt.coordinates[1], 'boven').to.be.gte(boven-0.0005);",
											"            pm.expect(ado.geometrie.punt.coordinates[0], 'rechts').to.be.lte(rechts+0.0005);",
											"            pm.expect(ado.geometrie.punt.coordinates[1], 'onder').to.be.lte(onder+0.0005);",
											"        }",
											"        // to do: check bbox raakt contour (standplaats of ligplaats)",
											"    });",
											"});",
											"",
											"pm.test(\"geconstateerd\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData['_embedded']['adresseerbareObjecten']===undefined) {",
											"        return;",
											"    }",
											"",
											"    jsonData['_embedded']['adresseerbareObjecten'].forEach(function(ado) {",
											"        if (pm.collectionVariables.get('geconstateeerd')==true) {",
											"            pm.expect(ado.geconstateerd, 'geconstateerd is true').to.eql(true);",
											"        }",
											"",
											"        if (pm.collectionVariables.get('geconstateeerd')==false) {",
											"            pm.expect(ado.geconstateerd, 'geconstateerd is false').to.eql(false);",
											"        }",
											"    });",
											"});",
											"",
											"pm.test(\"oppervlakte\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData['_embedded']['adresseerbareObjecten']===undefined) {",
											"        return;",
											"    }",
											"",
											"    jsonData['_embedded']['adresseerbareObjecten'].forEach(function(ado) {",
											"        if (pm.collectionVariables.get('oppervlakte[min]')!== undefined && pm.collectionVariables.get('oppervlakte[min]')!==\"\") {",
											"            pm.expect(ado.oppervlakte, 'oppervlakte min').to.be.gte(parseInt(pm.collectionVariables.get('oppervlakte[min]')));",
											"        }",
											"",
											"        if (pm.collectionVariables.get('oppervlakte[max]')!== undefined && pm.collectionVariables.get('oppervlakte[max]')!==\"\") {",
											"            pm.expect(ado.oppervlakte, 'oppervlakte max').to.be.lte(parseInt(pm.collectionVariables.get('oppervlakte[max]')));",
											"        }",
											"    });",
											"});",
											"",
											"pm.test(\"gebruiksdoelen\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData['_embedded']['adresseerbareObjecten']===undefined) {",
											"        return;",
											"    }",
											"",
											"    if (pm.collectionVariables.get('gebruiksdoelen')!==undefined) {",
											"        var gebruiksdoelen = pm.collectionVariables.get('gebruiksdoelen').split(',');",
											"    ",
											"        jsonData['_embedded']['adresseerbareObjecten'].forEach(function(ado) {",
											"            pm.expect(ado.gebruiksdoelen.filter(g => gebruiksdoelen.includes(g)).length).to.be.gte(1);",
											"        });",
											"    }",
											"});",
											"",
											"pm.test(\"type\", function () {",
											"    var jsonData = pm.response.json();",
											"    ",
											"    if (jsonData['_embedded']['adresseerbareObjecten']===undefined) {",
											"        return;",
											"    }",
											"",
											"    if (pm.collectionVariables.get('type')!==undefined) {",
											"        jsonData['_embedded']['adresseerbareObjecten'].forEach(function(ado) {",
											"            pm.expect(ado.type).to.eql(pm.collectionVariables.get('type'));",
											"        });",
											"    };",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "op numId",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"domein not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].domein).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].type).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].documentdatum).to.eql(\"1975-01-01\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oppervlakte not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].oppervlakte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].status).to.eql(\"Verblijfsobject in gebruik\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].self.href).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000165822\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&fields=documentdatum,status,_links.panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766"
												},
												{
													"key": "fields",
													"value": "documentdatum,status,_links.panden"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "op pandId",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"domein not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].domein).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].type).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].gebruiksdoelen[0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].pandIdentificaties[0]).to.eql(\"0826100000000467\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oppervlakte equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].oppervlakte).to.eql(90);",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].self.href).to.eql(baseUrl + \"/adresseerbareobjecten/0826010000016707\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1].gebruiksdoelen[0]).to.eql(\"overige gebruiksfunctie\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1].pandIdentificaties[0]).to.eql(\"0826100000000467\");",
													"});",
													"",
													"pm.test(\"oppervlakte equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1].oppervlakte).to.eql(24);",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[1]['_links'].self.href).to.eql(baseUrl + \"/adresseerbareobjecten/0826010000016708\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[2].gebruiksdoelen[0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"pm.test(\"[2].geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[2].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[2].pandIdentificaties[0]).to.eql(\"0826100000000467\");",
													"});",
													"",
													"pm.test(\"oppervlakte equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[2].oppervlakte).to.eql(90);",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[3].gebruiksdoelen[0]).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[3].pandIdentificaties[0]).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oppervlakte exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[3].oppervlakte).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"gebruiksdoelen[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19].gebruiksdoelen[0]).to.eql(\"woonfunctie\");",
													"});",
													"",
													"pm.test(\"[19].geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19].pandIdentificaties[0]).to.eql(\"0826100000000467\");",
													"});",
													"",
													"pm.test(\"oppervlakte equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19].oppervlakte).to.eql(90);",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[19]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.include(\"/adresseerbareobjecten?pandIdentificatie=0826100000000467\");",
													"});",
													"",
													"pm.test(\"href contains\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.include(\"page=2\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&fields=pandIdentificaties,gebruiksdoelen,oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "pandIdentificaties,gebruiksdoelen,oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "Crs",
							"item": [
								{
									"name": "op pandIdentificatie - zonder Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0599100000103376",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "op nummeraanduidingIdentificatie - zonder Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "met Accept-Crs RD",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(1);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "Niet-ondersteunde Accept-Crs WGS84",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde coördinatenstelsel epsg:4326 wordt niet ondersteund.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotAcceptable\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:4326",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "op pandIdentificatie - zonder Accept-Crs niet vragen om geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(2);",
													"});",
													"",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0599100000103376&fields=oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geen accept-Crs, geen geometrie gevraagd in ado, wel pand",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(2);",
													"});",
													"",
													"pm.test.skip(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Content-Type Header Equals\", () => {    // geskipped omdat er geen gemoetrie meer geretourneerd wordt als het pand niet embedded mag worden. ",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0599100000103376&fields=oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "fields",
													"value": "oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "onjuiste Accept-Crs, geen geometrie in ado, wel pand",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde coördinatenstelsel epsg:4326 wordt niet ondersteund.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotAcceptable\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:4326",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&expand=panden&fields=oppervlakte",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "panden",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "oppervlakte",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "paginering",
							"item": [
								{
									"name": "geen page of pageSize",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=2$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"first Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=4$/);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"20\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"1\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "page=1",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=1$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=2$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"first Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=4$/);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"20\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"1\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&page=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "geen page, pageSize=100",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&pageSize\\=100$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"first Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"next Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"last Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"100\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"1\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&pageSize=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "100"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "page=2",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(20);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=2$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"first Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"previous Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"next Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=1$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=1$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=3$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=4$/);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"20\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"2\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&page=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "2",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "page=laatste pagina",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(12);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=4$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"first Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"previous Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"next Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"last Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=1$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=3$/);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&page=4",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "4",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pageSize=deler van aantal",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(12);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&pageSize\\=12$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"first Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"previous Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&pageSize\\=12\\&page\\=2$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&pageSize\\=12\\&page\\=6$/);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"12\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"1\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&pageSize=12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "12"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pageSize=deler van aantal, laatste pagina",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(12);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&page\\=6\\&pageSize\\=12$/);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"next Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"last Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&pageSize\\=12\\&page\\=1$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].previous.href).to.match(/^.*\\/adresseerbareobjecten\\?pandIdentificatie\\=0826100000000467\\&pageSize\\=12\\&page\\=5$/);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&page=6&pageSize=12",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "6",
													"description": "aantal=72, dus page=6 is laatste pagina en heeft 12 items"
												},
												{
													"key": "pageSize",
													"value": "12"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "heel veel adresseerbare objecten",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(parseInt(pm.variables.get(\"pageSize\")));",
													"});",
													"",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=1\");",
													"});",
													"",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    var prev = parseInt(pm.variables.get(\"page\")) - 1;",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=\" + prev);",
													"});",
													"",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    var nxt = parseInt(pm.variables.get(\"page\")) + 1; // paginanummer volgende pagina",
													"    pm.expect(jsonData['_links'].next.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=\" + nxt);",
													"});",
													"",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    // last = round_up(items/pageSize) = 296/7 = 42.28 --> 43",
													"    var last = Math.ceil(296/parseInt(pm.variables.get(\"pageSize\")));",
													"",
													"    pm.expect(jsonData['_links'].last.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=\" + last);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"20\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"2\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0014100022188747&page=4&pageSize=7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0014100022188747",
													"description": "dit is een studentenhuis met 296 adresseerbare objecten"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "4",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "7"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "heel veel adresseerbare objecten laatste pagina",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"JSONPath Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    // 296 adressen: aantal_op_pagina = totaal_aantal - pageSize * (page - 1) = 296 - 50*(6-1) = 46",
													"    var aantal = 296 - parseInt(pm.variables.get(\"pageSize\")) * (parseInt(pm.variables.get(\"page\")) - 1)",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(aantal);",
													"});",
													"",
													"pm.test(\"first\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].first.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=1\");",
													"});",
													"",
													"pm.test(\"previous\", function () {",
													"    var jsonData = pm.response.json();",
													"    var prev = parseInt(pm.variables.get(\"page\")) - 1;",
													"    pm.expect(jsonData['_links'].previous.href).to.eql(baseUrl + \"/adresseerbareobjecten?pandIdentificatie=\" + pm.variables.get(\"pandIdentificatie\") + \"&pageSize=\" + pm.variables.get(\"pageSize\") + \"&page=\" + prev);",
													"});",
													"",
													"pm.test(\"next\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].next).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"last\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].last).to.be.an(\"undefined\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Limit\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Limit\")).to.eql(\"20\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test.skip(\"HTTP Header X-Pagination-Page\", () => {",
													"    pm.expect(pm.response.headers.get(\"X-Pagination-Page\")).to.eql(\"2\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0014100022188747&page=43&pageSize=7",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0014100022188747",
													"description": "dit is een studentenhuis met 296 adresseerbare objecten"
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "43",
													"description": "laatste pagina = round_up(296/7)=43"
												},
												{
													"key": "pageSize",
													"value": "7"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "alles - op nummeraanduidingIdentificatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.gebruiksdoelen).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.nummeraanduidingIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting.length).to.eql(7);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[3]).to.eql(\"Locatie/contour mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[2]).to.eql(\"Het gebruiksdoel is mogelijk onjuist. In de BAG wordt het vergunde gebruik geregistreerd. Het gebruiksdoel moet overeenkomen met het gebruik zoals beschreven in de vergunning.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[1]).to.eql(\"De oppervlakte is mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[6]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[0]).to.eql(\"AdresseerbaarObject heeft mogelijk een verkeerd adres. Het gerelateerde hoofdadres(ID) mag niet worden gewijzigd want is onlosmakelijk met het adresseerbaar object verbonden. Kan alleen opgelost worden door de gegevens van het adres te veranderen, zodat een ander adres ontstaat.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[5]).to.eql(\"Mogelijk is ten onrechte een nevenadres toegekend of ontbreekt de relatie met een nevenadres.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[4]).to.eql(\"Mogelijk is het verblijfsobject nog niet in gebruik, is het verblijfsobject al ingetrokken of is er een vergunning tot verbouw verleend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0005208888967466",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0005208888967466",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "alles - op pandIdentificatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.gebruiksdoelen).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.nummeraanduidingIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting.length).to.eql(7);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[3]).to.eql(\"Locatie/contour mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[2]).to.eql(\"Het gebruiksdoel is mogelijk onjuist. In de BAG wordt het vergunde gebruik geregistreerd. Het gebruiksdoel moet overeenkomen met het gebruik zoals beschreven in de vergunning.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[1]).to.eql(\"De oppervlakte is mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[6]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[0]).to.eql(\"AdresseerbaarObject heeft mogelijk een verkeerd adres. Het gerelateerde hoofdadres(ID) mag niet worden gewijzigd want is onlosmakelijk met het adresseerbaar object verbonden. Kan alleen opgelost worden door de gegevens van het adres te veranderen, zodat een ander adres ontstaat.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[5]).to.eql(\"Mogelijk is ten onrechte een nevenadres toegekend of ontbreekt de relatie met een nevenadres.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[4]).to.eql(\"Mogelijk is het verblijfsobject nog niet in gebruik, is het verblijfsobject al ingetrokken of is er een vergunning tot verbouw verleend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0005100000006095",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0005100000006095",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "fields",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.length).to.eql(4);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie==\"0005018888889105\").mogelijkOnjuist.oppervlakte).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie==\"0005018888889105\").mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie==\"0005018888889105\").mogelijkOnjuist.gebruiksdoelen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie==\"0005018888889105\").mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie==\"0005018888889105\").mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie==\"0005018888889105\").mogelijkOnjuist.pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[0]).to.eql(\"De oppervlakte is mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten.find(item => item.identificatie=='0005018888889105').mogelijkOnjuist.toelichting[1]).to.eql(\"Mogelijk is het verblijfsobject nog niet in gebruik, is het verblijfsobject al ingetrokken of is er een vergunning tot verbouw verleend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0005100000006095&fields=documentnummer,oppervlakte,documentdatum,status,identificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0005100000006095",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "documentnummer,oppervlakte,documentdatum,status,identificatie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand adres - huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen.mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0109200000019564&expand=adressen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand adres.huisnummertoevoeging",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen.mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0109200000019564&expand=adressen.huisnummertoevoeging",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.huisnummertoevoeging",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand adres.huisnummer",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"adressen.mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.huisnummertoevoeging).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is ten onrechte een huisnummertoevoeging toegekend, ontbreekt de huisnummertoevoeging ten onrechte, of is een verkeerde huisnummertoevoeging toegekend.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0109200000019564&expand=adressen.huisnummer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.huisnummer",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand adres veld niet gevraagd",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adressen.mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [straat]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_embedded']['adressen'][0]['straat']).to.eql(\"Rembrandtlaan\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0109200000019564&expand=adressen.straat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.straat",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand relatie in onderzoek",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.gebruiksdoelen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.gebruiksdoelen).to.be.an(\"Undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.geometrie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.geometrie).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.nummeraanduidingIdentificaties).to.be.an(\"Undefined\");",
													"});",
													"",
													"//https://github.com/VNG-Realisatie/Haal-Centraal-BAG-bevragen/issues/368",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.pandIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.pandIdentificaties).to.eql(true);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oppervlakte\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.oppervlakte).to.be.an(\"Undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.status).to.be.an(\"Undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting.length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[1]).to.eql(\"Verblijfsobject maakt mogelijk deel uit van een ander pand.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Locatie/contour mogelijk onjuist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0005208888967466&expand=panden.oorspronkelijkBouwjaar&fields=geometrie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0005208888967466",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "panden.oorspronkelijkBouwjaar",
													"description": "Maakt onderdeel uit van gerelateerd Pand is in onderzoek"
												},
												{
													"key": "fields",
													"value": "geometrie",
													"description": "Ik verwacht dus mogelijkOnjuist geometrie + pandIdentificaties"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "foutsituaties",
							"item": [
								{
									"name": "meerdere foute parameters",
									"item": [
										{
											"name": "notAllowedCharacter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(8);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"invalidParams 1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"bbox\");\r",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"number\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=\"fout\"&pandIdentificatie=\"fout\"&expand=\"fout\"&fields=\"fout\"&page=fout&pageSize=fout&pandIdentificaties=\"fout\"&geconstateerd=\"fout\"&type=\"fout\"&gebruiksdoelen=\"fout\"&bbox=135207,457400,135418,457162,fout&oppervlakte[min]=fout&oppervlakte[max]=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "\"fout\""
														},
														{
															"key": "pandIdentificatie",
															"value": "\"fout\""
														},
														{
															"key": "expand",
															"value": "\"fout\""
														},
														{
															"key": "fields",
															"value": "\"fout\""
														},
														{
															"key": "page",
															"value": "fout"
														},
														{
															"key": "pageSize",
															"value": "fout"
														},
														{
															"key": "pandIdentificaties",
															"value": "\"fout\""
														},
														{
															"key": "geconstateerd",
															"value": "\"fout\""
														},
														{
															"key": "type",
															"value": "\"fout\""
														},
														{
															"key": "gebruiksdoelen",
															"value": "\"fout\""
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,fout"
														},
														{
															"key": "oppervlakte[min]",
															"value": "fout"
														},
														{
															"key": "oppervlakte[max]",
															"value": "fout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "unsupportedCombi",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    //pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
															"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
															"});\r",
															"\r",
															"pm.test.skip(\"invalidParams 1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"bbox\");\r",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"number\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=fout&pandIdentificatie=fout&expand=fout&fields=fout&page=fout&pageSize=fout&pandIdentificaties=fout&geconstateerd=fout&type=fout&gebruiksdoelen=fout&bbox=135207,457400,135418,457162,fout&oppervlakte[min]=fout&oppervlakte[max]=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout"
														},
														{
															"key": "pandIdentificatie",
															"value": "fout"
														},
														{
															"key": "expand",
															"value": "fout"
														},
														{
															"key": "fields",
															"value": "fout"
														},
														{
															"key": "page",
															"value": "fout"
														},
														{
															"key": "pageSize",
															"value": "fout"
														},
														{
															"key": "pandIdentificaties",
															"value": "fout"
														},
														{
															"key": "geconstateerd",
															"value": "fout"
														},
														{
															"key": "type",
															"value": "fout"
														},
														{
															"key": "gebruiksdoelen",
															"value": "fout"
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,fout"
														},
														{
															"key": "oppervlakte[min]",
															"value": "fout"
														},
														{
															"key": "oppervlakte[max]",
															"value": "fout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"invalidParams 1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");\r",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"integer\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?expand=fout&fields=fout&page=fout&pageSize=fout&geconstateerd=fout&type=fout&gebruiksdoelen=fout&bbox=135207,457400,135418,457162,fout&oppervlakte[min]=fout&oppervlakte[max]=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "fout"
														},
														{
															"key": "fields",
															"value": "fout"
														},
														{
															"key": "page",
															"value": "fout"
														},
														{
															"key": "pageSize",
															"value": "fout"
														},
														{
															"key": "pandIdentificaties",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "geconstateerd",
															"value": "fout"
														},
														{
															"key": "type",
															"value": "fout"
														},
														{
															"key": "gebruiksdoelen",
															"value": "fout"
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,fout"
														},
														{
															"key": "oppervlakte[min]",
															"value": "fout"
														},
														{
															"key": "oppervlakte[max]",
															"value": "fout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "min-max",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(7);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"invalidParams 1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");\r",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"integer\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?expand=fout&fields=fout&page=-1&pageSize=999&bbox=135207,457400,135418,457162,5&oppervlakte[min]=-1&oppervlakte[max]=-1",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "fout"
														},
														{
															"key": "fields",
															"value": "fout"
														},
														{
															"key": "page",
															"value": "-1"
														},
														{
															"key": "pageSize",
															"value": "999"
														},
														{
															"key": "pandIdentificaties",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "geconstateerd",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "type",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "gebruiksdoelen",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,5"
														},
														{
															"key": "oppervlakte[min]",
															"value": "-1"
														},
														{
															"key": "oppervlakte[max]",
															"value": "-1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "min-max en page die niet bestaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(6);\r",
															"});\r",
															"\r",
															"pm.test.skip(\"invalidParams 1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");\r",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"integer\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?expand=fout&fields=fout&page=99&pageSize=999&bbox=135207,457400,135418,457162,5&oppervlakte[min]=-1&oppervlakte[max]=9999999",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "fout"
														},
														{
															"key": "fields",
															"value": "fout"
														},
														{
															"key": "page",
															"value": "99"
														},
														{
															"key": "pageSize",
															"value": "999"
														},
														{
															"key": "pandIdentificaties",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "geconstateerd",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "type",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "gebruiksdoelen",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,5"
														},
														{
															"key": "oppervlakte[min]",
															"value": "-1"
														},
														{
															"key": "oppervlakte[max]",
															"value": "9999999"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "page bestaat niet",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
															"});\r",
															"\r",
															"pm.test(\"invalidParams 1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"page\");\r",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"page\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/adresseerbareobjecten?page=99&bbox=135207,457400,135418,457162",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"adresseerbareobjecten"
													],
													"query": [
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "pandIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "expand",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "page",
															"value": "99"
														},
														{
															"key": "pageSize",
															"value": "999",
															"disabled": true
														},
														{
															"key": "pandIdentificaties",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "geconstateerd",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "type",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "gebruiksdoelen",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162"
														},
														{
															"key": "oppervlakte[min]",
															"value": "-1",
															"disabled": true
														},
														{
															"key": "oppervlakte[max]",
															"value": "-1",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "page>laatste pagina",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"page\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"page\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"De opgegeven pagina bestaat niet.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0826100000000467&page=5&pageSize=20",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "5",
													"description": "Pagina nummer"
												},
												{
													"key": "pageSize",
													"value": "20"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "nummeraanduidingIdentificatie pattern",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"nummeraanduidingIdentificatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"pattern\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=onjuisteIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "onjuisteIdentificatie",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pandIdentificatie pattern",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"pandIdentificatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"pattern\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=onjuisteIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "onjuisteIdentificatie",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pandIdentificaties pattern",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"pandIdentificaties\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"pattern\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificaties=0503100000032487,0503100000011931,123410789012345,0503100000011659",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "onjuisteIdentificatie",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												},
												{
													"key": "pandIdentificaties",
													"value": "0503100000032487,0503100000011931,123410789012345,0503100000011659"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "pandidentificatie met expand panden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"/// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: filteren met pandIdentificatie en tegelijk expanden van panden is niet toegestaan.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0014100022190687&expand=panden",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0014100022190687",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "panden",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "fields onjuist",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: _links.bestaat.echtNiet.\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(3);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&fields=gebruiksdoelen,onjuist,_links.panden,bestaatNiet,_links.bestaat.echtNiet",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "gebruiksdoelen,onjuist,_links.panden,bestaatNiet,_links.bestaat.echtNiet",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "expand onjuist",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: onjuist.\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(2);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&expand=adressen,onjuist,panden.identificatie,panden.bestaatNiet,panden.oorspronkelijkBouwjaar",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen,onjuist,panden.identificatie,panden.bestaatNiet,panden.oorspronkelijkBouwjaar",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere fouten",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(3);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"expand\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: geenResource.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['name']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['code']).to.eql(\"fields\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][1]['reason']).to.eql(\"Deel van de parameterwaarde is niet correct: geenProperty.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][2]['name']).to.eql(\"pageSize\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][2]['code']).to.eql(\"maximum\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][2]['reason']).to.eql(\"Waarde is hoger dan maximum 100.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&expand=geenResource&fields=geenProperty&pageSize=1000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "geenResource",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "geenProperty",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "a",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "1000"
												},
												{
													"key": "bbox",
													"value": "fout",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"invalidParams not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&pandIdentificatie=0599100000103376",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0289100000002082",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "5",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 2",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"invalidParams not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&pandIdentificaties=0599100000103376,0289100000002082",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0289100000002082",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "5",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 3",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"invalidParams not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0289100000002082",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "5",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 4",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"invalidParams not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0599100000103376&pandIdentificaties=0599100000103376,0289100000002082",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0289100000002082",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "5",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 5",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"invalidParams not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0599100000103376&bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0289100000002082",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "5",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 6",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"invalidParams not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificaties=0599100000103376,0289100000002082&bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0289100000002082",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "5",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "combinatie van parameters 7",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(400);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"invalidParams not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?pandIdentificatie=0599100000103376&geconstateerd=true&type=verblijfsobject&gebruiksdoelen=woonfunctie&oppervlakte[min]=10&oppervlakte[max]=200",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0289100000002082",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "true",
													"description": "Pagina nummer"
												},
												{
													"key": "type",
													"value": "verblijfsobject"
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie"
												},
												{
													"key": "oppervlakte[min]",
													"value": "10"
												},
												{
													"key": "oppervlakte[max]",
													"value": "200"
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "bbox WGS84 coördinaten i.p.v. RD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"geometryMismatch\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is niet conform opgegeven CRS.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-CRS",
												"value": "epsg:28992",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=52.10544278,5.09890079,52.10423390,5.09996295",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "52.10544278,5.09890079,52.10423390,5.09996295"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox Content-CRS = WGS84",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Coördinatenstelsel epsg:4326 in Content-Crs wordt niet ondersteund.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [detail]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['detail']).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotSupported\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-CRS",
												"value": "epsg:4326",
												"description": "WGS84",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=5.210544278,50.9890079,5.210423390,50.9996295",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "5.210544278,50.9890079,5.210423390,50.9996295",
													"description": "52105.44278,509890.079,52104.23390,509996.295"
												},
												{
													"key": "bbox",
													"value": "52105.44278,509890.079,52104.23390,509996.295",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox Content-CRS = WGS84 met RD coordinaten",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Coördinatenstelsel epsg:4326 in Content-Crs wordt niet ondersteund.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [detail]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['detail']).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotSupported\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-CRS",
												"value": "epsg:4326",
												"description": "WGS84",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=52105.44278,509890.079,52104.23390,509996.295",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "5.210544278,50.9890079,5.210423390,50.9996295",
													"description": "52105.44278,509890.079,52104.23390,509996.295",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "52105.44278,509890.079,52104.23390,509996.295"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox te groot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.code\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"surfaceMaximum\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.reason\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is hoger dan maximum oppervlakte 250000 m2.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=134647,457842,137512,455907",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "134647,457842,137512,455907"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox coordinaten in verkeerde volgorde (x-min, x-max,  y-min, y-max)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"geometryMismatch\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is niet conform opgegeven CRS.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135228,135246,457502,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,135246,457502,457457"
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie",
													"disabled": true
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "false",
													"disabled": true
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "50",
													"disabled": true
												},
												{
													"key": "oppervlakte[max]",
													"value": "80",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox 3 coordinaten",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.reason\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Array bevat minder dan 4 items.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minItems\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=134647,457842,137512",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "134647,457842,137512"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "gebruiksdoelen geconstateerd oppervlakte zonder bbox",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Ten minste één parameter moet worden opgegeven.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [detail]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['detail']).to.eql(\"Precies 1 parameter van nummeraanduidingIdentificatie, pandIdentificatie, pandIdentificaties of bbox moet worden opgegeven\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsRequired\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams not exists\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?gebruiksdoelen=woonfunctie&geconstateerd=false&oppervlakte[min]=50&oppervlakte[max]=80",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162",
													"disabled": true
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie"
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "false"
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "50"
												},
												{
													"key": "oppervlakte[max]",
													"value": "80"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "gebruiksdoelen geconstateerd oppervlakte met pandIdentificatie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['status']).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams not exists\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?gebruiksdoelen=woonfunctie&geconstateerd=true&pandIdentificatie=0599100000103376&type=verblijfsobject&oppervlakte[min]=50&oppervlakte[max]=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162",
													"disabled": true
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie"
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "true"
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376"
												},
												{
													"key": "type",
													"value": "verblijfsobject"
												},
												{
													"key": "oppervlakte[min]",
													"value": "50"
												},
												{
													"key": "oppervlakte[max]",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "gebruiksdoelen geconstateerd met pandIdentificaties",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['status']).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams not exists\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?gebruiksdoelen=woonfunctie&geconstateerd=true&type=verblijfsobject&pandIdentificaties=0599100000103376,0503100000032487,0503100000011931,0503100000011659",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162",
													"disabled": true
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie"
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "true"
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"disabled": true
												},
												{
													"key": "type",
													"value": "verblijfsobject"
												},
												{
													"key": "pandIdentificaties",
													"value": "0599100000103376,0503100000032487,0503100000011931,0503100000011659"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "gebruiksdoelen geconstateerd met nummeraanduidingIdentificatie",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['status']).to.eql(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams not exists\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?gebruiksdoelen=woonfunctie&geconstateerd=true&type=verblijfsobject&nummeraanduidingIdentificatie=0599200000193766",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162",
													"disabled": true
												},
												{
													"key": "gebruiksdoelen",
													"value": "woonfunctie"
												},
												{
													"key": "page",
													"value": "1",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "true"
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"disabled": true
												},
												{
													"key": "type",
													"value": "verblijfsobject"
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte min > max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&oppervlakte[min]=100&oppervlakte[max]=99",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "100"
												},
												{
													"key": "oppervlakte[max]",
													"value": "99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte min is geen integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"oppervlakte[min]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"integer\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is geen geldige integer.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&oppervlakte[min]=100.5&oppervlakte[max]=199",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "100.5"
												},
												{
													"key": "oppervlakte[max]",
													"value": "199"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte max is geen integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"oppervlakte[max]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"integer\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is geen geldige integer.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&oppervlakte[min]=100&oppervlakte[max]=199.99",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "100"
												},
												{
													"key": "oppervlakte[max]",
													"value": "199.99"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte min kleiner dan minimum",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"oppervlakte[min]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minimum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is lager dan minimum 1.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&oppervlakte[min]=0&oppervlakte[max]=1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "0"
												},
												{
													"key": "oppervlakte[max]",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte max kleiner dan 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"oppervlakte[max]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minimum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is lager dan minimum 1.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&oppervlakte[max]=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "-1",
													"disabled": true
												},
												{
													"key": "oppervlakte[max]",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte min groter dan maximum",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"oppervlakte[min]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"maximum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is hoger dan maximum 999999.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&oppervlakte[min]=1000000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "1000000"
												},
												{
													"key": "oppervlakte[max]",
													"value": "1",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte max groter dan maximum",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"oppervlakte[max]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"maximum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is hoger dan maximum 999999.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&oppervlakte[min]=100&oppervlakte[max]=1000000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "100"
												},
												{
													"key": "oppervlakte[max]",
													"value": "1000000"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "oppervlakte en type standplaats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200,400]);\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85960,443847,85973,443850&oppervlakte[min]=0&oppervlakte[max]=100000000&type=standplaats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85960,443847,85973,443850"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "0"
												},
												{
													"key": "oppervlakte[max]",
													"value": "100000000"
												},
												{
													"key": "type",
													"value": "standplaats"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "alleen extra parameters geen hoofdparameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Ten minste één parameter moet worden opgegeven.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsRequired\");\r",
													"});\r",
													"\r",
													"// JsonPath Existance Match\r",
													"pm.test(\"invalidParams not exists\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													"\r",
													"\r",
													"// JsonPath Existance Match\r",
													"pm.test(\"Check existance of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?gebruiksdoelen=overige gebruiksfunctie&page=1&geconstateerd=false&fields=gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie&pageSize=100&type=verblijfsobject&oppervlakte[min]=24&oppervlakte[max]=91&pageSize=10",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "118078,404308,118145,404359",
													"disabled": true
												},
												{
													"key": "gebruiksdoelen",
													"value": "overige gebruiksfunctie"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "geconstateerd",
													"value": "false"
												},
												{
													"key": "fields",
													"value": "gebruiksdoelen,oppervlakte,geconstateerd,type,geometrie"
												},
												{
													"key": "pageSize",
													"value": "100"
												},
												{
													"key": "type",
													"value": "verblijfsobject"
												},
												{
													"key": "oppervlakte[min]",
													"value": "24"
												},
												{
													"key": "oppervlakte[max]",
													"value": "91"
												},
												{
													"key": "pageSize",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "geconstateerd geen boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"geconstateerd\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"boolean\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is geen geldige boolean.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&geconstateerd=Nee",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "100.5",
													"disabled": true
												},
												{
													"key": "oppervlakte[max]",
													"value": "199",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "Nee"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "type enum fout",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"type\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"enum\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde heeft geen geldige waarde uit de enumeratie.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=135207,457400,135418,457162&type=fout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "oppervlakte[min]",
													"value": "100.5",
													"disabled": true
												},
												{
													"key": "oppervlakte[max]",
													"value": "199",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "Nee",
													"disabled": true
												},
												{
													"key": "type",
													"value": "fout"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "combinatie type standplaats en oppervlakte",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [detail]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['detail']).to.eql(\"Gebruik van parameter oppervlakte is niet toegestaan in combinatie met type standplaats.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams not exists\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85900,443800,85990,443890&type=standplaats&oppervlakte[max]=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85900,443800,85990,443890"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "type",
													"value": "standplaats"
												},
												{
													"key": "oppervlakte[max]",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "combinatie type ligplaats en oppervlakte",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [detail]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['detail']).to.eql(\"Gebruik van parameter oppervlakte is niet toegestaan in combinatie met type ligplaats.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams not exists\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=85900,443800,85990,443890&type=ligplaats&oppervlakte[max]=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "bbox",
													"value": "85900,443800,85990,443890"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "type",
													"value": "ligplaats"
												},
												{
													"key": "oppervlakte[max]",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "identificatieparameters gecombineerd",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.title).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193766&pandIdentificatie=0599100000103376",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193766",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "0599100000103376",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "expand",
													"value": "",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "expand",
							"item": [
								{
									"name": "adressen en panden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].adressen[0].href).to.eql(baseUrl +\"/adressen/0599200000193765\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_links'].self.href).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000103376\");",
													"});",
													"",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].straat).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].huisnummer).to.eql(7);",
													"});",
													"",
													"pm.test(\"postcode equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].postcode).to.eql(\"3066VS\");",
													"});",
													"",
													"pm.test(\"woonplaats equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].woonplaats).to.eql(\"Rotterdam\");",
													"});",
													"",
													"pm.test(\"korteNaam equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].korteNaam).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.eql(\"0599200000193765\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].openbareRuimteIdentificatie).to.eql(\"0599300000002397\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].woonplaatsIdentificatie).to.eql(\"3086\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.eql(\"0599010000103376\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].pandIdentificaties[0]).to.eql(\"0599100000103376\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl +\"/adressen/0599200000193765\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].openbareRuimte.href).to.eql(baseUrl + \"/openbareruimten/0599300000002397\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].nummeraanduiding.href).to.eql(baseUrl + \"/nummeraanduidingen/0599200000193765\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].woonplaats.href).to.eql(baseUrl + \"/woonplaatsen/3086\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].adresseerbaarObject.href).to.eql(baseUrl + \"/adresseerbareobjecten/0599010000103376\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].panden[0].href).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"pm.test(\"identificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].identificatie).to.eql(\"0599100000103376\");",
													"});",
													"",
													"pm.test(\"domein equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].domein).to.eql(\"NL.IMBAG.Pand\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][0][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][0][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][1][0]).to.eql(98091.702);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][1][1]).to.eql(438495.593);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][1][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][2][0]).to.eql(98094.448);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][2][1]).to.eql(438484.756);",
													"});",
													"",
													"pm.test(\"coordinates[0][2][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][2][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][3][0]).to.eql(98095.61);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][3][1]).to.eql(438480.17);",
													"});",
													"",
													"pm.test(\"coordinates[0][3][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][3][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][4][0]).to.eql(98095.3);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][4][1]).to.eql(438478.79);",
													"});",
													"",
													"pm.test(\"coordinates[0][4][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][4][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][5][0]).to.eql(98095.83);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][5][1]).to.eql(438477.55);",
													"});",
													"",
													"pm.test(\"coordinates[0][5][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][5][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][6][0]).to.eql(98096.99);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][6][1]).to.eql(438476.85);",
													"});",
													"",
													"pm.test(\"coordinates[0][6][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][6][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][7][0]).to.eql(98098.34);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][7][1]).to.eql(438476.96);",
													"});",
													"",
													"pm.test(\"coordinates[0][7][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][7][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][8][0]).to.eql(98099.37);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][8][1]).to.eql(438477.82);",
													"});",
													"",
													"pm.test(\"coordinates[0][8][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][8][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][9][0]).to.eql(98102.98);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][9][1]).to.eql(438478.75);",
													"});",
													"",
													"pm.test(\"coordinates[0][9][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][9][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][10][0]).to.eql(98102.075);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][10][1]).to.eql(438482.341);",
													"});",
													"",
													"pm.test(\"coordinates[0][10][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][10][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][11][0]).to.eql(98100.622);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][11][1]).to.eql(438488.11);",
													"});",
													"",
													"pm.test(\"coordinates[0][11][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][11][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][12][0]).to.eql(98098.755);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][12][1]).to.eql(438495.521);",
													"});",
													"",
													"pm.test(\"coordinates[0][12][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][12][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][13][0]).to.eql(98097.307);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][13][1]).to.eql(438501.272);",
													"});",
													"",
													"pm.test(\"coordinates[0][13][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][13][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][14][0]).to.eql(98096.39);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][14][1]).to.eql(438504.91);",
													"});",
													"",
													"pm.test(\"coordinates[0][14][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][14][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][15][0]).to.eql(98092.78);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][15][1]).to.eql(438503.99);",
													"});",
													"",
													"pm.test(\"coordinates[0][15][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][15][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][16][0]).to.eql(98091.47);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][16][1]).to.eql(438504.31);",
													"});",
													"",
													"pm.test(\"coordinates[0][16][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][16][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][17][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][17][0]).to.eql(98090.24);",
													"});",
													"",
													"pm.test(\"coordinates[0][17][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][17][1]).to.eql(438503.77);",
													"});",
													"",
													"pm.test(\"coordinates[0][17][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][17][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][18][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][18][0]).to.eql(98089.55);",
													"});",
													"",
													"pm.test(\"coordinates[0][18][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][18][1]).to.eql(438502.61);",
													"});",
													"",
													"pm.test(\"coordinates[0][18][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][18][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][19][0]).to.eql(98089.66);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][19][1]).to.eql(438501.26);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][19][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][20][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][20][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][20][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].oorspronkelijkBouwjaar).to.eql(1994);",
													"});",
													"",
													"pm.test(\"status equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].status).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].documentdatum).to.eql(\"2015-04-17\");",
													"});",
													"",
													"pm.test(\"documentnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].documentnummer).to.eql(\"Corsanr.15/34392\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie).to.eql(\"0599200000193765\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].nummeraanduidingIdentificaties[1].nummeraanduidingIdentificatie).to.eql(\"0599200000193766\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].self.href).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].adressen[0].href).to.eql(baseUrl +\"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													"",
													"pm.test(\"templated equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].adressen[0].templated).to.eql(true);",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].adresseerbareObjecten[0].href).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");",
													"});",
													"",
													"pm.test(\"templated equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].adresseerbareObjecten[0].templated).to.eql(true);",
													"});",
													"",
													"pm.test(\"_links.self equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193765&expand=adressen,panden&fields=_links\");",
													"});",
													"",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificaties[0] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].adresseerbaarObjectIdentificaties.find(item => item=='0599010000103376')).not.to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificaties[1] Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].adresseerbaarObjectIdentificaties.find(item => item=='0599010000165822')).not.to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193765&expand=adressen,panden&fields=_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193765",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen,panden",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "_links",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "velden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].straat).to.eql(\"Atatürkstraat\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].huisnummer).to.eql(7);",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].self.href).to.eql(baseUrl +\"/adressen/0599200000193765\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie.type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][0][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][0][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][1][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][1][0]).to.eql(98091.702);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][1][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][1][1]).to.eql(438495.593);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][1][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][1][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][2][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][2][0]).to.eql(98094.448);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][2][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][2][1]).to.eql(438484.756);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][2][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][2][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][3][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][3][0]).to.eql(98095.61);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][3][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][3][1]).to.eql(438480.17);",
													"});",
													"",
													"pm.test(\"geometrie.coordinates[0][3][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][3][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][19][0]).to.eql(98089.66);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][19][1]).to.eql(438501.26);",
													"});",
													"",
													"pm.test(\"coordinates[0][19][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][19][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][20][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][20][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].geometrie.coordinates[0][20][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].adresseerbaarObjectIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificaties[1] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].adresseerbaarObjectIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].self.href).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].panden[0]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0599200000193765&expand=adressen.straat,adressen.huisnummer,panden.geometrie&fields=_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200000193765",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.straat,adressen.huisnummer,panden.geometrie",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "_links",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "adressen.huisnummer",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"straat equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].straat).to.eql(\"Belgiëlaan\");",
													"});",
													"",
													"pm.test(\"huisnummer equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].huisnummer).to.eql(1);",
													"});",
													"",
													"pm.test(\"huisletter equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].huisletter).to.eql(\"A\");",
													"});",
													"",
													"pm.test(\"huisnummertoevoeging equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].huisnummertoevoeging).to.eql(\"3\");",
													"});",
													"",
													"pm.test(\"postcode not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].postcode).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaats not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"korteNaam not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].korteNaam).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"openbareRuimteIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].openbareRuimteIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"woonplaatsIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].woonplaatsIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pandIdentificaties[0] not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0].pandIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].openbareRuimte).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].nummeraanduiding).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].woonplaats).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].adresseerbaarObject).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].adresseerbareObjecten[0]['_embedded'].adressen[0]['_links'].panden).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0484200002040489&expand=adressen.huisnummer,adressen.straat&fields=_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.huisnummer,adressen.straat",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "_links",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								},
								{
									"name": "adressen.huisnummer mogelijkOnjuist",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_embedded']['adressen'][0]['huisnummer']).to.eql(9999);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_embedded']['adressen'][0]['huisnummertoevoeging']).to.eql(\"GA13\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [huisnummertoevoeging]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['_embedded']['adressen'][0]['mogelijkOnjuist']['huisnummertoevoeging']).to.eql(true);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/adresseerbareobjecten?nummeraanduidingIdentificatie=0109200000019564&expand=adressen.huisnummer&fields=_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"adresseerbareobjecten"
											],
											"query": [
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0109200000019564",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "pandIdentificatie",
													"value": "",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "expand",
													"value": "adressen.huisnummer",
													"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
												},
												{
													"key": "fields",
													"value": "_links",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												},
												{
													"key": "page",
													"value": "",
													"description": "Pagina nummer",
													"disabled": true
												},
												{
													"key": "pageSize",
													"value": "",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele adresseerbaar objecten (verblijfsobjecten, standplaatsen of ligplaatsen) met een nummeraanduiding identificatie of pand identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources adres en pand, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/panden",
					"item": [
						{
							"name": "op adresseerbaarObjectIdentificatie",
							"item": [
								{
									"name": "verblijfsobject in pand",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [5]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'][0][5]).to.eql([",
													"   98095.83,",
													"   438477.55,",
													"   0.0",
													"]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['oorspronkelijkBouwjaar']).to.eql(1994);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['status']).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentdatum']).to.eql(\"2015-04-17\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentnummer']).to.eql(\"Corsanr.15/34392\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['self']['href']).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.match(/^0599200000.*$/);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][1]['nummeraanduidingIdentificatie']).to.match(/^0599200000.*$/);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Collection self link\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?adresseerbaarObjectIdentificatie=\" + pm.variables.get(\"adresseerbaarObjectIdentificatie\"));",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000165822",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "verblijfsobject in meerdere panden",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0][identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(item => item.identificatie=='0193100000048288')['identificatie']).to.eql(\"0193100000048288\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1][identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(item => item.identificatie=='0193100000043750')['identificatie']).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0].adresseerbaarObjectIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(item => item.identificatie=='0193100000048288')['adresseerbaarObjectIdentificaties'][0]).to.eql(\"0193010000096628\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [1].adresseerbaarObjectIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(item => item.identificatie=='0193100000043750')['adresseerbaarObjectIdentificaties'][1]).to.eql(\"0193010000096628\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Collection self link\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?adresseerbaarObjectIdentificatie=\" + pm.variables.get(\"adresseerbaarObjectIdentificatie\"));",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0193010000096628",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "adresseerbaarObjectIdentificatie bestaat niet",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).to.eql({ });",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Collection self link\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?adresseerbaarObjectIdentificatie=\" + pm.variables.get(\"adresseerbaarObjectIdentificatie\"));",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=1234567890123456",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "1234567890123456",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "op locatie",
							"item": [
								{
									"name": "op locatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"collection self link\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?locatie=98095.02,438495.09\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [5]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'][0][5]).to.eql([",
													"   98095.83,",
													"   438477.55,",
													"   0.0",
													"]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['oorspronkelijkBouwjaar']).to.eql(1994);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['status']).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentdatum']).to.eql(\"2015-04-17\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentnummer']).to.eql(\"Corsanr.15/34392\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['self']['href']).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][1].nummeraanduidingIdentificatie).to.eql(\"0599200000193766\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[1]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0599200000193765\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095.02,438495.09",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "locatie buiten Nederland",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"['_embedded']\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']).to.eql({ });",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=10000,290000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "10000,290000",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "locatie is geometriepunt twee panden",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"pand 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).is.not.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pand 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036344\")).is.not.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118315.606,404844.967",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118315.606,404844.967",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "locatie net naast geometriepunt pand",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"pand 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).is.not.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pand 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036344\")).is.not.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118315.606,404844.967",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118315.606,404844.967",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "locatie net boven geometriepunt pand",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"pand 1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).is.not.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"pand 2\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036344\")).is.not.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118315.606,404844.967",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118315.606,404844.967",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "locatie op lijn tussen 2 geometriepunten van pand",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(1);",
													"});",
													"",
													"pm.test(\"pand identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0].identificatie).to.eql(\"0826100000036343\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118324.681,404846.437",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118324.681,404846.437",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "locatie 1mm buiten lijn tussen 2 geometriepunten van pand",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden']).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118324.682,404846.437",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118324.682,404846.437",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "0,5mm buiten geometrie (4e decimaal)",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"pand identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0].identificatie).to.eql(\"0826100000036343\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118325.1795,404849.3650",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118325.1795,404849.3650",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "0,6mm buiten geometrie (4e decimaal)",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden']).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118325.1796,404849.3650",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118325.1796,404849.3650",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken met nauwkeurigheid centimeters buiten geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden']).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118315.60,404844.96",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118315.60,404844.96",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken met nauwkeurigheid centimeters binnen geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(1);",
													"});",
													"",
													"pm.test(\"pand identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0].identificatie).to.eql(\"0826100000036343\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118325.17,404849.36",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118325.17,404849.36",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken met nauwkeurigheid meters buiten geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden']).to.be.an(\"undefined\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118315,404844",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118315,404844",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken met nauwkeurigheid meters binnen geometrie",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"aantal\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(1);",
													"});",
													"",
													"pm.test(\"pand identificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0].identificatie).to.eql(\"0826100000036343\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=118325,404849",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "118325,404849",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "op nummeraanduidingIdentificatie",
							"item": [
								{
									"name": "meerdere panden met zelfde adres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [href]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.match(/^.*\\/panden\\?nummeraanduidingIdentificatie\\=0193200000096680$/);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0193100000043750\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][1]['identificatie']).to.eql(\"0193100000048288\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?nummeraanduidingIdentificatie=0193200000096680",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0193200000096680",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "pand met veel adressen",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of panden\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0826100000000467\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?nummeraanduidingIdentificatie=0826200000016932",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0826200000016932",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "zoeken op nevenadres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0014100010921152\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0014200010877405\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [nummeraanduidingIdentificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][1]['nummeraanduidingIdentificatie']).to.eql(pm.variables.get(\"nummeraanduidingIdentificatie\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [isNevenadres]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][1]['isNevenadres']).to.eql(true);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?nummeraanduidingIdentificatie=0014200022197986",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0014200022197986",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "op Bounding Box",
							"item": [
								{
									"name": "zoeknauwkeurigheid",
									"item": [
										{
											"name": "bbox coördinaat is een geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.not.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118300.000,404800.000,118315.606,404844.967",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118300.000,404800.000,118315.606,404844.967"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox coördinaat ligt 1mm van een geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118300.000,404800.000,118315.605,404844.967",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118300.000,404800.000,118315.605,404844.967"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox coördinaat ligt op de verbindingslijn tussen twee geometriecoördinaten",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.not.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118324.681,404846.437,118400.000,404800.000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118324.681,404846.437,118400.000,404800.000"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox ligt 0,9mm van de verbindingslijn tussen twee geometriecoördinaten",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118324.682,404846.437,118400.000,404800.000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118324.682,404846.437,118400.000,404800.000"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox verbindingslijn loopt 0,5mm naast geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.not.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118325.1795,404900.0000,118400.0000,404800.0000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118325.1795,404900.0000,118400.0000,404800.0000"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox verbindingslijn loopt 0,6mm naast geometriecoördinaat",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118325.1796,404900.0000,118400.0000,404800.0000",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118325.1796,404900.0000,118400.0000,404800.0000"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in centimeters valt buiten geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118300.00,404800.00,118315.60,404844.96",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118300.00,404800.00,118315.60,404844.96"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in centimeters valt binnen geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.not.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118325.17,404900.00,118400.00,404800.00",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118325.17,404900.00,118400.00,404800.00"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in meters valt buiten geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118300,404800,118315,404844",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118300,404800,118315,404844"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "bbox in meters valt binnen geometrie",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
															"});\r",
															"\r",
															"pm.test(\"pand identificatie\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['_embedded']['panden'].find(p => p.identificatie==\"0826100000036343\")).to.not.be.an(\"undefined\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=118325,404900,118400,404800",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "bbox",
															"value": "118325,404900,118400,404800"
														},
														{
															"key": "page",
															"value": "2",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Alleen BB",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"collection self link\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?bbox=135228,457502,135246,457457\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0344100000043918\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['type']).to.eql(\"Polygon\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [coordinates]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [5]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'][0][5]).to.eql([\r",
													"    135230.92,\r",
													"    457472.307,\r",
													"    0.0\r",
													"]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['oorspronkelijkBouwjaar']).to.eql(1915);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['status']).to.eql(\"Pand in gebruik\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentdatum]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentdatum']).to.eql(\"2010-06-10\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentnummer]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentnummer']).to.eql(\"SO.10.04.70.82\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].self\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['self']['href']).to.eql(baseUrl + \"/panden/0344100000043918\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of adresseerbaarObjectIdentificaties[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['adresseerbaarObjectIdentificaties'][0]).to.eql(\"0344010000146676\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[1]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0344200000059188\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BB en bouwjaar min leeg resultaat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"collection self link\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?bbox=135228,457502,135246,457457&bouwjaar[min]=1930\");\r",
													"});\r",
													"\r",
													"pm.test(\"['_embedded'] Existence Match\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']).not.to.be.an(\"undefined\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&bouwjaar[min]=1930",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "bouwjaar[min]",
													"value": "1930"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BB en bouwjaar min max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"collection self link\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?bbox=135207,457400,135418,457162&bouwjaar[min]=1930&bouwjaar[max]=1940\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0344100000082207\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][17]['identificatie']).to.eql(\"0344100000074364\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['type']).to.eql(\"Polygon\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [coordinates]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [17]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][17]['geometrie']['coordinates'][0][5]).to.eql([\r",
													"    135297.613,\r",
													"    457356.263,\r",
													"    0.0\r",
													"]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar] of panden[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['oorspronkelijkBouwjaar']).to.eql(1930);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar] of panden[13]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][13]['oorspronkelijkBouwjaar']).to.eql(1936);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['status']).to.eql(\"Pand in gebruik\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentdatum]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentdatum']).to.eql(\"2010-06-10\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentnummer]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentnummer']).to.eql(\"SO.10.04.70.82\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].self\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['self']['href']).to.eql(baseUrl + \"/panden/0344100000082207\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of panden[7].adresseerbaarObjectIdentificaties[1]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][7]['adresseerbaarObjectIdentificaties'][1]).to.eql(\"0344010000073952\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of panden[13]nummeraanduidingIdentificaties[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][12]['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0344200000081703\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135207,457400,135418,457162&bouwjaar[min]=1930&bouwjaar[max]=1940",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "bouwjaar[min]",
													"value": "1930"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "bouwjaar[max]",
													"value": "1940"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BB en alle parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"collection self link\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?bbox=135207,457400,135418,457162&bouwjaar[min]=1930&bouwjaar[max]=1940&statusPand=Pand%20in%20gebruik&geconstateerd=false\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0344100000082207\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][17]['identificatie']).to.eql(\"0344100000074364\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['type']).to.eql(\"Polygon\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [coordinates]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [17]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][17]['geometrie']['coordinates'][0][5]).to.eql([\r",
													"    135297.613,\r",
													"    457356.263,\r",
													"    0.0\r",
													"]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar] of panden[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['oorspronkelijkBouwjaar']).to.eql(1930);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar] of panden[13]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][13]['oorspronkelijkBouwjaar']).to.eql(1936);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['status']).to.eql(\"Pand in gebruik\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentdatum]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentdatum']).to.eql(\"2010-06-10\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentnummer]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentnummer']).to.eql(\"SO.10.04.70.82\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].self\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['self']['href']).to.eql(baseUrl + \"/panden/0344100000082207\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of panden[7].adresseerbaarObjectIdentificaties[1]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][7]['adresseerbaarObjectIdentificaties'][1]).to.eql(\"0344010000073952\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of panden[13]nummeraanduidingIdentificaties[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][12]['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0344200000081703\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135207,457400,135418,457162&bouwjaar[min]=1930&bouwjaar[max]=1940&statusPand=Pand in gebruik&geconstateerd=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "bouwjaar[min]",
													"value": "1930"
												},
												{
													"key": "bouwjaar[max]",
													"value": "1940"
												},
												{
													"key": "statusPand",
													"value": "Pand in gebruik"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "BB en alle parameters %20 in parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"collection self link\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?bbox=135207,457400,135418,457162&bouwjaar[min]=1930&bouwjaar[max]=1940&statusPand=Pand%20in%20gebruik&geconstateerd=false\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0344100000082207\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][17]['identificatie']).to.eql(\"0344100000074364\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['type']).to.eql(\"Polygon\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [coordinates]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [17]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][17]['geometrie']['coordinates'][0][5]).to.eql([\r",
													"    135297.613,\r",
													"    457356.263,\r",
													"    0.0\r",
													"]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar] of panden[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['oorspronkelijkBouwjaar']).to.eql(1930);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar] of panden[13]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][13]['oorspronkelijkBouwjaar']).to.eql(1936);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['status']).to.eql(\"Pand in gebruik\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentdatum]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentdatum']).to.eql(\"2010-06-10\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentnummer]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentnummer']).to.eql(\"SO.10.04.70.82\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].self\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['self']['href']).to.eql(baseUrl + \"/panden/0344100000082207\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of panden[7].adresseerbaarObjectIdentificaties[1]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][7]['adresseerbaarObjectIdentificaties'][1]).to.eql(\"0344010000073952\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of panden[13]nummeraanduidingIdentificaties[0]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][12]['nummeraanduidingIdentificaties'][0].nummeraanduidingIdentificatie).to.eql(\"0344200000081703\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135207,457400,135418,457162&bouwjaar[min]=1930&bouwjaar[max]=1940&statusPand=Pand%20in%20gebruik&geconstateerd=false",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162"
												},
												{
													"key": "bouwjaar[min]",
													"value": "1930"
												},
												{
													"key": "bouwjaar[max]",
													"value": "1940"
												},
												{
													"key": "statusPand",
													"value": "Pand%20in%20gebruik"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												},
												{
													"key": "geconstateerd",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Alleen BB page 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
													"});\r",
													"\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"collection self link\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden?bbox=135228,457502,135246,457457&page=2\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [identificatie]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['identificatie']).to.eql(\"0344100000123519\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['type']).to.eql(\"Polygon\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [coordinates]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [5]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['geometrie']['coordinates'][0][4]).to.eql([\r",
													"    135232.354,\r",
													"    457496.757,\r",
													"    0.0\r",
													"]);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['oorspronkelijkBouwjaar']).to.eql(1915);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [status]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['status']).to.eql(\"Pand in gebruik\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentdatum]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentdatum']).to.eql(\"2010-06-10\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [documentnummer]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['documentnummer']).to.eql(\"SO.10.04.70.82\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of ['_links'].self\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['_embedded']['panden'][0]['_links']['self']['href']).to.eql(baseUrl + \"/panden/0344100000123519\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&page=2",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Crs",
							"item": [
								{
									"name": "op adresseerbaarObjectIdentificatie - geen Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Header Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Header Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000165822",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op adresseerbaarObjectIdentificatie - met Accept-Crs RD en zonder Content-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Header Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Header Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000165822",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "met EPSG (hoofdletters)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    //pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"/*",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde coördinatenstelsel EPSG:28992 wordt niet ondersteund.\");",
													"});",
													"",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden?adresseerbaarObjectIdentificatie=0599010000165822\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotAcceptable\");",
													"});",
													"",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													"*/",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "EPSG:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000165822",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "met Accept-Crs WGS84",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde coördinatenstelsel epsg:4326 wordt niet ondersteund.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden?adresseerbaarObjectIdentificatie=0599010000165822\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotAcceptable\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.6\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:4326",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000165822",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie - geen Content-Crs en geen Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Header Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Header Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095,438495",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095,438495",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie - geen Content-Crs en met Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Header Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Header Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095,438495",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095,438495",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie - met Content-Crs en zonder Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Header Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"Header Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095,438495",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095,438495",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie met niet-ondersteunde content-crs (WGS84)",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Coördinatenstelsel epsg:4326 in Content-Crs wordt niet ondersteund.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden?locatie=98095,438495\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotSupported\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:4326",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095,438495",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095,438495",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op bbox met niet-ondersteunde content-crs (WGS84)",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Coördinatenstelsel epsg:4326 in Content-Crs wordt niet ondersteund.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotSupported\");",
													"});",
													"",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:4326",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "op adresseerbaarObjectIdentificatie met meerdere panden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.eql(\"2014-09-22\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].identificatie).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"[1].geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentdatum).to.eql(\"2014-09-22\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0193010000096628&fields=identificatie,documentdatum",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "identificatie,documentdatum",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][0]).to.eql(98091.702);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][1]).to.eql(438495.593);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][0]).to.eql(98090.573);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][1]).to.eql(438500.05);",
													"});",
													"",
													"pm.test(\"coordinates[0][20][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][20][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.eql(1994);",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"_links.self equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).to.eql(baseUrl + \"/panden/0599100000103376\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095.02,438495.09&fields=geometrie,oorspronkelijkBouwjaar",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "geometrie,oorspronkelijkBouwjaar",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op nummeraanduidingIdentificatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [panden]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded']['panden'].length).to.eql(2);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][0]).to.eql(202888.022);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][1]).to.eql(501907.269);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][0]).to.eql(202888.101);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][1]).to.eql(501908.103);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie.coordinates[0][1][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].adresseerbaarObjectIdentificaties[0]).to.eql(\"0193010000050954\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificaties[1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].adresseerbaarObjectIdentificaties[1]).to.eql(\"0193010000096628\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000043750\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][0][0]).to.eql(202949.047);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][0][1]).to.eql(501902.473);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][1][0]).to.eql(202950.875);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][1][1]).to.eql(501902.544);",
													"});",
													"",
													"pm.test(\"coordinates[0][1][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie.coordinates[0][1][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbaarObjectIdentificaties[0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].adresseerbaarObjectIdentificaties[0]).to.eql(\"0193010000096628\");",
													"});",
													"",
													"pm.test(\"nummeraanduidingIdentificaties not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].self.href).to.eql(baseUrl + \"/panden/0193100000048288\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?nummeraanduidingIdentificatie=0193200000096680&fields=geometrie,adresseerbaarObjectIdentificaties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0193200000096680",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "geometrie,adresseerbaarObjectIdentificaties",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "links met _links",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"self exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adressen not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbareObjecten exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"[1].geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"self exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adressen not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"adresseerbareObjecten exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adresseerbareObjecten[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0193010000096628&fields=_links.adresseerbareObjecten",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "_links.adresseerbareObjecten",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "meerdere links met _links",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adressen[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0]['_links'].adresseerbareObjecten[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"[1].geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1].documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adressen[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[1]['_links'].adresseerbareObjecten[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0193010000096628&fields=_links.adresseerbareObjecten,_links.adressen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0193010000096628",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "_links.adresseerbareObjecten,_links.adressen",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "status Sloopvergunning verleend - op adoId",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"mogelijkOnjuist.toelichting Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.toelichting[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.oorspronkelijkBouwjaar Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000186580",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000186580",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "status Sloopvergunning verleend - op locatie",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"mogelijkOnjuist.toelichting Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.toelichting[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.oorspronkelijkBouwjaar Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden.find(item => item.identificatie=='0599100000758648').mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden.find(item => item.identificatie=='0599100000758648').status).to.eql(\"Sloopvergunning verleend\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.toelichting\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden.find(item => item.identificatie=='0599100000758648').mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=93056.800,433530.700",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "93056.800,433530.700",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "status Sloopvergunning verleend - op numId",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"mogelijkOnjuist.toelichting Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.toelichting[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.oorspronkelijkBouwjaar Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?nummeraanduidingIdentificatie=0599200001005466",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0599200001005466",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "niet vragen om veld",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000186580&fields=geometrie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000186580",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "geometrie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "wel vragen om veld",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"mogelijkOnjuist.toelichting Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.toelichting[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.oorspronkelijkBouwjaar Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000186580&fields=geometrie,_links.adressen,status,identificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000186580",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "geometrie,_links.adressen,status,identificatie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om mogelijkOnjuist",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"mogelijkOnjuist.toelichting Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.toelichting[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.oorspronkelijkBouwjaar Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk wordt het pand toch niet gesloopt of is het pand al gesloopt.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000186580&fields=geometrie,_links.adressen,mogelijkOnjuist,identificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000186580",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "geometrie,_links.adressen,mogelijkOnjuist,identificatie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "vragen om mogelijkOnjuist veld dat niet in onderzoek staat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_embedded'].panden[0].mogelijkOnjuist).to.be.an(\"undefined\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											},
											{
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"key": "Content-Crs",
												"type": "any",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0599010000186580&fields=geometrie,_links.adressen,mogelijkOnjuist.geometrie,identificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000186580",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "geometrie,_links.adressen,mogelijkOnjuist.geometrie,identificatie",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "foutafhandeling",
							"item": [
								{
									"name": "meerdere fouten tegelijkertijd",
									"item": [
										{
											"name": "meerdere fouten - unsupportedCombi",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"invalidParams\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
															"});\r",
															"\r",
															"pm.test(\"title\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");\r",
															"});\r",
															"\r",
															"pm.test(\"code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=fout&nummeraanduidingIdentificatie=fout&locatie=fout&fields=fout&bbox=135207,457400,135418,457162,fout&statusPand=fout&geconstateerd=fout&bouwjaar[min]=fout&bouwjaar[max]=fout&page=fout&pageSize=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout"
														},
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout"
														},
														{
															"key": "locatie",
															"value": "fout"
														},
														{
															"key": "fields",
															"value": "fout"
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,fout"
														},
														{
															"key": "statusPand",
															"value": "fout"
														},
														{
															"key": "geconstateerd",
															"value": "fout"
														},
														{
															"key": "bouwjaar[min]",
															"value": "fout"
														},
														{
															"key": "bouwjaar[max]",
															"value": "fout"
														},
														{
															"key": "page",
															"value": "fout"
														},
														{
															"key": "pageSize",
															"value": "fout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meerdere fouten - notAllowedCharacter",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(2);\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?fields=\"fout\"&bbox=135207,457400,135418,457162,fout&statusPand=\"fout\"&geconstateerd=fout&bouwjaar[min]=fout&bouwjaar[max]=fout&page=fout&pageSize=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "locatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "\"fout\""
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,fout"
														},
														{
															"key": "statusPand",
															"value": "\"fout\""
														},
														{
															"key": "geconstateerd",
															"value": "fout"
														},
														{
															"key": "bouwjaar[min]",
															"value": "fout"
														},
														{
															"key": "bouwjaar[max]",
															"value": "fout"
														},
														{
															"key": "page",
															"value": "fout"
														},
														{
															"key": "pageSize",
															"value": "fout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meerdere fouten - type",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
															"});\r",
															"\r",
															"pm.test(\"invalidParams 1\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.invalidParams[0].name, \"name\").to.eql(\"bbox\");\r",
															"    pm.expect(jsonData.invalidParams[0].code, \"code\").to.eql(\"number\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?fields=fout&bbox=135207,457400,135418,457162,fout&statusPand=fout&geconstateerd=fout&bouwjaar[min]=fout&bouwjaar[max]=fout&page=fout&pageSize=fout",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "locatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "fout"
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,fout"
														},
														{
															"key": "statusPand",
															"value": "fout"
														},
														{
															"key": "geconstateerd",
															"value": "fout"
														},
														{
															"key": "bouwjaar[min]",
															"value": "fout"
														},
														{
															"key": "bouwjaar[max]",
															"value": "fout"
														},
														{
															"key": "page",
															"value": "fout"
														},
														{
															"key": "pageSize",
															"value": "fout"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meerdere fouten - min max pattern",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(5);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=135207,457400,135418,457162,5&bouwjaar[min]=-1&bouwjaar[max]=-1&page=-1&pageSize=999",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "locatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162,5"
														},
														{
															"key": "statusPand",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "geconstateerd",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "bouwjaar[min]",
															"value": "-1"
														},
														{
															"key": "bouwjaar[max]",
															"value": "-1"
														},
														{
															"key": "page",
															"value": "-1"
														},
														{
															"key": "pageSize",
															"value": "999"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "meerdere fouten - page bestaat niet",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Valid HTTP Status Codes\", function () {\r",
															"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
															"});\r",
															"\r",
															"pm.test(\"aantal [invalidParams]\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
															"});\r",
															"\r",
															"pm.test(\"invalidParams.name\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'][0].name).to.eql(\"page\");\r",
															"});\r",
															"\r",
															"pm.test(\"invalidParams.code\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'][0].code).to.eql(\"page\");\r",
															"});\r",
															"\r",
															"pm.test(\"invalidParams.reason\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData['invalidParams'][0].reason).to.eql(\"De opgegeven pagina bestaat niet.\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/panden?bbox=135207,457400,135418,457162&page=99",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"panden"
													],
													"query": [
														{
															"key": "adresseerbaarObjectIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "nummeraanduidingIdentificatie",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "locatie",
															"value": "135418,457162",
															"disabled": true
														},
														{
															"key": "fields",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "bbox",
															"value": "135207,457400,135418,457162"
														},
														{
															"key": "statusPand",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "geconstateerd",
															"value": "fout",
															"disabled": true
														},
														{
															"key": "bouwjaar[min]",
															"value": "-1",
															"disabled": true
														},
														{
															"key": "bouwjaar[max]",
															"value": "-1",
															"disabled": true
														},
														{
															"key": "page",
															"value": "99"
														},
														{
															"key": "pageSize",
															"value": "999",
															"disabled": true
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "op locatie met maar 1 coordinaat",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams.name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"locatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams.reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Array bevat minder dan 2 items.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams.code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"minItems\");",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.match(/^https\\:\\/\\/api\\.bag.*\\.kadaster\\.nl\\/esd\\/huidigebevragingen\\/v1\\/panden\\?locatie\\=98095\\.02$/);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]1\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden?locatie=98095.02\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"locatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minItems\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Array bevat minder dan 2 items.\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095.02",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie 3 coordinaten",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"invalidParams.name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"locatie\");",
													"});",
													"",
													"pm.test(\"invalidParams.reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Array bevat meer dan 2 items.\");",
													"});",
													"",
													"pm.test(\"invalidParams.code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"maxItems\");",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095.02,438495.09,0",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09,0",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie coordinaat is geen niet number",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams.name\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"locatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams.reason\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is geen geldig decimaal getal.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"invalidParams.code\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invalidParams[0].code).to.eql(\"number\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=1.23456,def",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "1.23456,def",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "combineren van parameters 1",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"[invalidParams] undefined\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0484010002033603&nummeraanduidingIdentificatie=0484200002040489",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "combineren van parameters 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"[invalidParams] undefined\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											},
											{
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"key": "Content-Crs",
												"type": "any",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0484010002033603&locatie=98095.02,438495.09",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "combineren van parameters 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"[invalidParams] undefined\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											},
											{
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"key": "Content-Crs",
												"type": "any",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=0484010002033603&bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn."
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "combineren van parameters 4",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"[invalidParams] undefined\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?nummeraanduidingIdentificatie=0484200002040489&locatie=98095.02,438495.09",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0599010000165822",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "combineren van parameters 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"[invalidParams] undefined\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											},
											{
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"key": "Content-Crs",
												"type": "any",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?nummeraanduidingIdentificatie=0484200002040489&bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang."
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "combineren van parameters 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"[invalidParams] undefined\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											},
											{
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"key": "Content-Crs",
												"type": "any",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095.02,438495.09&bbox=135228,457502,135246,457457",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "combineren van parameters 7",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"De combinatie van opgegeven parameters is niet toegestaan.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"unsupportedCombi\");",
													"});",
													"",
													"pm.test(\"[invalidParams] undefined\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"description": "Gewenste CRS van de coördinaten in de response.",
												"key": "Accept-Crs",
												"type": "any",
												"value": "epsg:28992"
											},
											{
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel.",
												"key": "Content-Crs",
												"type": "any",
												"value": "",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095.02,438495.09&statusPand=Pand in gebruik&geconstateerd=true&bouwjaar[min]=1950&bouwjaar[max]=1979",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "0484010002033603",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "0484200002040489",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												},
												{
													"key": "statusPand",
													"value": "Pand in gebruik"
												},
												{
													"key": "geconstateerd",
													"value": "true"
												},
												{
													"key": "bouwjaar[min]",
													"value": "1950"
												},
												{
													"key": "bouwjaar[max]",
													"value": "1979"
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie met 3 coordinaten",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden?locatie=98095.02,438495.09,15000\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"locatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"maxItems\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Array bevat meer dan 2 items.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=98095.02,438495.09,15000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "98095.02,438495.09,15000",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie met ongeldige coordinaat (x > y)",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"locatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"geometryMismatch\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is niet conform opgegeven CRS.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=400000,5000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "400000,5000",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "op locatie buiten geldigheidsgebied",
									"event": [
										{
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"locatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"geometryMismatch\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is niet conform opgegeven CRS.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?locatie=-7001,629001",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "locatie",
													"value": "-7001,629001",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "bbox WGS84 coördinaten i.p.v. RD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"geometryMismatch\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is niet conform opgegeven CRS.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept-Crs",
												"value": "WGS84",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=52.10544278,5.09890079,52.10423390,5.09996295",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "52.10544278,5.09890079,52.10423390,5.09996295"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "meerdere fouten bbox en bouwjaar min",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"code\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.code).to.eql(\"unsupportedCombi\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?adresseerbaarObjectIdentificatie=fout&nummeraanduidingIdentificatie=fout&locatie=fout&fields=fout&bbox=135207,457400,135418,457162,fout&statusPand=fout&geconstateerd=fout&bouwjaar[min]=fout&bouwjaar[max]=fout&page=fout&pageSize=fout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "fout"
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "fout"
												},
												{
													"key": "locatie",
													"value": "fout"
												},
												{
													"key": "fields",
													"value": "fout"
												},
												{
													"key": "bbox",
													"value": "135207,457400,135418,457162,fout"
												},
												{
													"key": "statusPand",
													"value": "fout"
												},
												{
													"key": "geconstateerd",
													"value": "fout"
												},
												{
													"key": "bouwjaar[min]",
													"value": "fout"
												},
												{
													"key": "bouwjaar[max]",
													"value": "fout"
												},
												{
													"key": "page",
													"value": "fout"
												},
												{
													"key": "pageSize",
													"value": "fout"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "meerdere fouten: bbox en crs",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"number\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is geen geldig decimaal getal.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Crs",
												"value": "WGS84",
												"type": "text"
											},
											{
												"key": "Accept-Crs",
												"value": "WGS84",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457,fout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457,fout"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "meerdere fouten: bbox en bouwjaar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1); // er wordt 1 ipv 2 fout teruggegeven. zie #503\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].find(i => i.name==\"bbox\")['code']).to.eql(\"number\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].find(i => i.name==\"bbox\")['reason']).to.eql(\"Waarde is geen geldig decimaal getal.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Crs",
												"value": "WGS84",
												"type": "text"
											},
											{
												"key": "Accept-Crs",
												"value": "WGS84",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=fout&bouwjaar[min]=fout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "fout"
												},
												{
													"key": "bouwjaar[min]",
													"value": "fout"
												},
												{
													"key": "bouwjaar[max]",
													"value": "1999-01-01",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "meerdere fouten: alle extra parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1); // er wordt 1 ipv 4 fout teruggegeven. zie #503\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"statusPand [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].find(i => i.name==\"statusPand\")['reason']).to.eql(\"Waarde heeft geen geldige waarde uit de enumeratie.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Crs",
												"value": "WGS84",
												"type": "text"
											},
											{
												"key": "Accept-Crs",
												"value": "WGS84",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&bouwjaar[min]=fout&bouwjaar[max]=fout&statusPand=fout&geconstateerd=fout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "bouwjaar[min]",
													"value": "fout"
												},
												{
													"key": "bouwjaar[max]",
													"value": "fout"
												},
												{
													"key": "statusPand",
													"value": "fout"
												},
												{
													"key": "geconstateerd",
													"value": "fout"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "statusPand",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"pm.test(\"statusPand [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].find(i => i.name==\"statusPand\")['code']).to.eql(\"enum\");\r",
													"});\r",
													"\r",
													"pm.test(\"statusPand [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].find(i => i.name==\"statusPand\")['reason']).to.eql(\"Waarde heeft geen geldige waarde uit de enumeratie.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Crs",
												"value": "WGS84",
												"type": "text"
											},
											{
												"key": "Accept-Crs",
												"value": "WGS84",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&statusPand=fout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "bouwjaar[min]",
													"value": "fout",
													"disabled": true
												},
												{
													"key": "bouwjaar[max]",
													"value": "fout",
													"disabled": true
												},
												{
													"key": "statusPand",
													"value": "fout"
												},
												{
													"key": "geconstateerd",
													"value": "fout",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox Content-CRS = WGS84",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"// HTTP Header Equals\r",
													"pm.test(\"API-Version\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));\r",
													"});\r",
													"\r",
													"// HTTP Header Equals\r",
													"pm.test(\"Content-Type\", () => {\r",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Coördinatenstelsel WGS84 in Content-Crs wordt niet ondersteund.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [type]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.1\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [detail]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['detail']).to.eql(\"Bad request.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [instance]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden?bbox=52.10544278,5.09890079,52.10423390,5.09996295\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotSupported\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-CRS",
												"value": "WGS84",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=52.10544278,5.09890079,52.10423390,5.09996295",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "52.10544278,5.09890079,52.10423390,5.09996295"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox geometrie met WGS84 waarden",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"geometryMismatch\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is niet conform opgegeven CRS.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-CRS",
												"value": "WGS84",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=52.10540,5.09861,52.10500,5.09887",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "52.10540,5.09861,52.10500,5.09887"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox coordinaat is geen decimaal getal",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"pm.test(\"Match content of [detail]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['detail']).to.eql(\"Ongeldige waarde [98095.02,438495.09,15000,23000.123a] opgegeven voor parameter [bbox]\");",
													"});",
													"",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"pm.test(\"invalidParams [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bbox\");",
													"});",
													"",
													"pm.test(\"invalidParams [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"number\");",
													"});",
													"",
													"pm.test(\"invalidParams [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is geen geldig decimaal getal.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											},
											{
												"type": "any",
												"key": "Content-Crs",
												"value": "epsg:28992",
												"description": "CRS van de meegegeven geometrie. epsg:28992 mapt op het RD New Nederlands coordinatenstelsel."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=98095.02,438495.09,15000,23000.123a",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "adresseerbaarObjectIdentificatie",
													"value": "",
													"description": "De identificatie van een adresserbaar object uit de BAG. Dit kan een verblijfsobject, een standplaats of een ligplaats zijn.",
													"disabled": true
												},
												{
													"key": "nummeraanduidingIdentificatie",
													"value": "",
													"description": "Identificatie van een nummeraanduiding uit de BAG. Deze is 16 cijfers lang.",
													"disabled": true
												},
												{
													"key": "bbox",
													"value": "98095.02,438495.09,15000,23000.123a",
													"description": "Coordinaten van een locatie die als query-parmeter gebruikt wordt om een object te zoeken. Let op, explode is false dus het formaat is ?locatie=194602.722,464154.308"
												},
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											]
										},
										"description": "Zoek actuele panden met de identificatie van een adresseerbaar object, nummeraanduiding of een locatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "bbox te groot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.reason\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"Waarde is hoger dan maximum oppervlakte 250000 m2.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"surfaceMaximum\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=134647,457842,137512,455907",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "134647,457842,137512,455907"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bouwjaar min > max",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].name).to.eql(\"bouwjaar\");\r",
													"});\r",
													"\r",
													"pm.test(\"invalidParams.reason\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.invalidParams[0].reason).to.eql(\"min mag niet hoger zijn dan max.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"range\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&bouwjaar[min]=200&bouwjaar[max]=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "bouwjaar[min]",
													"value": "200"
												},
												{
													"key": "bouwjaar[max]",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bouwjaar min < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bouwjaar[min]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minimum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is lager dan minimum 0.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&bouwjaar[min]=-1&bouwjaar[max]=500",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "bouwjaar[min]",
													"value": "-1"
												},
												{
													"key": "bouwjaar[max]",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bouwjaar min > 9999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bouwjaar[min]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"maximum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is hoger dan maximum 9999.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&bouwjaar[min]=10000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "bouwjaar[min]",
													"value": "10000"
												},
												{
													"key": "bouwjaar[max]",
													"value": "20200",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bouwjaar max > 9999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bouwjaar[max]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"maximum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is hoger dan maximum 9999.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&bouwjaar[min]=2000&bouwjaar[max]=20200",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "bouwjaar[min]",
													"value": "2000"
												},
												{
													"key": "bouwjaar[max]",
													"value": "20200"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bouwjaar max < 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bouwjaar[max]\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"minimum\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is lager dan minimum 0.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=135228,457502,135246,457457&bouwjaar[max]=-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "135228,457502,135246,457457"
												},
												{
													"key": "bouwjaar[min]",
													"value": "0",
													"disabled": true
												},
												{
													"key": "bouwjaar[max]",
													"value": "-1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "bbox geen RD",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");\r",
													"// get request query parameters\r",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );\r",
													"\r",
													"// Valid HTTP Status Codes\r",
													"pm.test(\"Valid HTTP Status Codes\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [title]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");\r",
													"});\r",
													"\r",
													"// JsonPath Count\r",
													"pm.test(\"Check count of [invalidParams]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);\r",
													"});\r",
													"\r",
													"// JsonPath Match\r",
													"pm.test(\"Match content of [name]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"bbox\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [code]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"geometryMismatch\");\r",
													"});\r",
													"\r",
													"pm.test(\"Match content of [reason]\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde is niet conform opgegeven CRS.\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/panden?bbox=5.95898224,52.18079713,5.96164299,52.17919192",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden"
											],
											"query": [
												{
													"key": "bbox",
													"value": "5.95898224,52.18079713,5.96164299,52.17919192"
												},
												{
													"key": "page",
													"value": "2",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "/panden/{pandIdentificatie}",
					"item": [
						{
							"name": "mapping",
							"item": [
								{
									"name": "pand met veel adressen",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [identificatie]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['identificatie']).to.eql(\"0826100000000467\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['coordinates'][0][0]).to.eql([",
													"   118085.231,",
													"   404358.77,",
													"   0.0",
													"]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['oorspronkelijkBouwjaar']).to.eql(1963);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [status]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['status']).to.eql(\"Pand in gebruik\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentdatum]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentdatum']).to.eql(\"2012-08-13\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [documentnummer]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['documentnummer']).to.eql(\"IT.1201877\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].self\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['self']['href']).to.eql(baseUrl + \"/panden/0826100000000467\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of ['_links'].adresseerbareObjecten\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adresseerbareObjecten'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0].templated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adresseerbareObjecten'][0]['templated']).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of adresseerbaarObjectIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'][0]).to.match(/^0826010.*$/);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.match(/^082620.*$/);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "pand met heel veel adressen",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"Check count of adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'].length).to.eql(296);",
													"});",
													"",
													"pm.test(\"Check count of nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'].length).to.eql(296);",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0014100022188747",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "pand met nevenadres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adressen]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adressen[0].templated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['templated']).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [adresseerbareObjecten]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adresseerbareObjecten'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adresseerbareObjecten'][0]['href']).to.eql(baseUrl + \"/adresseerbareobjecten/{adresseerbaarObjectIdentificaties}\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of ['_links'].adresseerbareObjecten[0].templated\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adresseerbareObjecten'][0]['templated']).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'].length).to.eql(2);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0014200010877405\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificaties[0].indicatieNevenadres Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['indicatieNevenadres']).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[1].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][1]['nummeraanduidingIdentificatie']).to.eql(\"0014200022197986\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of nummeraanduidingIdentificaties[1].isNevenadres\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][1]['isNevenadres']).to.eql(true);",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0014100010921152",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "pand zonder adres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [oorspronkelijkBouwjaar]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['oorspronkelijkBouwjaar']).to.eql(1997);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"nummeraanduidingIdentificaties Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.nummeraanduidingIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"adresseerbaarObjectIdentificaties Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.adresseerbaarObjectIdentificaties).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adressen Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"['_links'].adresseerbareObjecten Existence Match\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0503100000034877",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "pand met adres",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0484100000045095",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "pand met adressen aan verschillende straten",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['type']).to.eql(\"Polygon\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [coordinates]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['geometrie']['coordinates'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"['_links'].adressen\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links']['adressen'][0]['href']).to.eql(baseUrl + \"/adressen/{nummeraanduidingIdentificaties.nummeraanduidingIdentificatie}\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0014100010904448",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "Crs",
							"item": [
								{
									"name": "geen Accept-Crs",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"pm.test(\"Header API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"pm.test(\"Header Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"Header Content-Crs\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"pm.test(\"gemometrie.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.type).to.eql(\"Polygon\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "",
												"description": "Gewenste CRS van de coördinaten in de response.",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "Accept-Crs RD",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Crs Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Crs\")).to.eql(\"epsg:28992\");",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
													"});",
													"",
													"pm.test(\"gemometrie.type\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.type).to.eql(\"Polygon\");",
													"});"
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "Accept-Crs WGS84",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([406]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type Header Equals\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Gevraagde coördinatenstelsel EPSG:4326 wordt niet ondersteund.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden/0826100000000467\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"crsNotAcceptable\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [type]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['type']).to.eql(\"https://tools.ietf.org/html/rfc7231#section-6.5.6\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "EPSG:4326",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "fields",
							"item": [
								{
									"name": "velden",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match with Wildcard",
													"pm.test(\"Match content of adresseerbaarObjectIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'][0]).to.match(/^0826010.*$/);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"Check count of nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0826200000016921\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"type equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.type).to.eql(\"Polygon\");",
													"});",
													"",
													"pm.test(\"coordinates[0][0][0] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.coordinates[0][0][0]).to.eql(118085.231);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][1] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.coordinates[0][0][1]).to.eql(404358.77);",
													"});",
													"",
													"pm.test(\"coordinates[0][0][2] equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie.coordinates[0][0][2]).to.eql(0.0);",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar equals\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oorspronkelijkBouwjaar).to.eql(1963);",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adressen).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie?fields=oorspronkelijkBouwjaar,geometrie,adresseerbaarObjectIdentificaties",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "oorspronkelijkBouwjaar,geometrie,adresseerbaarObjectIdentificaties",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "links met _links",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"Check count of adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of adresseerbaarObjectIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'][0]).to.eql(\"0826010000016712\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"Check count of nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0826200000016921\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adressen[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbareObjecten).to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie?fields=_links.adressen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "_links.adressen",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "_links",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"Check count of adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of adresseerbaarObjectIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'][0]).to.eql(\"0826010000016712\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"Check count of nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0826200000016921\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adressen[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbareObjecten[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie?fields=_links",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "_links",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "links met _links2",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of adresseerbaarObjectIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of adresseerbaarObjectIdentificaties[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['adresseerbaarObjectIdentificaties'][0]).to.eql(\"0826010000016712\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of nummeraanduidingIdentificaties\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'].length).to.eql(72);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"Match content of nummeraanduidingIdentificaties[0].nummeraanduidingIdentificatie\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['nummeraanduidingIdentificaties'][0]['nummeraanduidingIdentificatie']).to.eql(\"0826200000016921\");",
													"});",
													"",
													"// Message Content Assertions",
													"pm.test(\"identificatie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.identificatie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"geometrie not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"oorspronkelijkBouwjaar not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"status not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentdatum not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentdatum).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"documentnummer not exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.documentnummer).to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].self.href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adressen[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													"pm.test(\"href exists\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['_links'].adresseerbareObjecten[0].href).not.to.be.an(\"undefined\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie?fields=_links.adressen,_links.adresseerbareObjecten",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "_links.adressen,_links.adresseerbareObjecten",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0826100000000467",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "foutafhandeling",
							"item": [
								{
									"name": "bestaat niet",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([404]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Opgevraagde resource bestaat niet.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden/1234567890123456\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"notFound\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams']).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "1234567890123456",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "pattern identificatie",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([400]);",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"API-Version\", () => {",
													"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.variables.get(\"API-version\"));",
													"});",
													"",
													"// HTTP Header Equals",
													"pm.test(\"Content-Type\", () => {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [title]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['title']).to.eql(\"Een of meerdere parameters zijn niet correct.\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [instance]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['instance']).to.eql(baseUrl + \"/panden/123456789012345\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['code']).to.eql(\"paramsValidation\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [invalidParams]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'].length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [name]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['name']).to.eql(\"pandidentificatie\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [code]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['code']).to.eql(\"pattern\");",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"Match content of [reason]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData['invalidParams'][0]['reason']).to.eql(\"Waarde voldoet niet aan patroon ^[0-9]{16}$.\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "123456789012345",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						},
						{
							"name": "mogelijkOnjuist",
							"item": [
								{
									"name": "status Bouw gestart",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.eql(true);",
													"});",
													"",
													"// JsonPath Count",
													"pm.test.skip(\"mogelijkOnjuist.toelichting Count\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test.skip(\"mogelijkOnjuist.toelichting[0]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.oorspronkelijkBouwjaar Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Mogelijk is de bouw al gereed of is het pand niet gerealiseerd.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0037100000016720",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "oorspronkelijkBouwjaar",
									"event": [
										{
											"script": {
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.oorspronkelijkBouwjaar\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oorspronkelijkBouwjaar).to.eql(true);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.geometrie Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.geometrie).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test.skip(\"mogelijkOnjuist.oorspronkelijkBouwjaar Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.oorspronkelijkBouwjaar).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist.status Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.status).to.be.an(\"undefined\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Bouwjaar is mogelijk onjuist.\");",
													"});",
													"",
													"// JsonPath Count",
													"pm.test(\"Check count of [toelichting]\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting.length).to.eql(1);",
													"});",
													"",
													"// JsonPath Match",
													"pm.test(\"mogelijkOnjuist.huisnummertoevoeging\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist.toelichting[0]).to.eql(\"Bouwjaar is mogelijk onjuist.\");",
													"});",
													""
												],
												"type": "text/javascript"
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0014100022190687",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								},
								{
									"name": "niet gevraagd om veld",
									"event": [
										{
											"script": {
												"type": "text/javascript",
												"exec": [
													"let baseUrl = pm.variables.get(\"baseUrl\");",
													"// get request query parameters",
													"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
													"",
													"pm.collectionVariables.set(\"pandIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
													"",
													"// Valid HTTP Status Codes",
													"pm.test(\"Valid HTTP Status Codes\", function () {",
													"    pm.expect(pm.response.code).to.be.oneOf([200]);",
													"});",
													"",
													"// JsonPath Existence Match",
													"pm.test(\"mogelijkOnjuist Existence\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.mogelijkOnjuist).to.be.an(\"undefined\");",
													"});",
													""
												]
											},
											"listen": "test"
										}
									],
									"request": {
										"method": "get",
										"header": [
											{
												"type": "any",
												"key": "Accept-Crs",
												"value": "epsg:28992",
												"description": "Gewenste CRS van de coördinaten in de response."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/panden/:pandIdentificatie?fields=geometrie,_links.adressen",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"panden",
												":pandIdentificatie"
											],
											"query": [
												{
													"key": "fields",
													"value": "geometrie,_links.adressen",
													"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)"
												}
											],
											"variable": [
												{
													"key": "pandIdentificatie",
													"value": "0037100000016720",
													"type": "string",
													"description": "Identificatie van een pand uit de BAG. Deze is 16 cijfers lang."
												}
											]
										},
										"description": "Raadpleeg een actueel pand met de identificatie. Een pand is een bouwkundige, constructief zelfstandige eenheid die direct en duurzaam met de aarde is verbonden en betreedbaar en afsluitbaar is. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)."
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "feature geometrie zoeken",
					"item": [
						{
							"name": "coördinaten bbox komen overeen met geometrie adresseerbaarobject",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Valid HTTP Status Codes\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
											"});\r",
											"\r",
											"pm.test(\"aantal\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'].length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"identificatie\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData['_embedded']['adresseerbareObjecten'][0]['identificatie']).to.eql(\"0226010000038820\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/adresseerbareobjecten?bbox=196733.427,439931.991,196733.427,439931.991",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"adresseerbareobjecten"
									],
									"query": [
										{
											"key": "bbox",
											"value": "196733.427,439931.991,196733.427,439931.991"
										},
										{
											"key": "page",
											"value": "2",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "algemene fouten",
					"item": [
						{
							"name": "resourcepad onjuist",
							"event": [
								{
									"script": {
										"exec": [
											"let baseUrl = pm.variables.get(\"baseUrl\");",
											"// get request query parameters",
											"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
											"",
											"pm.collectionVariables.set(\"nummeraanduidingIdentificatie\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
											"",
											"// Valid HTTP Status Codes",
											"pm.test(\"Valid HTTP Status Codes\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});",
											"",
											"// JsonPath Match",
											"pm.test(\"status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(404);",
											"});",
											"",
											"// JsonPath Match",
											"pm.test(\"title\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.title).to.eql(\"Opgevraagde resource bestaat niet.\");",
											"});",
											"",
											"// JsonPath Match",
											"pm.test(\"code\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.code).to.eql(\"notFound\");",
											"});",
											"",
											"// JsonPath Count",
											"pm.test(\"invalid-params Count\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invalidParams).to.be.an(\"undefined\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									},
									"listen": "test"
								}
							],
							"request": {
								"method": "get",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/bestaatniet/:nummeraanduidingIdentificatie",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"bestaatniet",
										":nummeraanduidingIdentificatie"
									],
									"query": [
										{
											"key": "expand",
											"value": "",
											"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature).",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "",
											"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature)",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "nummeraanduidingIdentificatie",
											"value": null
										}
									]
								},
								"description": "Raadpleeg een actueel adres met de nummeraanduiding identificatie. Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, zie [functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/fields.feature). Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources nummeraanduiding, woonplaats en openbare ruimte, zie [functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.0.0/features/expand.feature)."
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"let baseUrl = pm.variables.get(\"baseUrl\");",
							"",
							"// clear all stored query parameter variables",
							"pm.collectionVariables.unset(\"adresseerbaarObjectIdentificatie\");",
							"pm.collectionVariables.unset(\"pandIdentificatie\");",
							"pm.collectionVariables.unset(\"zoekresultaatIdentificatie\");",
							"pm.collectionVariables.unset(\"nummeraanduidingIdentificatie\");",
							"pm.collectionVariables.unset(\"woonplaatsidentificatie\");",
							"pm.collectionVariables.unset(\"openbareRuimteidentificatie\");",
							"pm.collectionVariables.unset(\"pandIdentificaties\");",
							"pm.collectionVariables.unset(\"page\");",
							"pm.collectionVariables.unset(\"pageSize\");",
							"pm.collectionVariables.unset(\"fields\");",
							"pm.collectionVariables.unset(\"expand\");",
							"pm.collectionVariables.unset(\"fields\");",
							"pm.collectionVariables.unset(\"locatie\");",
							"pm.collectionVariables.unset(\"postcode\");",
							"pm.collectionVariables.unset(\"huisnummer\");",
							"pm.collectionVariables.unset(\"huisletter\");",
							"pm.collectionVariables.unset(\"huisnummertoevoeging\");",
							"pm.collectionVariables.unset(\"bbox\");",
							"pm.collectionVariables.unset(\"bouwjaar[min]\");",
							"pm.collectionVariables.unset(\"bouwjaar[max]\");",
							"pm.collectionVariables.unset(\"oppervlakte[min]\");",
							"pm.collectionVariables.unset(\"oppervlakte[max]\");",
							"pm.collectionVariables.unset(\"type\");",
							"pm.collectionVariables.unset(\"geconstateeerd\");",
							"pm.collectionVariables.unset(\"status\");",
							"pm.collectionVariables.unset(\"gebruiksdoelen\");",
							"pm.collectionVariables.unset(\"locatie\");",
							"pm.collectionVariables.unset(\"exacteMatch\");",
							"",
							"// get request query parameters",
							"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
							"",
							"pm.test(\"API-Version\", () => {",
							"    if (pm.response.code==401) {",
							"        // authenticatiefout 401 wordt in API gateway afgevangen, niet in API",
							"        return;",
							"    }",
							"",
							"    if (pm.response.code==400&&(pm.response.headers.get(\"Content-Type\")==\"text/html;charset=utf-8\"||pm.response.headers.get(\"Content-Type\")==\"application/json;charset=utf-8\")) {",
							"        // bij niet sturen API key, dit wordt in API gateway afgevangen, niet in API",
							"        return;",
							"    }",
							"    ",
							"    pm.expect(pm.response.headers.get(\"API-Version\")).to.eql(pm.collectionVariables.get('API-version'));",
							"});",
							"",
							"pm.test(\"Content-Type\", () => {",
							"    if (pm.response.code==401) {",
							"        // authenticatiefout 401 wordt in API gateway afgevangen, niet in API",
							"        return;",
							"    }",
							"",
							"    if (pm.response.code<400) {",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/hal+json\");",
							"    } else {",
							"        if (pm.response.code==400&&(pm.response.headers.get(\"Content-Type\")==\"text/html;charset=utf-8\"||pm.response.headers.get(\"Content-Type\")==\"application/json;charset=utf-8\")) {",
							"            pm.expect(pm.response.text()).to.include(\"Missing API Key\");",
							"            // als er geen API key is gestuurd krijgen we een 400 fout in html formaat",
							"        } else {",
							"            pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/problem+json\");",
							"        }",
							"    }",
							"});",
							"",
							"pm.test(\"self-link of instance\", function () {",
							"    if (pm.response.code==401) {",
							"        // authenticatiefout 401 wordt in API gateway afgevangen, niet in API",
							"        return;",
							"    }",
							"",
							"    if (pm.response.headers.get(\"Content-Type\")==\"text/html;charset=utf-8\"||pm.response.headers.get(\"Content-Type\")==\"application/json;charset=utf-8\") {",
							"        // als het html is, is het geen hal of problem json en is er dus geen _links of instance",
							"        return;",
							"    }",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"    let requestUri = pm.request.url.protocol + '://' + pm.request.url.getHost() + pm.request.url.getPathWithQuery();",
							"",
							"    if (pm.response.code<400) {",
							"        pm.expect(jsonData._links.self.href).to.eql(requestUri);",
							"        pm.expect(jsonData._links.self.templated).to.be.an(\"undefined\");",
							"        pm.expect(jsonData.instance).to.be.an(\"undefined\");",
							"    } else {",
							"        pm.expect(jsonData._links).to.be.an(\"undefined\");",
							"        pm.expect(jsonData.instance).to.eql(requestUri);",
							"    }",
							"});",
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-KEY",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api.bag.kadaster.nl/esd/huidigebevragingen/v1"
		},
		{
			"key": "API-version",
			"value": "1.5.0"
		},
		{
			"key": "aantal_adressen",
			"value": ""
		},
		{
			"key": "huisnummer0",
			"value": ""
		},
		{
			"key": "huisnummer19",
			"value": ""
		},
		{
			"key": "huisnummer20",
			"value": ""
		},
		{
			"key": "huisnummer39",
			"value": ""
		},
		{
			"key": "huisnummer60",
			"value": ""
		},
		{
			"key": "huisnummer71",
			"value": ""
		},
		{
			"key": "zoek",
			"value": ""
		},
		{
			"key": "huisnummer14",
			"value": ""
		},
		{
			"key": "huisnummer70",
			"value": ""
		},
		{
			"key": "huisnummer9",
			"value": ""
		},
		{
			"key": "apiKey",
			"value": "hier je API key invullen"
		},
		{
			"key": "statusPand",
			"value": ""
		},
		{
			"key": "geconstateerd",
			"value": ""
		},
		{
			"key": "straat",
			"value": ""
		},
		{
			"key": "woonplaats",
			"value": ""
		},
		{
			"key": "zoekresultaatIdentificatie381",
			"value": ""
		},
		{
			"key": "bestaatniet",
			"value": ""
		},
		{
			"key": "woonplaatsIdentificatie",
			"value": ""
		},
		{
			"key": "q",
			"value": ""
		},
		{
			"key": "nummeraanduidingIdentificatie",
			"value": ""
		}
	]
}