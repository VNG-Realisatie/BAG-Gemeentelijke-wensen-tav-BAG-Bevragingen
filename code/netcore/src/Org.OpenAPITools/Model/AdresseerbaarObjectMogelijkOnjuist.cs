/*
 * Huidige bevragingen API
 *
 * Deze API levert actuele gegevens over adressen, adresseerbare objecten en panden. Actueel betekent in deze API `zonder eindstatus`. De bron voor deze API is de basisregistratie adressen en gebouwen (BAG).
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: bag@kadaster.nl
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Wanneer true is de waarde mogelijk onjuist en wordt juistheid op dit moment onderzocht. Zie toelichting.
    /// </summary>
    [DataContract(Name = "AdresseerbaarObjectMogelijkOnjuist")]
    public partial class AdresseerbaarObjectMogelijkOnjuist : IEquatable<AdresseerbaarObjectMogelijkOnjuist>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdresseerbaarObjectMogelijkOnjuist" /> class.
        /// </summary>
        /// <param name="gebruiksdoelen">gebruiksdoelen.</param>
        /// <param name="geometrie">geometrie.</param>
        /// <param name="nummeraanduidingIdentificaties">nummeraanduidingIdentificaties.</param>
        /// <param name="pandIdentificaties">pandIdentificaties.</param>
        /// <param name="oppervlakte">oppervlakte.</param>
        /// <param name="status">status.</param>
        /// <param name="toelichting">toelichting.</param>
        public AdresseerbaarObjectMogelijkOnjuist(bool gebruiksdoelen = default(bool), bool geometrie = default(bool), bool nummeraanduidingIdentificaties = default(bool), bool pandIdentificaties = default(bool), bool oppervlakte = default(bool), bool status = default(bool), List<string> toelichting = default(List<string>))
        {
            this.Gebruiksdoelen = gebruiksdoelen;
            this.Geometrie = geometrie;
            this.NummeraanduidingIdentificaties = nummeraanduidingIdentificaties;
            this.PandIdentificaties = pandIdentificaties;
            this.Oppervlakte = oppervlakte;
            this.Status = status;
            this.Toelichting = toelichting;
        }

        /// <summary>
        /// Gets or Sets Gebruiksdoelen
        /// </summary>
        [DataMember(Name = "gebruiksdoelen", EmitDefaultValue = false)]
        public bool Gebruiksdoelen { get; set; }

        /// <summary>
        /// Gets or Sets Geometrie
        /// </summary>
        [DataMember(Name = "geometrie", EmitDefaultValue = false)]
        public bool Geometrie { get; set; }

        /// <summary>
        /// Gets or Sets NummeraanduidingIdentificaties
        /// </summary>
        [DataMember(Name = "nummeraanduidingIdentificaties", EmitDefaultValue = false)]
        public bool NummeraanduidingIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets PandIdentificaties
        /// </summary>
        [DataMember(Name = "pandIdentificaties", EmitDefaultValue = false)]
        public bool PandIdentificaties { get; set; }

        /// <summary>
        /// Gets or Sets Oppervlakte
        /// </summary>
        [DataMember(Name = "oppervlakte", EmitDefaultValue = false)]
        public bool Oppervlakte { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public bool Status { get; set; }

        /// <summary>
        /// Gets or Sets Toelichting
        /// </summary>
        [DataMember(Name = "toelichting", EmitDefaultValue = false)]
        public List<string> Toelichting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdresseerbaarObjectMogelijkOnjuist {\n");
            sb.Append("  Gebruiksdoelen: ").Append(Gebruiksdoelen).Append("\n");
            sb.Append("  Geometrie: ").Append(Geometrie).Append("\n");
            sb.Append("  NummeraanduidingIdentificaties: ").Append(NummeraanduidingIdentificaties).Append("\n");
            sb.Append("  PandIdentificaties: ").Append(PandIdentificaties).Append("\n");
            sb.Append("  Oppervlakte: ").Append(Oppervlakte).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Toelichting: ").Append(Toelichting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdresseerbaarObjectMogelijkOnjuist);
        }

        /// <summary>
        /// Returns true if AdresseerbaarObjectMogelijkOnjuist instances are equal
        /// </summary>
        /// <param name="input">Instance of AdresseerbaarObjectMogelijkOnjuist to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdresseerbaarObjectMogelijkOnjuist input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Gebruiksdoelen == input.Gebruiksdoelen ||
                    this.Gebruiksdoelen.Equals(input.Gebruiksdoelen)
                ) && 
                (
                    this.Geometrie == input.Geometrie ||
                    this.Geometrie.Equals(input.Geometrie)
                ) && 
                (
                    this.NummeraanduidingIdentificaties == input.NummeraanduidingIdentificaties ||
                    this.NummeraanduidingIdentificaties.Equals(input.NummeraanduidingIdentificaties)
                ) && 
                (
                    this.PandIdentificaties == input.PandIdentificaties ||
                    this.PandIdentificaties.Equals(input.PandIdentificaties)
                ) && 
                (
                    this.Oppervlakte == input.Oppervlakte ||
                    this.Oppervlakte.Equals(input.Oppervlakte)
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Toelichting == input.Toelichting ||
                    this.Toelichting != null &&
                    input.Toelichting != null &&
                    this.Toelichting.SequenceEqual(input.Toelichting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Gebruiksdoelen.GetHashCode();
                hashCode = hashCode * 59 + this.Geometrie.GetHashCode();
                hashCode = hashCode * 59 + this.NummeraanduidingIdentificaties.GetHashCode();
                hashCode = hashCode * 59 + this.PandIdentificaties.GetHashCode();
                hashCode = hashCode * 59 + this.Oppervlakte.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Toelichting != null)
                    hashCode = hashCode * 59 + this.Toelichting.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
